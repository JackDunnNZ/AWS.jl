# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: macie2
using AWS.Compat
using AWS.UUIDs

# Julia syntax for service-level optional parameters to the AWS request syntax
const SERVICE_PARAMETER_MAP = OrderedCollections.LittleDict("client_token" => "clientToken", "finding_publishing_frequency" => "findingPublishingFrequency", "status" => "status", "max_results" => "maxResults", "next_token" => "nextToken", "ids" => "ids", "finding_criteria" => "findingCriteria", "sort_criteria" => "sortCriteria", "only_associated" => "onlyAssociated", "finding_types" => "findingTypes", "account_id" => "accountId", "custom_data_identifier_ids" => "customDataIdentifierIds", "description" => "description", "initial_run" => "initialRun", "managed_data_identifier_ids" => "managedDataIdentifierIds", "managed_data_identifier_selector" => "managedDataIdentifierSelector", "sampling_percentage" => "samplingPercentage", "schedule_frequency" => "scheduleFrequency", "tags" => "tags", "filter_by" => "filterBy", "sort_by" => "sortBy", "time_range" => "timeRange", "ignore_words" => "ignoreWords", "keywords" => "keywords", "maximum_match_distance" => "maximumMatchDistance", "name" => "name", "regex" => "regex", "severity_levels" => "severityLevels", "criteria" => "criteria", "action" => "action", "position" => "position", "administrator_account_id" => "administratorAccountId", "master_account" => "masterAccount", "bucket_criteria" => "bucketCriteria", "size" => "size", "security_hub_configuration" => "securityHubConfiguration", "disable_email_notification" => "disableEmailNotification", "message" => "message", "filter_criteria" => "filterCriteria")

"""
    accept_invitation(invitation_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Accepts an Amazon Macie membership invitation that was received from a specific account.

# Arguments
- `invitation_id`: The unique identifier for the invitation to accept.

# Keyword Parameters
- `administrator_account_id`: The Amazon Web Services account ID for the account that sent
  the invitation.
- `master_account`: (Deprecated) The Amazon Web Services account ID for the account that
  sent the invitation. This property has been replaced by the administratorAccountId property
  and is retained only for backward compatibility.
"""
function accept_invitation(invitationId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/invitations/accept", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("invitationId"=>invitationId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    batch_get_custom_data_identifiers(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves information about one or more custom data identifiers.

# Keyword Parameters
- `ids`: An array of custom data identifier IDs, one for each custom data identifier to
  retrieve information about.
"""
function batch_get_custom_data_identifiers(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/custom-data-identifiers/get", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_classification_job(client_token, job_type, name, s3_job_definition; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates and defines the settings for a classification job.

# Arguments
- `client_token`: A unique, case-sensitive token that you provide to ensure the idempotency
  of the request.
- `job_type`: The schedule for running the job. Valid values are: ONE_TIME - Run the job
  only once. If you specify this value, don't specify a value for the scheduleFrequency
  property. SCHEDULED - Run the job on a daily, weekly, or monthly basis. If you specify this
  value, use the scheduleFrequency property to define the recurrence pattern for the job.
- `name`: A custom name for the job. The name can contain as many as 500 characters.
- `s3_job_definition`: The S3 buckets that contain the objects to analyze, and the scope of
  that analysis.

# Keyword Parameters
- `custom_data_identifier_ids`: An array of unique identifiers, one for each custom data
  identifier for the job to use when it analyzes data. To use only managed data identifiers,
  don't specify a value for this property and specify a value other than NONE for the
  managedDataIdentifierSelector property.
- `description`: A custom description of the job. The description can contain as many as
  200 characters.
- `initial_run`: For a recurring job, specifies whether to analyze all existing, eligible
  objects immediately after the job is created (true). To analyze only those objects that are
  created or changed after you create the job and before the job's first scheduled run, set
  this value to false.If you configure the job to run only once, don't specify a value for
  this property.
- `managed_data_identifier_ids`: An array of unique identifiers, one for each managed data
  identifier for the job to include (use) or exclude (not use) when it analyzes data.
  Inclusion or exclusion depends on the managed data identifier selection type that you
  specify for the job (managedDataIdentifierSelector).To retrieve a list of valid values for
  this property, use the ListManagedDataIdentifiers operation.
- `managed_data_identifier_selector`: The selection type to apply when determining which
  managed data identifiers the job uses to analyze data. Valid values are: ALL - Use all the
  managed data identifiers that Amazon Macie provides. If you specify this value, don't
  specify any values for the managedDataIdentifierIds property. EXCLUDE - Use all the managed
  data identifiers that Macie provides except the managed data identifiers specified by the
  managedDataIdentifierIds property. INCLUDE - Use only the managed data identifiers
  specified by the managedDataIdentifierIds property. NONE - Don't use any managed data
  identifiers. If you specify this value, specify at least one custom data identifier for the
  job (customDataIdentifierIds) and don't specify any values for the managedDataIdentifierIds
  property. If you don't specify a value for this property, the job uses all managed data
  identifiers. If you don't specify a value for this property or you specify ALL or EXCLUDE
  for a recurring job, the job also uses new managed data identifiers as they are released.
- `sampling_percentage`: The sampling depth, as a percentage, for the job to apply when
  processing objects. This value determines the percentage of eligible objects that the job
  analyzes. If this value is less than 100, Amazon Macie selects the objects to analyze at
  random, up to the specified percentage, and analyzes all the data in those objects.
- `schedule_frequency`: The recurrence pattern for running the job. To run the job only
  once, don't specify a value for this property and set the value for the jobType property to
  ONE_TIME.
- `tags`: A map of key-value pairs that specifies the tags to associate with the job. A job
  can have a maximum of 50 tags. Each tag consists of a tag key and an associated tag value.
  The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256
  characters.
"""
function create_classification_job(clientToken, jobType, name, s3JobDefinition; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/jobs", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("clientToken"=>clientToken, "jobType"=>jobType, "name"=>name, "s3JobDefinition"=>s3JobDefinition), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_custom_data_identifier(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates and defines the criteria and other settings for a custom data identifier.

# Keyword Parameters
- `client_token`: A unique, case-sensitive token that you provide to ensure the idempotency
  of the request.
- `description`: A custom description of the custom data identifier. The description can
  contain as many as 512 characters. We strongly recommend that you avoid including any
  sensitive data in the description of a custom data identifier. Other users of your account
  might be able to see the identifier's description, depending on the actions that they're
  allowed to perform in Amazon Macie.
- `ignore_words`: An array that lists specific character sequences (ignore words) to
  exclude from the results. If the text matched by the regular expression contains any string
  in this array, Amazon Macie ignores it. The array can contain as many as 10 ignore words.
  Each ignore word can contain 4-90 UTF-8 characters. Ignore words are case sensitive.
- `keywords`: An array that lists specific character sequences (keywords), one of which
  must be within proximity (maximumMatchDistance) of the regular expression to match. The
  array can contain as many as 50 keywords. Each keyword can contain 3-90 UTF-8 characters.
  Keywords aren't case sensitive.
- `maximum_match_distance`: The maximum number of characters that can exist between text
  that matches the regular expression and the character sequences specified by the keywords
  array. Amazon Macie includes or excludes a result based on the proximity of a keyword to
  text that matches the regular expression. The distance can be 1-300 characters. The default
  value is 50.
- `name`: A custom name for the custom data identifier. The name can contain as many as 128
  characters. We strongly recommend that you avoid including any sensitive data in the name
  of a custom data identifier. Other users of your account might be able to see the
  identifier's name, depending on the actions that they're allowed to perform in Amazon Macie.
- `regex`: The regular expression (regex) that defines the pattern to match. The expression
  can contain as many as 512 characters.
- `severity_levels`: The severity to assign to findings that the custom data identifier
  produces, based on the number of occurrences of text that matches the custom data
  identifier's detection criteria. You can specify as many as three SeverityLevel objects in
  this array, one for each severity: LOW, MEDIUM, or HIGH. If you specify more than one, the
  occurrences thresholds must be in ascending order by severity, moving from LOW to HIGH. For
  example, 1 for LOW, 50 for MEDIUM, and 100 for HIGH. If an S3 object contains fewer
  occurrences than the lowest specified threshold, Amazon Macie doesn't create a finding. If
  you don't specify any values for this array, Macie creates findings for S3 objects that
  contain at least one occurrence of text that matches the detection criteria, and Macie
  assigns the MEDIUM severity to those findings.
- `tags`: A map of key-value pairs that specifies the tags to associate with the custom
  data identifier. A custom data identifier can have a maximum of 50 tags. Each tag consists
  of a tag key and an associated tag value. The maximum length of a tag key is 128
  characters. The maximum length of a tag value is 256 characters.
"""
function create_custom_data_identifier(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/custom-data-identifiers", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_findings_filter(action, finding_criteria, name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates and defines the criteria and other settings for a findings filter.

# Arguments
- `action`: The action to perform on findings that meet the filter criteria
  (findingCriteria). Valid values are: ARCHIVE, suppress (automatically archive) the
  findings; and, NOOP, don't perform any action on the findings.
- `finding_criteria`: The criteria to use to filter findings.
- `name`: A custom name for the filter. The name must contain at least 3 characters and can
  contain as many as 64 characters. We strongly recommend that you avoid including any
  sensitive data in the name of a filter. Other users of your account might be able to see
  the filter's name, depending on the actions that they're allowed to perform in Amazon Macie.

# Keyword Parameters
- `client_token`: A unique, case-sensitive token that you provide to ensure the idempotency
  of the request.
- `description`: A custom description of the filter. The description can contain as many as
  512 characters. We strongly recommend that you avoid including any sensitive data in the
  description of a filter. Other users of your account might be able to see the filter's
  description, depending on the actions that they're allowed to perform in Amazon Macie.
- `position`: The position of the filter in the list of saved filters on the Amazon Macie
  console. This value also determines the order in which the filter is applied to findings,
  relative to other filters that are also applied to the findings.
- `tags`: A map of key-value pairs that specifies the tags to associate with the filter. A
  findings filter can have a maximum of 50 tags. Each tag consists of a tag key and an
  associated tag value. The maximum length of a tag key is 128 characters. The maximum length
  of a tag value is 256 characters.
"""
function create_findings_filter(action, findingCriteria, name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/findingsfilters", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("action"=>action, "findingCriteria"=>findingCriteria, "name"=>name, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_invitations(account_ids; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Sends an Amazon Macie membership invitation to one or more accounts.

# Arguments
- `account_ids`: An array that lists Amazon Web Services account IDs, one for each account
  to send the invitation to.

# Keyword Parameters
- `disable_email_notification`: Specifies whether to send an email notification to the root
  user of each account that the invitation will be sent to. This notification is in addition
  to an alert that the root user receives in Personal Health Dashboard. To send an email
  notification to the root user of each account, set this value to true.
- `message`: A custom message to include in the invitation. Amazon Macie adds this message
  to the standard content that it sends for an invitation.
"""
function create_invitations(accountIds; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/invitations", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("accountIds"=>accountIds), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_member(account; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Associates an account with an Amazon Macie administrator account.

# Arguments
- `account`: The details of the account to associate with the administrator account.

# Keyword Parameters
- `tags`: A map of key-value pairs that specifies the tags to associate with the account in
  Amazon Macie. An account can have a maximum of 50 tags. Each tag consists of a tag key and
  an associated tag value. The maximum length of a tag key is 128 characters. The maximum
  length of a tag value is 256 characters.
"""
function create_member(account; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/members", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("account"=>account), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_sample_findings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates sample findings.

# Keyword Parameters
- `finding_types`: An array of finding types, one for each type of sample finding to
  create. To create a sample of every type of finding that Amazon Macie supports, don't
  include this array in your request.
"""
function create_sample_findings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/findings/sample", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    decline_invitations(account_ids; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Declines Amazon Macie membership invitations that were received from specific accounts.

# Arguments
- `account_ids`: An array that lists Amazon Web Services account IDs, one for each account
  that sent an invitation to decline.

"""
function decline_invitations(accountIds; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/invitations/decline", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("accountIds"=>accountIds), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_custom_data_identifier(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Soft deletes a custom data identifier.

# Arguments
- `id`: The unique identifier for the Amazon Macie resource or account that the request
  applies to.

"""
function delete_custom_data_identifier(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("DELETE", "/custom-data-identifiers/$(id)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_findings_filter(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a findings filter.

# Arguments
- `id`: The unique identifier for the Amazon Macie resource or account that the request
  applies to.

"""
function delete_findings_filter(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("DELETE", "/findingsfilters/$(id)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_invitations(account_ids; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes Amazon Macie membership invitations that were received from specific accounts.

# Arguments
- `account_ids`: An array that lists Amazon Web Services account IDs, one for each account
  that sent an invitation to delete.

"""
function delete_invitations(accountIds; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/invitations/delete", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("accountIds"=>accountIds), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_member(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the association between an Amazon Macie administrator account and an account.

# Arguments
- `id`: The unique identifier for the Amazon Macie resource or account that the request
  applies to.

"""
function delete_member(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("DELETE", "/members/$(id)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_buckets(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Retrieves (queries) statistical data and other information about one or more S3 buckets
that Amazon Macie monitors and analyzes.

# Keyword Parameters
- `criteria`: The criteria to use to filter the query results.
- `max_results`: The maximum number of items to include in each page of the response. The
  default value is 50.
- `next_token`: The nextToken string that specifies which page of results to return in a
  paginated response.
- `sort_criteria`: The criteria to use to sort the query results.
"""
function describe_buckets(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/datasources/s3", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_classification_job(job_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves the status and settings for a classification job.

# Arguments
- `job_id`: The unique identifier for the classification job.

"""
function describe_classification_job(jobId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("GET", "/jobs/$(jobId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_organization_configuration(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves the Amazon Macie configuration settings for an Amazon Web Services organization.

"""
function describe_organization_configuration(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("GET", "/admin/configuration", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    disable_macie(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Disables an Amazon Macie account and deletes Macie resources for the account.

"""
function disable_macie(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("DELETE", "/macie", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    disable_organization_admin_account(admin_account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Disables an account as the delegated Amazon Macie administrator account for an Amazon Web
Services organization.

# Arguments
- `admin_account_id`: The Amazon Web Services account ID of the delegated Amazon Macie
  administrator account.

"""
function disable_organization_admin_account(adminAccountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("DELETE", "/admin", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("adminAccountId"=>adminAccountId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    disassociate_from_administrator_account(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Disassociates a member account from its Amazon Macie administrator account.

"""
function disassociate_from_administrator_account(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/administrator/disassociate", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    disassociate_from_master_account(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

(Deprecated) Disassociates a member account from its Amazon Macie administrator account.
This operation has been replaced by the DisassociateFromAdministratorAccount operation.

"""
function disassociate_from_master_account(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/master/disassociate", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    disassociate_member(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Disassociates an Amazon Macie administrator account from a member account.

# Arguments
- `id`: The unique identifier for the Amazon Macie resource or account that the request
  applies to.

"""
function disassociate_member(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/members/disassociate/$(id)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    enable_macie(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Enables Amazon Macie and specifies the configuration settings for a Macie account.

# Keyword Parameters
- `client_token`: A unique, case-sensitive token that you provide to ensure the idempotency
  of the request.
- `finding_publishing_frequency`: Specifies how often to publish updates to policy findings
  for the account. This includes publishing updates to Security Hub and Amazon EventBridge
  (formerly called Amazon CloudWatch Events).
- `status`: Specifies the new status for the account. To enable Amazon Macie and start all
  Macie activities for the account, set this value to ENABLED.
"""
function enable_macie(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/macie", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    enable_organization_admin_account(admin_account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Designates an account as the delegated Amazon Macie administrator account for an Amazon Web
Services organization.

# Arguments
- `admin_account_id`: The Amazon Web Services account ID for the account to designate as
  the delegated Amazon Macie administrator account for the organization.

# Keyword Parameters
- `client_token`: A unique, case-sensitive token that you provide to ensure the idempotency
  of the request.
"""
function enable_organization_admin_account(adminAccountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/admin", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("adminAccountId"=>adminAccountId, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_administrator_account(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves information about the Amazon Macie administrator account for an account.

"""
function get_administrator_account(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("GET", "/administrator", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_bucket_statistics(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Retrieves (queries) aggregated statistical data for all the S3 buckets that Amazon Macie
monitors and analyzes.

# Keyword Parameters
- `account_id`: The unique identifier for the Amazon Web Services account.
"""
function get_bucket_statistics(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/datasources/s3/statistics", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_classification_export_configuration(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves the configuration settings for storing data classification results.

"""
function get_classification_export_configuration(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("GET", "/classification-export-configuration", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_custom_data_identifier(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves the criteria and other settings for a custom data identifier.

# Arguments
- `id`: The unique identifier for the Amazon Macie resource or account that the request
  applies to.

"""
function get_custom_data_identifier(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("GET", "/custom-data-identifiers/$(id)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_finding_statistics(group_by; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Retrieves (queries) aggregated statistical data about findings.

# Arguments
- `group_by`: The finding property to use to group the query results. Valid values are:
  classificationDetails.jobId - The unique identifier for the classification job that
  produced the finding. resourcesAffected.s3Bucket.name - The name of the S3 bucket that the
  finding applies to. severity.description - The severity level of the finding, such as High
  or Medium. type - The type of finding, such as Policy:IAMUser/S3BucketPublic and
  SensitiveData:S3Object/Personal.

# Keyword Parameters
- `finding_criteria`: The criteria to use to filter the query results.
- `size`: The maximum number of items to include in each page of the response.
- `sort_criteria`: The criteria to use to sort the query results.
"""
function get_finding_statistics(groupBy; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/findings/statistics", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("groupBy"=>groupBy), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_findings(finding_ids; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves the details of one or more findings.

# Arguments
- `finding_ids`: An array of strings that lists the unique identifiers for the findings to
  retrieve.

# Keyword Parameters
- `sort_criteria`: The criteria for sorting the results of the request.
"""
function get_findings(findingIds; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/findings/describe", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("findingIds"=>findingIds), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_findings_filter(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves the criteria and other settings for a findings filter.

# Arguments
- `id`: The unique identifier for the Amazon Macie resource or account that the request
  applies to.

"""
function get_findings_filter(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("GET", "/findingsfilters/$(id)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_findings_publication_configuration(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves the configuration settings for publishing findings to Security Hub.

"""
function get_findings_publication_configuration(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("GET", "/findings-publication-configuration", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_invitations_count(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves the count of Amazon Macie membership invitations that were received by an account.

"""
function get_invitations_count(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("GET", "/invitations/count", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_macie_session(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves the current status and configuration settings for an Amazon Macie account.

"""
function get_macie_session(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("GET", "/macie", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_master_account(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

(Deprecated) Retrieves information about the Amazon Macie administrator account for an
account. This operation has been replaced by the GetAdministratorAccount operation.

"""
function get_master_account(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("GET", "/master", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_member(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves information about an account that's associated with an Amazon Macie administrator
account.

# Arguments
- `id`: The unique identifier for the Amazon Macie resource or account that the request
  applies to.

"""
function get_member(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("GET", "/members/$(id)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_usage_statistics(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves (queries) quotas and aggregated usage data for one or more accounts.

# Keyword Parameters
- `filter_by`: An array of objects, one for each condition to use to filter the query
  results. If you specify more than one condition, Amazon Macie uses an AND operator to join
  the conditions.
- `max_results`: The maximum number of items to include in each page of the response.
- `next_token`: The nextToken string that specifies which page of results to return in a
  paginated response.
- `sort_by`: The criteria to use to sort the query results.
- `time_range`: The inclusive time period to query usage data for. Valid values are:
  MONTH_TO_DATE, for the current calendar month to date; and, PAST_30_DAYS, for the preceding
  30 days. If you don't specify a value, Amazon Macie provides usage data for the preceding
  30 days.
"""
function get_usage_statistics(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/usage/statistics", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_usage_totals(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves (queries) aggregated usage data for an account.

# Keyword Parameters
- `time_range`: The inclusive time period to retrieve the data for. Valid values are:
  MONTH_TO_DATE, for the current calendar month to date; and, PAST_30_DAYS, for the preceding
  30 days. If you don't specify a value for this parameter, Amazon Macie provides aggregated
  usage data for the preceding 30 days.
"""
function get_usage_totals(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("GET", "/usage", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_classification_jobs(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves a subset of information about one or more classification jobs.

# Keyword Parameters
- `filter_criteria`: The criteria to use to filter the results.
- `max_results`: The maximum number of items to include in each page of the response.
- `next_token`: The nextToken string that specifies which page of results to return in a
  paginated response.
- `sort_criteria`: The criteria to use to sort the results.
"""
function list_classification_jobs(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/jobs/list", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_custom_data_identifiers(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves a subset of information about all the custom data identifiers for an account.

# Keyword Parameters
- `max_results`: The maximum number of items to include in each page of the response.
- `next_token`: The nextToken string that specifies which page of results to return in a
  paginated response.
"""
function list_custom_data_identifiers(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/custom-data-identifiers/list", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_findings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves a subset of information about one or more findings.

# Keyword Parameters
- `finding_criteria`: The criteria to use to filter the results.
- `max_results`: The maximum number of items to include in each page of the response.
- `next_token`: The nextToken string that specifies which page of results to return in a
  paginated response.
- `sort_criteria`: The criteria to use to sort the results.
"""
function list_findings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/findings", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_findings_filters(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves a subset of information about all the findings filters for an account.

# Keyword Parameters
- `max_results`: The maximum number of items to include in each page of a paginated
  response.
- `next_token`: The nextToken string that specifies which page of results to return in a
  paginated response.
"""
function list_findings_filters(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("GET", "/findingsfilters", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_invitations(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves information about the Amazon Macie membership invitations that were received by
an account.

# Keyword Parameters
- `max_results`: The maximum number of items to include in each page of a paginated
  response.
- `next_token`: The nextToken string that specifies which page of results to return in a
  paginated response.
"""
function list_invitations(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("GET", "/invitations", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_managed_data_identifiers(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves information about all the managed data identifiers that Amazon Macie currently
provides.

# Keyword Parameters
- `next_token`: The nextToken string that specifies which page of results to return in a
  paginated response.
"""
function list_managed_data_identifiers(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/managed-data-identifiers/list", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_members(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves information about the accounts that are associated with an Amazon Macie
administrator account.

# Keyword Parameters
- `max_results`: The maximum number of items to include in each page of a paginated
  response.
- `next_token`: The nextToken string that specifies which page of results to return in a
  paginated response.
- `only_associated`: Specifies which accounts to include in the response, based on the
  status of an account's relationship with the administrator account. By default, the
  response includes only current member accounts. To include all accounts, set this value to
  false.
"""
function list_members(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("GET", "/members", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_organization_admin_accounts(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves information about the delegated Amazon Macie administrator account for an Amazon
Web Services organization.

# Keyword Parameters
- `max_results`: The maximum number of items to include in each page of a paginated
  response.
- `next_token`: The nextToken string that specifies which page of results to return in a
  paginated response.
"""
function list_organization_admin_accounts(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("GET", "/admin", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_tags_for_resource(resource_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves the tags (keys and values) that are associated with a classification job, custom
data identifier, findings filter, or member account.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the classification job, custom data
  identifier, findings filter, or member account.

"""
function list_tags_for_resource(resourceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("GET", "/tags/$(resourceArn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    put_classification_export_configuration(configuration; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates or updates the configuration settings for storing data classification results.

# Arguments
- `configuration`: The location to store data classification results in, and the encryption
  settings to use when storing results in that location.

"""
function put_classification_export_configuration(configuration; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("PUT", "/classification-export-configuration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("configuration"=>configuration), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    put_findings_publication_configuration(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the configuration settings for publishing findings to Security Hub.

# Keyword Parameters
- `client_token`: A unique, case-sensitive token that you provide to ensure the idempotency
  of the request.
- `security_hub_configuration`: The configuration settings that determine which findings to
  publish to Security Hub.
"""
function put_findings_publication_configuration(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("PUT", "/findings-publication-configuration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    search_resources(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves (queries) statistical data and other information about Amazon Web Services
resources that Amazon Macie monitors and analyzes.

# Keyword Parameters
- `bucket_criteria`: The filter conditions that determine which S3 buckets to include or
  exclude from the query results.
- `max_results`: The maximum number of items to include in each page of the response. The
  default value is 50.
- `next_token`: The nextToken string that specifies which page of results to return in a
  paginated response.
- `sort_criteria`: The criteria to use to sort the results.
"""
function search_resources(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/datasources/search-resources", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    tag_resource(resource_arn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds or updates one or more tags (keys and values) that are associated with a
classification job, custom data identifier, findings filter, or member account.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the classification job, custom data
  identifier, findings filter, or member account.
- `tags`: A map of key-value pairs that specifies the tags to associate with the resource.
  A resource can have a maximum of 50 tags. Each tag consists of a tag key and an associated
  tag value. The maximum length of a tag key is 128 characters. The maximum length of a tag
  value is 256 characters.

"""
function tag_resource(resourceArn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/tags/$(resourceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tags"=>tags), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    test_custom_data_identifier(regex, sample_text; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Tests a custom data identifier.

# Arguments
- `regex`: The regular expression (regex) that defines the pattern to match. The expression
  can contain as many as 512 characters.
- `sample_text`: The sample text to inspect by using the custom data identifier. The text
  can contain as many as 1,000 characters.

# Keyword Parameters
- `ignore_words`: An array that lists specific character sequences (ignore words) to
  exclude from the results. If the text matched by the regular expression contains any string
  in this array, Amazon Macie ignores it. The array can contain as many as 10 ignore words.
  Each ignore word can contain 4-90 UTF-8 characters. Ignore words are case sensitive.
- `keywords`: An array that lists specific character sequences (keywords), one of which
  must be within proximity (maximumMatchDistance) of the regular expression to match. The
  array can contain as many as 50 keywords. Each keyword can contain 3-90 UTF-8 characters.
  Keywords aren't case sensitive.
- `maximum_match_distance`: The maximum number of characters that can exist between text
  that matches the regular expression and the character sequences specified by the keywords
  array. Amazon Macie includes or excludes a result based on the proximity of a keyword to
  text that matches the regular expression. The distance can be 1-300 characters. The default
  value is 50.
"""
function test_custom_data_identifier(regex, sampleText; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("POST", "/custom-data-identifiers/test", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("regex"=>regex, "sampleText"=>sampleText), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    untag_resource(resource_arn, tag_keys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes one or more tags (keys and values) from a classification job, custom data
identifier, findings filter, or member account.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the classification job, custom data
  identifier, findings filter, or member account.
- `tag_keys`: The key of the tag to remove from the resource. To remove multiple tags,
  append the tagKeys parameter and argument for each additional tag to remove, separated by
  an ampersand (&amp;).

"""
function untag_resource(resourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("DELETE", "/tags/$(resourceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tagKeys"=>tagKeys), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_classification_job(job_id, job_status; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Changes the status of a classification job.

# Arguments
- `job_id`: The unique identifier for the classification job.
- `job_status`: The new status for the job. Valid values are: CANCELLED - Stops the job
  permanently and cancels it. This value is valid only if the job's current status is IDLE,
  PAUSED, RUNNING, or USER_PAUSED. If you specify this value and the job's current status is
  RUNNING, Amazon Macie immediately begins to stop all processing tasks for the job. You
  can't resume or restart a job after you cancel it. RUNNING - Resumes the job. This value is
  valid only if the job's current status is USER_PAUSED. If you paused the job while it was
  actively running and you specify this value less than 30 days after you paused the job,
  Macie immediately resumes processing from the point where you paused the job. Otherwise,
  Macie resumes the job according to the schedule and other settings for the job. USER_PAUSED
  - Pauses the job temporarily. This value is valid only if the job's current status is IDLE,
  PAUSED, or RUNNING. If you specify this value and the job's current status is RUNNING,
  Macie immediately begins to pause all processing tasks for the job. If you pause a one-time
  job and you don't resume it within 30 days, the job expires and Macie cancels the job. If
  you pause a recurring job when its status is RUNNING and you don't resume it within 30
  days, the job run expires and Macie cancels the run. To check the expiration date, refer to
  the UserPausedDetails.jobExpiresAt property.

"""
function update_classification_job(jobId, jobStatus; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("PATCH", "/jobs/$(jobId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("jobStatus"=>jobStatus), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_findings_filter(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the criteria and other settings for a findings filter.

# Arguments
- `id`: The unique identifier for the Amazon Macie resource or account that the request
  applies to.

# Keyword Parameters
- `action`: The action to perform on findings that meet the filter criteria
  (findingCriteria). Valid values are: ARCHIVE, suppress (automatically archive) the
  findings; and, NOOP, don't perform any action on the findings.
- `client_token`: A unique, case-sensitive token that you provide to ensure the idempotency
  of the request.
- `description`: A custom description of the filter. The description can contain as many as
  512 characters. We strongly recommend that you avoid including any sensitive data in the
  description of a filter. Other users might be able to see the filter's description,
  depending on the actions that they're allowed to perform in Amazon Macie.
- `finding_criteria`: The criteria to use to filter findings.
- `name`: A custom name for the filter. The name must contain at least 3 characters and can
  contain as many as 64 characters. We strongly recommend that you avoid including any
  sensitive data in the name of a filter. Other users might be able to see the filter's name,
  depending on the actions that they're allowed to perform in Amazon Macie.
- `position`: The position of the filter in the list of saved filters on the Amazon Macie
  console. This value also determines the order in which the filter is applied to findings,
  relative to other filters that are also applied to the findings.
"""
function update_findings_filter(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("PATCH", "/findingsfilters/$(id)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_macie_session(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Suspends or re-enables an Amazon Macie account, or updates the configuration settings for a
Macie account.

# Keyword Parameters
- `finding_publishing_frequency`: Specifies how often to publish updates to policy findings
  for the account. This includes publishing updates to Security Hub and Amazon EventBridge
  (formerly called Amazon CloudWatch Events).
- `status`: Specifies a new status for the account. Valid values are: ENABLED, resume all
  Amazon Macie activities for the account; and, PAUSED, suspend all Macie activities for the
  account.
"""
function update_macie_session(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("PATCH", "/macie", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_member_session(id, status; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Enables an Amazon Macie administrator to suspend or re-enable Macie for a member account.

# Arguments
- `id`: The unique identifier for the Amazon Macie resource or account that the request
  applies to.
- `status`: Specifies the new status for the account. Valid values are: ENABLED, resume all
  Amazon Macie activities for the account; and, PAUSED, suspend all Macie activities for the
  account.

"""
function update_member_session(id, status; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("PATCH", "/macie/members/$(id)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("status"=>status), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_organization_configuration(auto_enable; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the Amazon Macie configuration settings for an Amazon Web Services organization.

# Arguments
- `auto_enable`: Specifies whether to enable Amazon Macie automatically for each account,
  when the account is added to the Amazon Web Services organization.

"""
function update_organization_configuration(autoEnable; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return macie2("PATCH", "/admin/configuration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("autoEnable"=>autoEnable), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
