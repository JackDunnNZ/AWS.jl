# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: mwaa
using AWS.Compat
using AWS.UUIDs

# Julia syntax for service-level optional parameters to the AWS request syntax
const SERVICE_PARAMETER_MAP = OrderedCollections.LittleDict("airflow_configuration_options" => "AirflowConfigurationOptions", "airflow_version" => "AirflowVersion", "environment_class" => "EnvironmentClass", "kms_key" => "KmsKey", "logging_configuration" => "LoggingConfiguration", "max_workers" => "MaxWorkers", "min_workers" => "MinWorkers", "plugins_s3_object_version" => "PluginsS3ObjectVersion", "plugins_s3_path" => "PluginsS3Path", "requirements_s3_object_version" => "RequirementsS3ObjectVersion", "requirements_s3_path" => "RequirementsS3Path", "schedulers" => "Schedulers", "tags" => "Tags", "webserver_access_mode" => "WebserverAccessMode", "weekly_maintenance_window_start" => "WeeklyMaintenanceWindowStart", "max_results" => "MaxResults", "next_token" => "NextToken", "dag_s3_path" => "DagS3Path", "execution_role_arn" => "ExecutionRoleArn", "network_configuration" => "NetworkConfiguration", "source_bucket_arn" => "SourceBucketArn")

"""
    create_cli_token(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Create a CLI token to use Airflow CLI.

# Arguments
- `name`: Create a CLI token request for a MWAA environment.

"""
function create_cli_token(Name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return mwaa("POST", "/clitoken/$(Name)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_environment(dag_s3_path, execution_role_arn, name, network_configuration, source_bucket_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an Amazon Managed Workflows for Apache Airflow (MWAA) environment.

# Arguments
- `dag_s3_path`: The relative path to the DAGs folder on your Amazon S3 bucket. For
  example, dags. To learn more, see Adding or updating DAGs.
- `execution_role_arn`: The Amazon Resource Name (ARN) of the execution role for your
  environment. An execution role is an AWS Identity and Access Management (IAM) role that
  grants MWAA permission to access AWS services and resources used by your environment. For
  example, arn:aws:iam::123456789:role/my-execution-role. To learn more, see Amazon MWAA
  Execution role.
- `name`: The name of the Amazon MWAA environment. For example, MyMWAAEnvironment.
- `network_configuration`: The VPC networking components used to secure and enable network
  traffic between the AWS resources for your environment. To learn more, see About networking
  on Amazon MWAA.
- `source_bucket_arn`: The Amazon Resource Name (ARN) of the Amazon S3 bucket where your
  DAG code and supporting files are stored. For example,
  arn:aws:s3:::my-airflow-bucket-unique-name. To learn more, see Create an Amazon S3 bucket
  for Amazon MWAA.

# Keyword Parameters
- `airflow_configuration_options`: A list of key-value pairs containing the Apache Airflow
  configuration options you want to attach to your environment. To learn more, see Apache
  Airflow configuration options.
- `airflow_version`: The Apache Airflow version for your environment. For example,
  v1.10.12. If no value is specified, defaults to the latest version. Valid values: v1.10.12.
- `environment_class`: The environment class type. Valid values: mw1.small, mw1.medium,
  mw1.large. To learn more, see Amazon MWAA environment class.
- `kms_key`: The AWS Key Management Service (KMS) key to encrypt the data in your
  environment. You can use an AWS owned CMK, or a Customer managed CMK (advanced). To learn
  more, see Get started with Amazon Managed Workflows for Apache Airflow.
- `logging_configuration`: Defines the Apache Airflow logs to send to CloudWatch Logs:
  DagProcessingLogs, SchedulerLogs, TaskLogs, WebserverLogs, WorkerLogs.
- `max_workers`: The maximum number of workers that you want to run in your environment.
  MWAA scales the number of Apache Airflow workers up to the number you specify in the
  MaxWorkers field. For example, 20. When there are no more tasks running, and no more in the
  queue, MWAA disposes of the extra workers leaving the one worker that is included with your
  environment, or the number you specify in MinWorkers.
- `min_workers`: The minimum number of workers that you want to run in your environment.
  MWAA scales the number of Apache Airflow workers up to the number you specify in the
  MaxWorkers field. When there are no more tasks running, and no more in the queue, MWAA
  disposes of the extra workers leaving the worker count you specify in the MinWorkers field.
  For example, 2.
- `plugins_s3_object_version`: The version of the plugins.zip file on your Amazon S3
  bucket. A version must be specified each time a plugins.zip file is updated. To learn more,
  see How S3 Versioning works.
- `plugins_s3_path`: The relative path to the plugins.zip file on your Amazon S3 bucket.
  For example, plugins.zip. If specified, then the plugins.zip version is required. To learn
  more, see Installing custom plugins.
- `requirements_s3_object_version`: The version of the requirements.txt file on your Amazon
  S3 bucket. A version must be specified each time a requirements.txt file is updated. To
  learn more, see How S3 Versioning works.
- `requirements_s3_path`: The relative path to the requirements.txt file on your Amazon S3
  bucket. For example, requirements.txt. If specified, then a file version is required. To
  learn more, see Installing Python dependencies.
- `schedulers`: The number of Apache Airflow schedulers to run in your environment.
- `tags`: The key-value tag pairs you want to associate to your environment. For example,
  \"Environment\": \"Staging\". To learn more, see Tagging AWS resources.
- `webserver_access_mode`: The Apache Airflow Web server access mode. To learn more, see
  Apache Airflow access modes.
- `weekly_maintenance_window_start`: The day and time of the week to start weekly
  maintenance updates of your environment in the following format: DAY:HH:MM. For example:
  TUE:03:30. You can specify a start time in 30 minute increments only. Supported input
  includes the following:   MON|TUE|WED|THU|FRI|SAT|SUN:([01]d|2[0-3]):(00|30)
"""
function create_environment(DagS3Path, ExecutionRoleArn, Name, NetworkConfiguration, SourceBucketArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return mwaa("PUT", "/environments/$(Name)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("DagS3Path"=>DagS3Path, "ExecutionRoleArn"=>ExecutionRoleArn, "NetworkConfiguration"=>NetworkConfiguration, "SourceBucketArn"=>SourceBucketArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_web_login_token(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Create a JWT token to be used to login to Airflow Web UI with claims based Authentication.

# Arguments
- `name`: Create an Airflow Web UI login token request for a MWAA environment.

"""
function create_web_login_token(Name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return mwaa("POST", "/webtoken/$(Name)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_environment(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes an Amazon Managed Workflows for Apache Airflow (MWAA) environment.

# Arguments
- `name`: The name of the Amazon MWAA environment. For example, MyMWAAEnvironment.

"""
function delete_environment(Name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return mwaa("DELETE", "/environments/$(Name)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_environment(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves the details of an Amazon Managed Workflows for Apache Airflow (MWAA) environment.

# Arguments
- `name`: The name of the Amazon MWAA environment. For example, MyMWAAEnvironment.

"""
function get_environment(Name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return mwaa("GET", "/environments/$(Name)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_environments(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the Amazon Managed Workflows for Apache Airflow (MWAA) environments.

# Keyword Parameters
- `max_results`: The maximum number of results to retrieve per page. For example, 5
  environments per page.
- `next_token`: Retrieves the next page of the results.
"""
function list_environments(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return mwaa("GET", "/environments", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_tags_for_resource(resource_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the key-value tag pairs associated to the Amazon Managed Workflows for Apache Airflow
(MWAA) environment. For example, \"Environment\": \"Staging\".

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the Amazon MWAA environment. For
  example, arn:aws:airflow:us-east-1:123456789012:environment/MyMWAAEnvironment.

"""
function list_tags_for_resource(ResourceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return mwaa("GET", "/tags/$(ResourceArn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    publish_metrics(environment_name, metric_data; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

An operation for publishing metrics from the customers to the Ops plane.

# Arguments
- `environment_name`: Publishes environment metric data to Amazon CloudWatch.
- `metric_data`: Publishes metric data points to Amazon CloudWatch. CloudWatch associates
  the data points with the specified metrica.

"""
function publish_metrics(EnvironmentName, MetricData; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return mwaa("POST", "/metrics/environments/$(EnvironmentName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("MetricData"=>MetricData), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    tag_resource(resource_arn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Associates key-value tag pairs to your Amazon Managed Workflows for Apache Airflow (MWAA)
environment.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the Amazon MWAA environment. For
  example, arn:aws:airflow:us-east-1:123456789012:environment/MyMWAAEnvironment.
- `tags`: The key-value tag pairs you want to associate to your environment. For example,
  \"Environment\": \"Staging\". To learn more, see Tagging AWS resources.

"""
function tag_resource(ResourceArn, Tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return mwaa("POST", "/tags/$(ResourceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Tags"=>Tags), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    untag_resource(resource_arn, tag_keys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes key-value tag pairs associated to your Amazon Managed Workflows for Apache Airflow
(MWAA) environment. For example, \"Environment\": \"Staging\".

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the Amazon MWAA environment. For
  example, arn:aws:airflow:us-east-1:123456789012:environment/MyMWAAEnvironment.
- `tag_keys`: The key-value tag pair you want to remove. For example, \"Environment\":
  \"Staging\".

"""
function untag_resource(ResourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return mwaa("DELETE", "/tags/$(ResourceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tagKeys"=>tagKeys), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_environment(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates an Amazon Managed Workflows for Apache Airflow (MWAA) environment.

# Arguments
- `name`: The name of your Amazon MWAA environment. For example, MyMWAAEnvironment.

# Keyword Parameters
- `airflow_configuration_options`: A list of key-value pairs containing the Apache Airflow
  configuration options you want to attach to your environment. To learn more, see Apache
  Airflow configuration options.
- `airflow_version`: The Apache Airflow version for your environment. For example,
  v1.10.12. If no value is specified, defaults to the latest version. Valid values: v1.10.12.
- `dag_s3_path`: The relative path to the DAGs folder on your Amazon S3 bucket. For
  example, dags. To learn more, see Adding or updating DAGs.
- `environment_class`: The environment class type. Valid values: mw1.small, mw1.medium,
  mw1.large. To learn more, see Amazon MWAA environment class.
- `execution_role_arn`: The Amazon Resource Name (ARN) of the execution role in IAM that
  allows MWAA to access AWS resources in your environment. For example,
  arn:aws:iam::123456789:role/my-execution-role. To learn more, see Amazon MWAA Execution
  role.
- `logging_configuration`: Defines the Apache Airflow logs to send to CloudWatch Logs:
  DagProcessingLogs, SchedulerLogs, TaskLogs, WebserverLogs, WorkerLogs.
- `max_workers`: The maximum number of workers that you want to run in your environment.
  MWAA scales the number of Apache Airflow workers up to the number you specify in the
  MaxWorkers field. For example, 20. When there are no more tasks running, and no more in the
  queue, MWAA disposes of the extra workers leaving the one worker that is included with your
  environment, or the number you specify in MinWorkers.
- `min_workers`: The minimum number of workers that you want to run in your environment.
  MWAA scales the number of Apache Airflow workers up to the number you specify in the
  MaxWorkers field. When there are no more tasks running, and no more in the queue, MWAA
  disposes of the extra workers leaving the worker count you specify in the MinWorkers field.
  For example, 2.
- `network_configuration`: The VPC networking components used to secure and enable network
  traffic between the AWS resources for your environment. To learn more, see About networking
  on Amazon MWAA.
- `plugins_s3_object_version`: The version of the plugins.zip file on your Amazon S3
  bucket. A version must be specified each time a plugins.zip file is updated. To learn more,
  see How S3 Versioning works.
- `plugins_s3_path`: The relative path to the plugins.zip file on your Amazon S3 bucket.
  For example, plugins.zip. If specified, then the plugins.zip version is required. To learn
  more, see Installing custom plugins.
- `requirements_s3_object_version`: The version of the requirements.txt file on your Amazon
  S3 bucket. A version must be specified each time a requirements.txt file is updated. To
  learn more, see How S3 Versioning works.
- `requirements_s3_path`: The relative path to the requirements.txt file on your Amazon S3
  bucket. For example, requirements.txt. If specified, then a file version is required. To
  learn more, see Installing Python dependencies.
- `schedulers`: The number of Apache Airflow schedulers to run in your Amazon MWAA
  environment.
- `source_bucket_arn`: The Amazon Resource Name (ARN) of the Amazon S3 bucket where your
  DAG code and supporting files are stored. For example,
  arn:aws:s3:::my-airflow-bucket-unique-name. To learn more, see Create an Amazon S3 bucket
  for Amazon MWAA.
- `webserver_access_mode`: The Apache Airflow Web server access mode. To learn more, see
  Apache Airflow access modes.
- `weekly_maintenance_window_start`: The day and time of the week to start weekly
  maintenance updates of your environment in the following format: DAY:HH:MM. For example:
  TUE:03:30. You can specify a start time in 30 minute increments only. Supported input
  includes the following:   MON|TUE|WED|THU|FRI|SAT|SUN:([01]d|2[0-3]):(00|30)
"""
function update_environment(Name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return mwaa("PATCH", "/environments/$(Name)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
