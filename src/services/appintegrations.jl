# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: appintegrations
using AWS.Compat
using AWS.UUIDs

# Julia syntax for service-level optional parameters to the AWS request syntax
const SERVICE_PARAMETER_MAP = OrderedCollections.LittleDict("client_token" => "ClientToken", "description" => "Description", "tags" => "Tags", "max_results" => "maxResults", "next_token" => "nextToken", "name" => "Name", "kms_key" => "KmsKey", "schedule_config" => "ScheduleConfig", "source_uri" => "SourceURI")

"""
    create_data_integration(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates and persists a DataIntegration resource.  You cannot create a DataIntegration
association for a DataIntegration that has been previously associated. Use a different
DataIntegration, or recreate the DataIntegration using the CreateDataIntegration API.

# Arguments
- `name`: The name of the DataIntegration.

# Keyword Parameters
- `client_token`: A unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request.
- `description`: A description of the DataIntegration.
- `kms_key`: The KMS key for the DataIntegration.
- `schedule_config`: The name of the data and how often it should be pulled from the source.
- `source_uri`: The URI of the data source.
- `tags`: One or more tags.
"""
function create_data_integration(Name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return appintegrations("POST", "/dataIntegrations", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Name"=>Name, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_event_integration(event_bridge_bus, event_filter, name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an EventIntegration, given a specified name, description, and a reference to an
Amazon EventBridge bus in your account and a partner event source that pushes events to
that bus. No objects are created in the your account, only metadata that is persisted on
the EventIntegration control plane.

# Arguments
- `event_bridge_bus`: The EventBridge bus.
- `event_filter`: The event filter.
- `name`: The name of the event integration.

# Keyword Parameters
- `client_token`: A unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request.
- `description`: The description of the event integration.
- `tags`: One or more tags.
"""
function create_event_integration(EventBridgeBus, EventFilter, Name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return appintegrations("POST", "/eventIntegrations", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("EventBridgeBus"=>EventBridgeBus, "EventFilter"=>EventFilter, "Name"=>Name, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_data_integration(identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the DataIntegration. Only DataIntegrations that don't have any
DataIntegrationAssociations can be deleted. Deleting a DataIntegration also deletes the
underlying Amazon AppFlow flow and service linked role.   You cannot create a
DataIntegration association for a DataIntegration that has been previously associated. Use
a different DataIntegration, or recreate the DataIntegration using the
CreateDataIntegration API.

# Arguments
- `identifier`: A unique identifier for the DataIntegration.

"""
function delete_data_integration(Identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return appintegrations("DELETE", "/dataIntegrations/$(Identifier)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_event_integration(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the specified existing event integration. If the event integration is associated
with clients, the request is rejected.

# Arguments
- `name`: The name of the event integration.

"""
function delete_event_integration(Name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return appintegrations("DELETE", "/eventIntegrations/$(Name)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_data_integration(identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about the DataIntegration.  You cannot create a DataIntegration
association for a DataIntegration that has been previously associated. Use a different
DataIntegration, or recreate the DataIntegration using the CreateDataIntegration API.

# Arguments
- `identifier`: A unique identifier.

"""
function get_data_integration(Identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return appintegrations("GET", "/dataIntegrations/$(Identifier)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_event_integration(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about the event integration.

# Arguments
- `name`: The name of the event integration.

"""
function get_event_integration(Name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return appintegrations("GET", "/eventIntegrations/$(Name)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_data_integration_associations(identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a paginated list of DataIntegration associations in the account.  You cannot create
a DataIntegration association for a DataIntegration that has been previously associated.
Use a different DataIntegration, or recreate the DataIntegration using the
CreateDataIntegration API.

# Arguments
- `identifier`: A unique identifier for the DataIntegration.

# Keyword Parameters
- `max_results`: The maximum number of results to return per page.
- `next_token`: The token for the next set of results. Use the value returned in the
  previous response in the next request to retrieve the next set of results.
"""
function list_data_integration_associations(Identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return appintegrations("GET", "/dataIntegrations/$(Identifier)/associations", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_data_integrations(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a paginated list of DataIntegrations in the account.  You cannot create a
DataIntegration association for a DataIntegration that has been previously associated. Use
a different DataIntegration, or recreate the DataIntegration using the
CreateDataIntegration API.

# Keyword Parameters
- `max_results`: The maximum number of results to return per page.
- `next_token`: The token for the next set of results. Use the value returned in the
  previous response in the next request to retrieve the next set of results.
"""
function list_data_integrations(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return appintegrations("GET", "/dataIntegrations", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_event_integration_associations(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a paginated list of event integration associations in the account.

# Arguments
- `name`: The name of the event integration.

# Keyword Parameters
- `max_results`: The maximum number of results to return per page.
- `next_token`: The token for the next set of results. Use the value returned in the
  previous response in the next request to retrieve the next set of results.
"""
function list_event_integration_associations(Name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return appintegrations("GET", "/eventIntegrations/$(Name)/associations", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_event_integrations(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a paginated list of event integrations in the account.

# Keyword Parameters
- `max_results`: The maximum number of results to return per page.
- `next_token`: The token for the next set of results. Use the value returned in the
  previous response in the next request to retrieve the next set of results.
"""
function list_event_integrations(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return appintegrations("GET", "/eventIntegrations", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_tags_for_resource(resource_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the tags for the specified resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource.

"""
function list_tags_for_resource(resourceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return appintegrations("GET", "/tags/$(resourceArn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    tag_resource(resource_arn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds the specified tags to the specified resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource.
- `tags`: One or more tags.

"""
function tag_resource(resourceArn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return appintegrations("POST", "/tags/$(resourceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tags"=>tags), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    untag_resource(resource_arn, tag_keys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes the specified tags from the specified resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource.
- `tag_keys`: The tag keys.

"""
function untag_resource(resourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return appintegrations("DELETE", "/tags/$(resourceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tagKeys"=>tagKeys), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_data_integration(identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the description of a DataIntegration.  You cannot create a DataIntegration
association for a DataIntegration that has been previously associated. Use a different
DataIntegration, or recreate the DataIntegration using the CreateDataIntegration API.

# Arguments
- `identifier`: A unique identifier for the DataIntegration.

# Keyword Parameters
- `description`: A description of the DataIntegration.
- `name`: The name of the DataIntegration.
"""
function update_data_integration(Identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return appintegrations("PATCH", "/dataIntegrations/$(Identifier)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_event_integration(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the description of an event integration.

# Arguments
- `name`: The name of the event integration.

# Keyword Parameters
- `description`: The description of the event inegration.
"""
function update_event_integration(Name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return appintegrations("PATCH", "/eventIntegrations/$(Name)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
