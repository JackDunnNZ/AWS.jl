# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: athena
using AWS.Compat
using AWS.UUIDs

MAPPING = Dict(
    "configuration_updates" => "ConfigurationUpdates",
    "next_token" => "NextToken",
    "client_request_token" => "ClientRequestToken",
    "result_configuration" => "ResultConfiguration",
    "state" => "State",
    "configuration" => "Configuration",
    "parameters" => "Parameters",
    "work_group" => "WorkGroup",
    "description" => "Description",
    "max_results" => "MaxResults",
    "expression" => "Expression",
    "query_execution_context" => "QueryExecutionContext",
    "recursive_delete_option" => "RecursiveDeleteOption",
    "tags" => "Tags",
)

"""
    batch_get_named_query(named_query_ids; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns the details of a single named query or a list of up to 50 queries, which you
provide as an array of query ID strings. Requires you to have access to the workgroup in
which the queries were saved. Use ListNamedQueriesInput to get the list of named query IDs
in the specified workgroup. If information could not be retrieved for a submitted query ID,
information about the query ID submitted is listed under UnprocessedNamedQueryId. Named
queries differ from executed queries. Use BatchGetQueryExecutionInput to get details about
each unique query execution, and ListQueryExecutionsInput to get a list of query execution
IDs.

# Arguments
- `named_query_ids`: An array of query IDs.

"""
function batch_get_named_query(
    NamedQueryIds; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "BatchGetNamedQuery",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("NamedQueryIds" => NamedQueryIds), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    batch_get_query_execution(query_execution_ids; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns the details of a single query execution or a list of up to 50 query executions,
which you provide as an array of query execution ID strings. Requires you to have access to
the workgroup in which the queries ran. To get a list of query execution IDs, use
ListQueryExecutionsInputWorkGroup. Query executions differ from named (saved) queries. Use
BatchGetNamedQueryInput to get details about named queries.

# Arguments
- `query_execution_ids`: An array of query execution IDs.

"""
function batch_get_query_execution(
    QueryExecutionIds; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "BatchGetQueryExecution",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("QueryExecutionIds" => QueryExecutionIds), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_data_catalog(name, type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates (registers) a data catalog with the specified name and properties. Catalogs created
are visible to all users of the same Amazon Web Services account.

# Arguments
- `name`: The name of the data catalog to create. The catalog name must be unique for the
  Amazon Web Services account and can use a maximum of 128 alphanumeric, underscore, at sign,
  or hyphen characters.
- `type`: The type of data catalog to create: LAMBDA for a federated catalog, HIVE for an
  external hive metastore, or GLUE for an Glue Data Catalog.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"description"`: A description of the data catalog to be created.
- `"parameters"`: Specifies the Lambda function or functions to use for creating the data
  catalog. This is a mapping whose values depend on the catalog type.    For the HIVE data
  catalog type, use the following syntax. The metadata-function parameter is required. The
  sdk-version parameter is optional and defaults to the currently supported version.
  metadata-function=lambda_arn, sdk-version=version_number     For the LAMBDA data catalog
  type, use one of the following sets of required parameters, but not both.   If you have one
  Lambda function that processes metadata and another for reading the actual data, use the
  following syntax. Both parameters are required.  metadata-function=lambda_arn,
  record-function=lambda_arn      If you have a composite Lambda function that processes both
  metadata and data, use the following syntax to specify your Lambda function.
  function=lambda_arn       The GLUE type takes a catalog ID parameter and is required. The
  catalog_id  is the account ID of the Amazon Web Services account to which the Glue Data
  Catalog belongs.  catalog-id=catalog_id     The GLUE data catalog type also applies to the
  default AwsDataCatalog that already exists in your account, of which you can have only one
  and cannot modify.   Queries that specify a Glue Data Catalog other than the default
  AwsDataCatalog must be run on Athena engine version 2.   In Regions where Athena engine
  version 2 is not available, creating new Glue data catalogs results in an INVALID_INPUT
  error.
- `"tags"`: A list of comma separated tags to add to the data catalog that is created.
"""
function create_data_catalog(
    Name, Type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "CreateDataCatalog",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("Name" => Name, "Type" => Type), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_named_query(database, name, query_string; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a named query in the specified workgroup. Requires that you have access to the
workgroup. For code samples using the Amazon Web Services SDK for Java, see Examples and
Code Samples in the Amazon Athena User Guide.

# Arguments
- `database`: The database to which the query belongs.
- `name`: The query name.
- `query_string`: The contents of the query with all query statements.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"client_request_token"`: A unique case-sensitive string used to ensure the request to
  create the query is idempotent (executes only once). If another CreateNamedQuery request is
  received, the same response is returned and another query is not created. If a parameter
  has changed, for example, the QueryString, an error is returned.  This token is listed as
  not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for
  Java) auto-generate the token for users. If you are not using the Amazon Web Services SDK
  or the Amazon Web Services CLI, you must provide this token or the action will fail.
- `"description"`: The query description.
- `"work_group"`: The name of the workgroup in which the named query is being created.
"""
function create_named_query(
    Database,
    Name,
    QueryString;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "CreateNamedQuery",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Database" => Database,
                    "Name" => Name,
                    "QueryString" => QueryString,
                    "client_request_token" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_prepared_statement(query_statement, statement_name, work_group; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a prepared statement for use with SQL queries in Athena.

# Arguments
- `query_statement`: The query string for the prepared statement.
- `statement_name`: The name of the prepared statement.
- `work_group`: The name of the workgroup to which the prepared statement belongs.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"description"`: The description of the prepared statement.
"""
function create_prepared_statement(
    QueryStatement,
    StatementName,
    WorkGroup;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "CreatePreparedStatement",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "QueryStatement" => QueryStatement,
                    "StatementName" => StatementName,
                    "WorkGroup" => WorkGroup,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_work_group(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a workgroup with the specified name.

# Arguments
- `name`: The workgroup name.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"configuration"`: The configuration for the workgroup, which includes the location in
  Amazon S3 where query results are stored, the encryption configuration, if any, used for
  encrypting query results, whether the Amazon CloudWatch Metrics are enabled for the
  workgroup, the limit for the amount of bytes scanned (cutoff) per query, if it is
  specified, and whether workgroup's settings (specified with EnforceWorkGroupConfiguration)
  in the WorkGroupConfiguration override client-side settings. See
  WorkGroupConfigurationEnforceWorkGroupConfiguration.
- `"description"`: The workgroup description.
- `"tags"`: A list of comma separated tags to add to the workgroup that is created.
"""
function create_work_group(
    Name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "CreateWorkGroup",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("Name" => Name), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_data_catalog(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a data catalog.

# Arguments
- `name`: The name of the data catalog to delete.

"""
function delete_data_catalog(
    Name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "DeleteDataCatalog",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("Name" => Name), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_named_query(named_query_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the named query if you have access to the workgroup in which the query was saved.
For code samples using the Amazon Web Services SDK for Java, see Examples and Code Samples
in the Amazon Athena User Guide.

# Arguments
- `named_query_id`: The unique ID of the query to delete.

"""
function delete_named_query(
    NamedQueryId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "DeleteNamedQuery",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("NamedQueryId" => NamedQueryId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_prepared_statement(statement_name, work_group; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the prepared statement with the specified name from the specified workgroup.

# Arguments
- `statement_name`: The name of the prepared statement to delete.
- `work_group`: The workgroup to which the statement to be deleted belongs.

"""
function delete_prepared_statement(
    StatementName, WorkGroup; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "DeletePreparedStatement",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "StatementName" => StatementName, "WorkGroup" => WorkGroup
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_work_group(work_group; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the workgroup with the specified name. The primary workgroup cannot be deleted.

# Arguments
- `work_group`: The unique name of the workgroup to delete.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"recursive_delete_option"`: The option to delete the workgroup and its contents even if
  the workgroup contains any named queries or query executions.
"""
function delete_work_group(
    WorkGroup; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "DeleteWorkGroup",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("WorkGroup" => WorkGroup), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_data_catalog(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns the specified data catalog.

# Arguments
- `name`: The name of the data catalog to return.

"""
function get_data_catalog(
    Name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "GetDataCatalog",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("Name" => Name), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_database(catalog_name, database_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a database object for the specified database and data catalog.

# Arguments
- `catalog_name`: The name of the data catalog that contains the database to return.
- `database_name`: The name of the database to return.

"""
function get_database(
    CatalogName, DatabaseName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "GetDatabase",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "CatalogName" => CatalogName, "DatabaseName" => DatabaseName
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_named_query(named_query_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about a single query. Requires that you have access to the workgroup in
which the query was saved.

# Arguments
- `named_query_id`: The unique ID of the query. Use ListNamedQueries to get query IDs.

"""
function get_named_query(
    NamedQueryId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "GetNamedQuery",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("NamedQueryId" => NamedQueryId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_prepared_statement(statement_name, work_group; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves the prepared statement with the specified name from the specified workgroup.

# Arguments
- `statement_name`: The name of the prepared statement to retrieve.
- `work_group`: The workgroup to which the statement to be retrieved belongs.

"""
function get_prepared_statement(
    StatementName, WorkGroup; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "GetPreparedStatement",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "StatementName" => StatementName, "WorkGroup" => WorkGroup
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_query_execution(query_execution_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about a single execution of a query if you have access to the workgroup
in which the query ran. Each time a query executes, information about the query execution
is saved with a unique ID.

# Arguments
- `query_execution_id`: The unique ID of the query execution.

"""
function get_query_execution(
    QueryExecutionId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "GetQueryExecution",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("QueryExecutionId" => QueryExecutionId), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_query_results(query_execution_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Streams the results of a single query execution specified by QueryExecutionId from the
Athena query results location in Amazon S3. For more information, see Query Results in the
Amazon Athena User Guide. This request does not execute the query but returns results. Use
StartQueryExecution to run a query. To stream query results successfully, the IAM principal
with permission to call GetQueryResults also must have permissions to the Amazon S3
GetObject action for the Athena query results location.  IAM principals with permission to
the Amazon S3 GetObject action for the query results location are able to retrieve query
results from Amazon S3 even if permission to the GetQueryResults action is denied. To
restrict user or role access, ensure that Amazon S3 permissions to the Athena query
location are denied.

# Arguments
- `query_execution_id`: The unique ID of the query execution.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`: The maximum number of results (rows) to return in this request.
- `"next_token"`: A token generated by the Athena service that specifies where to continue
  pagination if a previous request was truncated. To obtain the next set of pages, pass in
  the NextToken from the response object of the previous page call.
"""
function get_query_results(
    QueryExecutionId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "GetQueryResults",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("QueryExecutionId" => QueryExecutionId), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_table_metadata(catalog_name, database_name, table_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns table metadata for the specified catalog, database, and table.

# Arguments
- `catalog_name`: The name of the data catalog that contains the database and table
  metadata to return.
- `database_name`: The name of the database that contains the table metadata to return.
- `table_name`: The name of the table for which metadata is returned.

"""
function get_table_metadata(
    CatalogName,
    DatabaseName,
    TableName;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "GetTableMetadata",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "CatalogName" => CatalogName,
                    "DatabaseName" => DatabaseName,
                    "TableName" => TableName,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_work_group(work_group; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about the workgroup with the specified name.

# Arguments
- `work_group`: The name of the workgroup.

"""
function get_work_group(
    WorkGroup; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "GetWorkGroup",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("WorkGroup" => WorkGroup), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_data_catalogs(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the data catalogs in the current Amazon Web Services account.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`: Specifies the maximum number of data catalogs to return.
- `"next_token"`: A token generated by the Athena service that specifies where to continue
  pagination if a previous request was truncated. To obtain the next set of pages, pass in
  the NextToken from the response object of the previous page call.
"""
function list_data_catalogs(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "ListDataCatalogs", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_databases(catalog_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the databases in the specified data catalog.

# Arguments
- `catalog_name`: The name of the data catalog that contains the databases to return.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`: Specifies the maximum number of results to return.
- `"next_token"`: A token generated by the Athena service that specifies where to continue
  pagination if a previous request was truncated. To obtain the next set of pages, pass in
  the NextToken from the response object of the previous page call.
"""
function list_databases(
    CatalogName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "ListDatabases",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("CatalogName" => CatalogName), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_engine_versions(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of engine versions that are available to choose from, including the Auto
option.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`: The maximum number of engine versions to return in this request.
- `"next_token"`: A token generated by the Athena service that specifies where to continue
  pagination if a previous request was truncated. To obtain the next set of pages, pass in
  the NextToken from the response object of the previous page call.
"""
function list_engine_versions(;
    aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "ListEngineVersions", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_named_queries(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Provides a list of available query IDs only for queries saved in the specified workgroup.
Requires that you have access to the specified workgroup. If a workgroup is not specified,
lists the saved queries for the primary workgroup. For code samples using the Amazon Web
Services SDK for Java, see Examples and Code Samples in the Amazon Athena User Guide.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`: The maximum number of queries to return in this request.
- `"next_token"`: A token generated by the Athena service that specifies where to continue
  pagination if a previous request was truncated. To obtain the next set of pages, pass in
  the NextToken from the response object of the previous page call.
- `"work_group"`: The name of the workgroup from which the named queries are being
  returned. If a workgroup is not specified, the saved queries for the primary workgroup are
  returned.
"""
function list_named_queries(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "ListNamedQueries", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_prepared_statements(work_group; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the prepared statements in the specfied workgroup.

# Arguments
- `work_group`: The workgroup to list the prepared statements for.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`: The maximum number of results to return in this request.
- `"next_token"`: A token generated by the Athena service that specifies where to continue
  pagination if a previous request was truncated. To obtain the next set of pages, pass in
  the NextToken from the response object of the previous page call.
"""
function list_prepared_statements(
    WorkGroup; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "ListPreparedStatements",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("WorkGroup" => WorkGroup), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_query_executions(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Provides a list of available query execution IDs for the queries in the specified
workgroup. If a workgroup is not specified, returns a list of query execution IDs for the
primary workgroup. Requires you to have access to the workgroup in which the queries ran.
For code samples using the Amazon Web Services SDK for Java, see Examples and Code Samples
in the Amazon Athena User Guide.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`: The maximum number of query executions to return in this request.
- `"next_token"`: A token generated by the Athena service that specifies where to continue
  pagination if a previous request was truncated. To obtain the next set of pages, pass in
  the NextToken from the response object of the previous page call.
- `"work_group"`: The name of the workgroup from which queries are being returned. If a
  workgroup is not specified, a list of available query execution IDs for the queries in the
  primary workgroup is returned.
"""
function list_query_executions(;
    aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "ListQueryExecutions",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_table_metadata(catalog_name, database_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the metadata for the tables in the specified data catalog database.

# Arguments
- `catalog_name`: The name of the data catalog for which table metadata should be returned.
- `database_name`: The name of the database for which table metadata should be returned.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"expression"`: A regex filter that pattern-matches table names. If no expression is
  supplied, metadata for all tables are listed.
- `"max_results"`: Specifies the maximum number of results to return.
- `"next_token"`: A token generated by the Athena service that specifies where to continue
  pagination if a previous request was truncated. To obtain the next set of pages, pass in
  the NextToken from the response object of the previous page call.
"""
function list_table_metadata(
    CatalogName, DatabaseName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "ListTableMetadata",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "CatalogName" => CatalogName, "DatabaseName" => DatabaseName
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_tags_for_resource(resource_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the tags associated with an Athena workgroup or data catalog resource.

# Arguments
- `resource_arn`: Lists the tags for the resource with the specified ARN.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`: The maximum number of results to be returned per request that lists the
  tags for the resource.
- `"next_token"`: The token for the next set of results, or null if there are no additional
  results for this request, where the request lists the tags for the resource with the
  specified ARN.
"""
function list_tags_for_resource(
    ResourceARN; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "ListTagsForResource",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("ResourceARN" => ResourceARN), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_work_groups(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists available workgroups for the account.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`: The maximum number of workgroups to return in this request.
- `"next_token"`: A token generated by the Athena service that specifies where to continue
  pagination if a previous request was truncated. To obtain the next set of pages, pass in
  the NextToken from the response object of the previous page call.
"""
function list_work_groups(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "ListWorkGroups", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    start_query_execution(query_string; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Runs the SQL query statements contained in the Query. Requires you to have access to the
workgroup in which the query ran. Running queries against an external catalog requires
GetDataCatalog permission to the catalog. For code samples using the Amazon Web Services
SDK for Java, see Examples and Code Samples in the Amazon Athena User Guide.

# Arguments
- `query_string`: The SQL query statements to be executed.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"client_request_token"`: A unique case-sensitive string used to ensure the request to
  create the query is idempotent (executes only once). If another StartQueryExecution request
  is received, the same response is returned and another query is not created. If a parameter
  has changed, for example, the QueryString, an error is returned.  This token is listed as
  not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for
  Java) auto-generate the token for users. If you are not using the Amazon Web Services SDK
  or the Amazon Web Services CLI, you must provide this token or the action will fail.
- `"query_execution_context"`: The database within which the query executes.
- `"result_configuration"`: Specifies information about where and how to save the results
  of the query execution. If the query runs in a workgroup, then workgroup's settings may
  override query settings. This affects the query results location. The workgroup settings
  override is specified in EnforceWorkGroupConfiguration (true/false) in the
  WorkGroupConfiguration. See WorkGroupConfigurationEnforceWorkGroupConfiguration.
- `"work_group"`: The name of the workgroup in which the query is being started.
"""
function start_query_execution(
    QueryString; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "StartQueryExecution",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "QueryString" => QueryString, "client_request_token" => string(uuid4())
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    stop_query_execution(query_execution_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Stops a query execution. Requires you to have access to the workgroup in which the query
ran. For code samples using the Amazon Web Services SDK for Java, see Examples and Code
Samples in the Amazon Athena User Guide.

# Arguments
- `query_execution_id`: The unique ID of the query execution to stop.

"""
function stop_query_execution(
    QueryExecutionId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "StopQueryExecution",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("QueryExecutionId" => QueryExecutionId), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    tag_resource(resource_arn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds one or more tags to an Athena resource. A tag is a label that you assign to a
resource. In Athena, a resource can be a workgroup or data catalog. Each tag consists of a
key and an optional value, both of which you define. For example, you can use tags to
categorize Athena workgroups or data catalogs by purpose, owner, or environment. Use a
consistent set of tag keys to make it easier to search and filter workgroups or data
catalogs in your account. For best practices, see Tagging Best Practices. Tag keys can be
from 1 to 128 UTF-8 Unicode characters, and tag values can be from 0 to 256 UTF-8 Unicode
characters. Tags can use letters and numbers representable in UTF-8, and the following
characters: + - = . _ : / @. Tag keys and values are case-sensitive. Tag keys must be
unique per resource. If you specify more than one tag, separate them by commas.

# Arguments
- `resource_arn`: Specifies the ARN of the Athena resource (workgroup or data catalog) to
  which tags are to be added.
- `tags`: A collection of one or more tags, separated by commas, to be added to an Athena
  workgroup or data catalog resource.

"""
function tag_resource(
    ResourceARN, Tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "TagResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("ResourceARN" => ResourceARN, "Tags" => Tags),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    untag_resource(resource_arn, tag_keys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes one or more tags from a data catalog or workgroup resource.

# Arguments
- `resource_arn`: Specifies the ARN of the resource from which tags are to be removed.
- `tag_keys`: A comma-separated list of one or more tag keys whose tags are to be removed
  from the specified resource.

"""
function untag_resource(
    ResourceARN, TagKeys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "UntagResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("ResourceARN" => ResourceARN, "TagKeys" => TagKeys),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_data_catalog(name, type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the data catalog that has the specified name.

# Arguments
- `name`: The name of the data catalog to update. The catalog name must be unique for the
  Amazon Web Services account and can use a maximum of 128 alphanumeric, underscore, at sign,
  or hyphen characters.
- `type`: Specifies the type of data catalog to update. Specify LAMBDA for a federated
  catalog, HIVE for an external hive metastore, or GLUE for an Glue Data Catalog.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"description"`: New or modified text that describes the data catalog.
- `"parameters"`: Specifies the Lambda function or functions to use for updating the data
  catalog. This is a mapping whose values depend on the catalog type.    For the HIVE data
  catalog type, use the following syntax. The metadata-function parameter is required. The
  sdk-version parameter is optional and defaults to the currently supported version.
  metadata-function=lambda_arn, sdk-version=version_number     For the LAMBDA data catalog
  type, use one of the following sets of required parameters, but not both.   If you have one
  Lambda function that processes metadata and another for reading the actual data, use the
  following syntax. Both parameters are required.  metadata-function=lambda_arn,
  record-function=lambda_arn      If you have a composite Lambda function that processes both
  metadata and data, use the following syntax to specify your Lambda function.
  function=lambda_arn
"""
function update_data_catalog(
    Name, Type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "UpdateDataCatalog",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("Name" => Name, "Type" => Type), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_prepared_statement(query_statement, statement_name, work_group; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates a prepared statement.

# Arguments
- `query_statement`: The query string for the prepared statement.
- `statement_name`: The name of the prepared statement.
- `work_group`: The workgroup for the prepared statement.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"description"`: The description of the prepared statement.
"""
function update_prepared_statement(
    QueryStatement,
    StatementName,
    WorkGroup;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "UpdatePreparedStatement",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "QueryStatement" => QueryStatement,
                    "StatementName" => StatementName,
                    "WorkGroup" => WorkGroup,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_work_group(work_group; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the workgroup with the specified name. The workgroup's name cannot be changed.

# Arguments
- `work_group`: The specified workgroup that will be updated.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"configuration_updates"`: The workgroup configuration that will be updated for the given
  workgroup.
- `"description"`: The workgroup description.
- `"state"`: The workgroup state that will be updated for the given workgroup.
"""
function update_work_group(
    WorkGroup; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return athena(
        "UpdateWorkGroup",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("WorkGroup" => WorkGroup), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
