# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: outposts
using AWS.Compat
using AWS.UUIDs

# Julia syntax for service-level optional parameters to the AWS request syntax
const SERVICE_PARAMETER_MAP = OrderedCollections.LittleDict("availability_zone_filter" => "AvailabilityZoneFilter", "availability_zone_id_filter" => "AvailabilityZoneIdFilter", "life_cycle_status_filter" => "LifeCycleStatusFilter", "max_results" => "MaxResults", "next_token" => "NextToken", "availability_zone" => "AvailabilityZone", "availability_zone_id" => "AvailabilityZoneId", "description" => "Description", "tags" => "Tags", "payment_term" => "PaymentTerm")

"""
    create_order(line_items, outpost_identifier, payment_option; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an order for an Outpost.

# Arguments
- `line_items`: The line items that make up the order.
- `outpost_identifier`:  The ID or the Amazon Resource Name (ARN) of the Outpost.
- `payment_option`: The payment option for the order.

# Keyword Parameters
- `payment_term`: The payment terms for the order.
"""
function create_order(LineItems, OutpostIdentifier, PaymentOption; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return outposts("POST", "/orders", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("LineItems"=>LineItems, "OutpostIdentifier"=>OutpostIdentifier, "PaymentOption"=>PaymentOption), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_outpost(name, site_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an Outpost. You can specify AvailabilityZone or AvailabilityZoneId.

# Arguments
- `name`:
- `site_id`:

# Keyword Parameters
- `availability_zone`:
- `availability_zone_id`:
- `description`:
- `tags`: The tags to apply to the Outpost.
"""
function create_outpost(Name, SiteId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return outposts("POST", "/outposts", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Name"=>Name, "SiteId"=>SiteId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_outpost(outpost_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the Outpost.

# Arguments
- `outpost_id`:  The ID of the Outpost.

"""
function delete_outpost(OutpostId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return outposts("DELETE", "/outposts/$(OutpostId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_site(site_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the site.

# Arguments
- `site_id`:

"""
function delete_site(SiteId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return outposts("DELETE", "/sites/$(SiteId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_outpost(outpost_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about the specified Outpost.

# Arguments
- `outpost_id`:  The ID of the Outpost.

"""
function get_outpost(OutpostId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return outposts("GET", "/outposts/$(OutpostId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_outpost_instance_types(outpost_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the instance types for the specified Outpost.

# Arguments
- `outpost_id`:  The ID of the Outpost.

# Keyword Parameters
- `max_results`:
- `next_token`:
"""
function get_outpost_instance_types(OutpostId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return outposts("GET", "/outposts/$(OutpostId)/instanceTypes", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_outposts(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Create a list of the Outposts for your AWS account. Add filters to your request to return a
more specific list of results. Use filters to match an Outpost lifecycle status,
Availibility Zone (us-east-1a), and AZ ID (use1-az1).  If you specify multiple filters, the
filters are joined with an AND, and the request returns only results that match all of the
specified filters.

# Keyword Parameters
- `availability_zone_filter`:  A filter for the Availibility Zone (us-east-1a) of the
  Outpost.   Filter values are case sensitive. If you specify multiple values for a filter,
  the values are joined with an OR, and the request returns all results that match any of the
  specified values.
- `availability_zone_id_filter`:  A filter for the AZ IDs (use1-az1) of the Outpost.
  Filter values are case sensitive. If you specify multiple values for a filter, the values
  are joined with an OR, and the request returns all results that match any of the specified
  values.
- `life_cycle_status_filter`:  A filter for the lifecycle status of the Outpost.   Filter
  values are case sensitive. If you specify multiple values for a filter, the values are
  joined with an OR, and the request returns all results that match any of the specified
  values.
- `max_results`:
- `next_token`:
"""
function list_outposts(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return outposts("GET", "/outposts", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_sites(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the sites for the specified AWS account.

# Keyword Parameters
- `max_results`:
- `next_token`:
"""
function list_sites(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return outposts("GET", "/sites", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_tags_for_resource(resource_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the tags for the specified resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource.

"""
function list_tags_for_resource(ResourceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return outposts("GET", "/tags/$(ResourceArn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    tag_resource(resource_arn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds tags to the specified resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource.
- `tags`: The tags to add to the resource.

"""
function tag_resource(ResourceArn, Tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return outposts("POST", "/tags/$(ResourceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Tags"=>Tags), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    untag_resource(resource_arn, tag_keys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes tags from the specified resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource.
- `tag_keys`: The tag keys.

"""
function untag_resource(ResourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return outposts("DELETE", "/tags/$(ResourceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tagKeys"=>tagKeys), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
