# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: resiliencehub
using AWS.Compat
using AWS.UUIDs

# Julia syntax for service-level optional parameters to the AWS request syntax
const SERVICE_PARAMETER_MAP = OrderedCollections.LittleDict("max_results" => "maxResults", "next_token" => "nextToken", "resolution_id" => "resolutionId", "client_token" => "clientToken", "data_location_constraint" => "dataLocationConstraint", "policy_description" => "policyDescription", "tags" => "tags", "app_arn" => "appArn", "assessment_name" => "assessmentName", "assessment_status" => "assessmentStatus", "compliance_status" => "complianceStatus", "invoker" => "invoker", "reverse_order" => "reverseOrder", "force_delete" => "forceDelete", "name" => "name", "recommendation_template_arn" => "recommendationTemplateArn", "status" => "status", "policy" => "policy", "policy_name" => "policyName", "tier" => "tier", "app_registry_app_names" => "appRegistryAppNames", "logical_stack_names" => "logicalStackNames", "resource_group_names" => "resourceGroupNames", "resource_names" => "resourceNames", "clear_resiliency_policy_arn" => "clearResiliencyPolicyArn", "description" => "description", "policy_arn" => "policyArn", "bucket_name" => "bucketName", "format" => "format", "recommendation_ids" => "recommendationIds", "recommendation_types" => "recommendationTypes")

"""
    add_draft_app_version_resource_mappings(app_arn, resource_mappings; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds the resource mapping for the draft application version.

# Arguments
- `app_arn`: The Amazon Resource Name (ARN) of the application. The format for this ARN is:
  arn:partition:dcps:region:account:app/app-id. For more information about ARNs, see  Amazon
  Resource Names (ARNs) in the AWS General Reference.
- `resource_mappings`:  Mappings used to map logical resources from the template to
  physical resources. You can use the mapping type CFN_STACK if the application template uses
  a logical stack name. Or you can map individual resources by using the mapping type
  RESOURCE. We recommend using the mapping type CFN_STACK if the application is backed by a
  CloudFormation stack.

"""
function add_draft_app_version_resource_mappings(appArn, resourceMappings; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/add-draft-app-version-resource-mappings", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("appArn"=>appArn, "resourceMappings"=>resourceMappings), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_app(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a Resilience Hub application. A Resilience Hub application is a collection of
Amazon Web Services resources structured to prevent and recover Amazon Web Services
application disruptions. To describe a Resilience Hub application, you provide an
application name, resources from one or more–up to five–CloudFormation stacks, and an
appropriate resiliency policy.  &lt;p&gt;After you create a Resilience Hub application, you
publish it so that you can run a resiliency assessment on it. You can then use
recommendations from the assessment to improve resiliency by running another assessment,
comparing results, and then iterating the process until you achieve your goals for recovery
time objective (RTO) and recovery point objective (RPO).&lt;/p&gt;

# Arguments
- `name`: The name for the application.

# Keyword Parameters
- `client_token`: Used for an idempotency token. A client token is a unique, case-sensitive
  string of up to 64 ASCII characters. You should not reuse the same client token for other
  API requests.
- `description`: The optional description for an app.
- `policy_arn`: The Amazon Resource Name (ARN) of the resiliency policy. The format for
  this ARN is: arn:partition:dcps:region:account:resiliency-policy/policy-id. For more
  information about ARNs, see  Amazon Resource Names (ARNs) in the AWS General Reference.
- `tags`: The tags assigned to the resource. A tag is a label that you assign to an Amazon
  Web Services resource. Each tag consists of a key/value pair.
"""
function create_app(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/create-app", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("name"=>name, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_recommendation_template(assessment_arn, name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a new recommendation template.

# Arguments
- `assessment_arn`: The Amazon Resource Name (ARN) of the assessment. The format for this
  ARN is: arn:partition:dcps:region:account:app-assessment/app-id. For more information about
  ARNs, see  Amazon Resource Names (ARNs) in the AWS General Reference.
- `name`: The name for the recommendation template.

# Keyword Parameters
- `bucket_name`: The name of the Amazon S3 bucket that will contain the recommendation
  template.
- `client_token`: Used for an idempotency token. A client token is a unique, case-sensitive
  string of up to 64 ASCII characters. You should not reuse the same client token for other
  API requests.
- `format`: The format for the recommendation template.  CfnJson  The template is
  CloudFormation JSON.  CfnYaml  The template is CloudFormation YAML.
- `recommendation_ids`: Identifiers for the recommendations used to create a recommendation
  template.
- `recommendation_types`: An array of strings that specify the recommendation template type
  or types.  Alarm  The template is an AlarmRecommendation template.  Sop  The template is a
  SopRecommendation template.  Test  The template is a TestRecommendation template.
- `tags`: The tags assigned to the resource. A tag is a label that you assign to an Amazon
  Web Services resource. Each tag consists of a key/value pair.
"""
function create_recommendation_template(assessmentArn, name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/create-recommendation-template", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("assessmentArn"=>assessmentArn, "name"=>name, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_resiliency_policy(policy, policy_name, tier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a resiliency policy for an application.

# Arguments
- `policy`: The type of resiliency policy to be created, including the recovery time
  objective (RTO) and recovery point objective (RPO) in seconds.
- `policy_name`: The name of the policy
- `tier`: The tier for this resiliency policy, ranging from the highest severity
  (MissionCritical) to lowest (NonCritical).

# Keyword Parameters
- `client_token`: Used for an idempotency token. A client token is a unique, case-sensitive
  string of up to 64 ASCII characters. You should not reuse the same client token for other
  API requests.
- `data_location_constraint`: Specifies a high-level geographical location constraint for
  where your resilience policy data can be stored.
- `policy_description`: The description for the policy.
- `tags`: The tags assigned to the resource. A tag is a label that you assign to an Amazon
  Web Services resource. Each tag consists of a key/value pair.
"""
function create_resiliency_policy(policy, policyName, tier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/create-resiliency-policy", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("policy"=>policy, "policyName"=>policyName, "tier"=>tier, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_app(app_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes an AWS Resilience Hub application. This is a destructive action that can't be
undone.

# Arguments
- `app_arn`: The Amazon Resource Name (ARN) of the application. The format for this ARN is:
  arn:partition:dcps:region:account:app/app-id. For more information about ARNs, see  Amazon
  Resource Names (ARNs) in the AWS General Reference.

# Keyword Parameters
- `client_token`: Used for an idempotency token. A client token is a unique, case-sensitive
  string of up to 64 ASCII characters. You should not reuse the same client token for other
  API requests.
- `force_delete`: A boolean option to force the deletion of a Resilience Hub application.
"""
function delete_app(appArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/delete-app", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("appArn"=>appArn, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_app_assessment(assessment_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes an AWS Resilience Hub application assessment. This is a destructive action that
can't be undone.

# Arguments
- `assessment_arn`: The Amazon Resource Name (ARN) of the assessment. The format for this
  ARN is: arn:partition:dcps:region:account:app-assessment/app-id. For more information about
  ARNs, see  Amazon Resource Names (ARNs) in the AWS General Reference.

# Keyword Parameters
- `client_token`: Used for an idempotency token. A client token is a unique, case-sensitive
  string of up to 64 ASCII characters. You should not reuse the same client token for other
  API requests.
"""
function delete_app_assessment(assessmentArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/delete-app-assessment", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("assessmentArn"=>assessmentArn, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_recommendation_template(recommendation_template_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a recommendation template. This is a destructive action that can't be undone.

# Arguments
- `recommendation_template_arn`: The Amazon Resource Name (ARN) for a recommendation
  template.

# Keyword Parameters
- `client_token`: Used for an idempotency token. A client token is a unique, case-sensitive
  string of up to 64 ASCII characters. You should not reuse the same client token for other
  API requests.
"""
function delete_recommendation_template(recommendationTemplateArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/delete-recommendation-template", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("recommendationTemplateArn"=>recommendationTemplateArn, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_resiliency_policy(policy_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a resiliency policy. This is a destructive action that can't be undone.

# Arguments
- `policy_arn`: The Amazon Resource Name (ARN) of the resiliency policy. The format for
  this ARN is: arn:partition:dcps:region:account:resiliency-policy/policy-id. For more
  information about ARNs, see  Amazon Resource Names (ARNs) in the AWS General Reference.

# Keyword Parameters
- `client_token`: Used for an idempotency token. A client token is a unique, case-sensitive
  string of up to 64 ASCII characters. You should not reuse the same client token for other
  API requests.
"""
function delete_resiliency_policy(policyArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/delete-resiliency-policy", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("policyArn"=>policyArn, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_app(app_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Describes an AWS Resilience Hub application.

# Arguments
- `app_arn`: The Amazon Resource Name (ARN) of the application. The format for this ARN is:
  arn:partition:dcps:region:account:app/app-id. For more information about ARNs, see  Amazon
  Resource Names (ARNs) in the AWS General Reference.

"""
function describe_app(appArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/describe-app", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("appArn"=>appArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_app_assessment(assessment_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Describes an assessment for an AWS Resilience Hub application.

# Arguments
- `assessment_arn`: The Amazon Resource Name (ARN) of the assessment. The format for this
  ARN is: arn:partition:dcps:region:account:app-assessment/app-id. For more information about
  ARNs, see  Amazon Resource Names (ARNs) in the AWS General Reference.

"""
function describe_app_assessment(assessmentArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/describe-app-assessment", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("assessmentArn"=>assessmentArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_app_version_resources_resolution_status(app_arn, app_version; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns the resolution status for the specified resolution identifier for an application
version. If resolutionId is not specified, the current resolution status is returned.

# Arguments
- `app_arn`: The Amazon Resource Name (ARN) of the application. The format for this ARN is:
  arn:partition:dcps:region:account:app/app-id. For more information about ARNs, see  Amazon
  Resource Names (ARNs) in the AWS General Reference.
- `app_version`: The version of the application.

# Keyword Parameters
- `resolution_id`: The identifier for a specific resolution.
"""
function describe_app_version_resources_resolution_status(appArn, appVersion; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/describe-app-version-resources-resolution-status", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("appArn"=>appArn, "appVersion"=>appVersion), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_app_version_template(app_arn, app_version; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Describes details about an AWS Resilience Hub

# Arguments
- `app_arn`: The Amazon Resource Name (ARN) of the application. The format for this ARN is:
  arn:partition:dcps:region:account:app/app-id. For more information about ARNs, see  Amazon
  Resource Names (ARNs) in the AWS General Reference.
- `app_version`: The version of the application.

"""
function describe_app_version_template(appArn, appVersion; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/describe-app-version-template", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("appArn"=>appArn, "appVersion"=>appVersion), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_draft_app_version_resources_import_status(app_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Describes the status of importing resources to an application version.

# Arguments
- `app_arn`: The Amazon Resource Name (ARN) of the application. The format for this ARN is:
  arn:partition:dcps:region:account:app/app-id. For more information about ARNs, see  Amazon
  Resource Names (ARNs) in the AWS General Reference.

"""
function describe_draft_app_version_resources_import_status(appArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/describe-draft-app-version-resources-import-status", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("appArn"=>appArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_resiliency_policy(policy_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Describes a specified resiliency policy for an AWS Resilience Hub application. The returned
policy object includes creation time, data location constraints, the Amazon Resource Name
(ARN) for the policy, tags, tier, and more.

# Arguments
- `policy_arn`: The Amazon Resource Name (ARN) of the resiliency policy. The format for
  this ARN is: arn:partition:dcps:region:account:resiliency-policy/policy-id. For more
  information about ARNs, see  Amazon Resource Names (ARNs) in the AWS General Reference.

"""
function describe_resiliency_policy(policyArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/describe-resiliency-policy", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("policyArn"=>policyArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    import_resources_to_draft_app_version(app_arn, source_arns; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Imports resources from sources such as a CloudFormation stack, resource-groups, or
application registry app to a draft application version.

# Arguments
- `app_arn`: The Amazon Resource Name (ARN) of the application. The format for this ARN is:
  arn:partition:dcps:region:account:app/app-id. For more information about ARNs, see  Amazon
  Resource Names (ARNs) in the AWS General Reference.
- `source_arns`: The Amazon Resource Names (ARNs) for the resources that you want to import.

"""
function import_resources_to_draft_app_version(appArn, sourceArns; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/import-resources-to-draft-app-version", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("appArn"=>appArn, "sourceArns"=>sourceArns), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_alarm_recommendations(assessment_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the alarm recommendations for a AWS Resilience Hub application.

# Arguments
- `assessment_arn`: The Amazon Resource Name (ARN) of the assessment. The format for this
  ARN is: arn:partition:dcps:region:account:app-assessment/app-id. For more information about
  ARNs, see  Amazon Resource Names (ARNs) in the AWS General Reference.

# Keyword Parameters
- `max_results`: The maximum number of results to include in the response. If more results
  exist than the specified MaxResults value, a token is included in the response so that the
  remaining results can be retrieved.
- `next_token`: Null, or the token from a previous call to get the next set of results.
"""
function list_alarm_recommendations(assessmentArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/list-alarm-recommendations", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("assessmentArn"=>assessmentArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_app_assessments(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the assessments for an AWS Resilience Hub application. You can use request parameters
to refine the results for the response object.

# Keyword Parameters
- `app_arn`: The Amazon Resource Name (ARN) of the application. The format for this ARN is:
  arn:partition:dcps:region:account:app/app-id. For more information about ARNs, see  Amazon
  Resource Names (ARNs) in the AWS General Reference.
- `assessment_name`: The name for the assessment.
- `assessment_status`: The current status of the assessment for the resiliency policy.
- `compliance_status`: The current status of compliance for the resiliency policy.
- `invoker`: Specifies the entity that invoked a specific assessment, either a User or the
  System.
- `max_results`: The maximum number of results to include in the response. If more results
  exist than the specified MaxResults value, a token is included in the response so that the
  remaining results can be retrieved.
- `next_token`: Null, or the token from a previous call to get the next set of results.
- `reverse_order`: The default is to sort by ascending startTime. To sort by descending
  startTime, set reverseOrder to true.
"""
function list_app_assessments(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("GET", "/list-app-assessments", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_app_component_compliances(assessment_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the compliances for an AWS Resilience Hub component.

# Arguments
- `assessment_arn`: The Amazon Resource Name (ARN) of the assessment. The format for this
  ARN is: arn:partition:dcps:region:account:app-assessment/app-id. For more information about
  ARNs, see  Amazon Resource Names (ARNs) in the AWS General Reference.

# Keyword Parameters
- `max_results`: The maximum number of results to include in the response. If more results
  exist than the specified MaxResults value, a token is included in the response so that the
  remaining results can be retrieved.
- `next_token`: Null, or the token from a previous call to get the next set of results.
"""
function list_app_component_compliances(assessmentArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/list-app-component-compliances", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("assessmentArn"=>assessmentArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_app_component_recommendations(assessment_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the recommendations for an AWS Resilience Hub component.

# Arguments
- `assessment_arn`: The Amazon Resource Name (ARN) of the assessment. The format for this
  ARN is: arn:partition:dcps:region:account:app-assessment/app-id. For more information about
  ARNs, see  Amazon Resource Names (ARNs) in the AWS General Reference.

# Keyword Parameters
- `max_results`: The maximum number of results to include in the response. If more results
  exist than the specified MaxResults value, a token is included in the response so that the
  remaining results can be retrieved.
- `next_token`: Null, or the token from a previous call to get the next set of results.
"""
function list_app_component_recommendations(assessmentArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/list-app-component-recommendations", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("assessmentArn"=>assessmentArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_app_version_resource_mappings(app_arn, app_version; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists how the resources in an application version are mapped/sourced from. Mappings can be
physical resource identifiers, CloudFormation stacks, resource-groups, or an application
registry app.

# Arguments
- `app_arn`: The Amazon Resource Name (ARN) of the application. The format for this ARN is:
  arn:partition:dcps:region:account:app/app-id. For more information about ARNs, see  Amazon
  Resource Names (ARNs) in the AWS General Reference.
- `app_version`: The version of the application.

# Keyword Parameters
- `max_results`: The maximum number of results to include in the response. If more results
  exist than the specified MaxResults value, a token is included in the response so that the
  remaining results can be retrieved.
- `next_token`: Null, or the token from a previous call to get the next set of results.
"""
function list_app_version_resource_mappings(appArn, appVersion; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/list-app-version-resource-mappings", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("appArn"=>appArn, "appVersion"=>appVersion), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_app_version_resources(app_arn, app_version; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists all the resources in an application version.

# Arguments
- `app_arn`: The Amazon Resource Name (ARN) of the application. The format for this ARN is:
  arn:partition:dcps:region:account:app/app-id. For more information about ARNs, see  Amazon
  Resource Names (ARNs) in the AWS General Reference.
- `app_version`: The version of the application.

# Keyword Parameters
- `max_results`: The maximum number of results to include in the response. If more results
  exist than the specified MaxResults value, a token is included in the response so that the
  remaining results can be retrieved.
- `next_token`: Null, or the token from a previous call to get the next set of results.
- `resolution_id`: The identifier for a specific resolution.
"""
function list_app_version_resources(appArn, appVersion; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/list-app-version-resources", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("appArn"=>appArn, "appVersion"=>appVersion), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_app_versions(app_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the different versions for the Resilience Hub applications.

# Arguments
- `app_arn`: The Amazon Resource Name (ARN) of the application. The format for this ARN is:
  arn:partition:dcps:region:account:app/app-id. For more information about ARNs, see  Amazon
  Resource Names (ARNs) in the AWS General Reference.

# Keyword Parameters
- `max_results`: The maximum number of results to include in the response. If more results
  exist than the specified MaxResults value, a token is included in the response so that the
  remaining results can be retrieved.
- `next_token`: Null, or the token from a previous call to get the next set of results.
"""
function list_app_versions(appArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/list-app-versions", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("appArn"=>appArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_apps(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists your Resilience Hub applications.

# Keyword Parameters
- `app_arn`: The Amazon Resource Name (ARN) of the application. The format for this ARN is:
  arn:partition:dcps:region:account:app/app-id. For more information about ARNs, see  Amazon
  Resource Names (ARNs) in the AWS General Reference.
- `max_results`: The maximum number of results to include in the response. If more results
  exist than the specified MaxResults value, a token is included in the response so that the
  remaining results can be retrieved.
- `name`: The name for the one of the listed applications.
- `next_token`: Null, or the token from a previous call to get the next set of results.
"""
function list_apps(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("GET", "/list-apps", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_recommendation_templates(assessment_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the recommendation templates for the Resilience Hub applications.

# Arguments
- `assessment_arn`: The Amazon Resource Name (ARN) of the assessment. The format for this
  ARN is: arn:partition:dcps:region:account:app-assessment/app-id. For more information about
  ARNs, see  Amazon Resource Names (ARNs) in the AWS General Reference.

# Keyword Parameters
- `max_results`: The maximum number of results to include in the response. If more results
  exist than the specified MaxResults value, a token is included in the response so that the
  remaining results can be retrieved.
- `name`: The name for one of the listed recommendation templates.
- `next_token`: Null, or the token from a previous call to get the next set of results.
- `recommendation_template_arn`: The Amazon Resource Name (ARN) for a recommendation
  template.
- `reverse_order`: The default is to sort by ascending startTime. To sort by descending
  startTime, set reverseOrder to true.
- `status`: The status of the action.
"""
function list_recommendation_templates(assessmentArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("GET", "/list-recommendation-templates", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("assessmentArn"=>assessmentArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_resiliency_policies(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the resiliency policies for the Resilience Hub applications.

# Keyword Parameters
- `max_results`: The maximum number of results to include in the response. If more results
  exist than the specified MaxResults value, a token is included in the response so that the
  remaining results can be retrieved.
- `next_token`: Null, or the token from a previous call to get the next set of results.
- `policy_name`: The name of the policy
"""
function list_resiliency_policies(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("GET", "/list-resiliency-policies", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_sop_recommendations(assessment_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the standard operating procedure (SOP) recommendations for the Resilience Hub
applications.

# Arguments
- `assessment_arn`: The Amazon Resource Name (ARN) of the assessment. The format for this
  ARN is: arn:partition:dcps:region:account:app-assessment/app-id. For more information about
  ARNs, see  Amazon Resource Names (ARNs) in the AWS General Reference.

# Keyword Parameters
- `max_results`: The maximum number of results to include in the response. If more results
  exist than the specified MaxResults value, a token is included in the response so that the
  remaining results can be retrieved.
- `next_token`: Null, or the token from a previous call to get the next set of results.
"""
function list_sop_recommendations(assessmentArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/list-sop-recommendations", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("assessmentArn"=>assessmentArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_suggested_resiliency_policies(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the suggested resiliency policies for the Resilience Hub applications.

# Keyword Parameters
- `max_results`: The maximum number of results to include in the response. If more results
  exist than the specified MaxResults value, a token is included in the response so that the
  remaining results can be retrieved.
- `next_token`: Null, or the token from a previous call to get the next set of results.
"""
function list_suggested_resiliency_policies(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("GET", "/list-suggested-resiliency-policies", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_tags_for_resource(resource_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the tags for your resources in your Resilience Hub applications.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) for a specific resource in your Resilience
  Hub application.

"""
function list_tags_for_resource(resourceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("GET", "/tags/$(resourceArn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_test_recommendations(assessment_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the test recommendations for the Resilience Hub application.

# Arguments
- `assessment_arn`: The Amazon Resource Name (ARN) of the assessment. The format for this
  ARN is: arn:partition:dcps:region:account:app-assessment/app-id. For more information about
  ARNs, see  Amazon Resource Names (ARNs) in the AWS General Reference.

# Keyword Parameters
- `max_results`: The maximum number of results to include in the response. If more results
  exist than the specified MaxResults value, a token is included in the response so that the
  remaining results can be retrieved.
- `next_token`: Null, or the token from a previous call to get the next set of results.
"""
function list_test_recommendations(assessmentArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/list-test-recommendations", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("assessmentArn"=>assessmentArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_unsupported_app_version_resources(app_arn, app_version; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the resources that are not currently supported in AWS Resilience Hub. An unsupported
resource is a resource that exists in the object that was used to create an app, but is not
supported by Resilience Hub.

# Arguments
- `app_arn`: The Amazon Resource Name (ARN) of the application. The format for this ARN is:
  arn:partition:dcps:region:account:app/app-id. For more information about ARNs, see  Amazon
  Resource Names (ARNs) in the AWS General Reference.
- `app_version`: The version of the application.

# Keyword Parameters
- `max_results`: The maximum number of results to include in the response. If more results
  exist than the specified MaxResults value, a token is included in the response so that the
  remaining results can be retrieved.
- `next_token`: Null, or the token from a previous call to get the next set of results.
- `resolution_id`: The identifier for a specific resolution.
"""
function list_unsupported_app_version_resources(appArn, appVersion; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/list-unsupported-app-version-resources", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("appArn"=>appArn, "appVersion"=>appVersion), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    publish_app_version(app_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Publishes a new version of a specific Resilience Hub application.

# Arguments
- `app_arn`: The Amazon Resource Name (ARN) of the application. The format for this ARN is:
  arn:partition:dcps:region:account:app/app-id. For more information about ARNs, see  Amazon
  Resource Names (ARNs) in the AWS General Reference.

"""
function publish_app_version(appArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/publish-app-version", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("appArn"=>appArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    put_draft_app_version_template(app_arn, app_template_body; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds or updates the app template for a draft version of a Resilience Hub app.

# Arguments
- `app_arn`: The Amazon Resource Name (ARN) of the application. The format for this ARN is:
  arn:partition:dcps:region:account:app/app-id. For more information about ARNs, see  Amazon
  Resource Names (ARNs) in the AWS General Reference.
- `app_template_body`: A JSON string that contains the body of the app template.

"""
function put_draft_app_version_template(appArn, appTemplateBody; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/put-draft-app-version-template", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("appArn"=>appArn, "appTemplateBody"=>appTemplateBody), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    remove_draft_app_version_resource_mappings(app_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes resource mappings from a draft application version.

# Arguments
- `app_arn`: The Amazon Resource Name (ARN) of the application. The format for this ARN is:
  arn:partition:dcps:region:account:app/app-id. For more information about ARNs, see  Amazon
  Resource Names (ARNs) in the AWS General Reference.

# Keyword Parameters
- `app_registry_app_names`: The names of the registered applications to remove from the
  resource mappings.
- `logical_stack_names`: The names of the CloudFormation stacks to remove from the resource
  mappings.
- `resource_group_names`: The names of the resource groups to remove from the resource
  mappings.
- `resource_names`: The names of the resources to remove from the resource mappings.
"""
function remove_draft_app_version_resource_mappings(appArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/remove-draft-app-version-resource-mappings", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("appArn"=>appArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    resolve_app_version_resources(app_arn, app_version; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Resolves the resources for an application version.

# Arguments
- `app_arn`: The Amazon Resource Name (ARN) of the application. The format for this ARN is:
  arn:partition:dcps:region:account:app/app-id. For more information about ARNs, see  Amazon
  Resource Names (ARNs) in the AWS General Reference.
- `app_version`: The version of the application.

"""
function resolve_app_version_resources(appArn, appVersion; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/resolve-app-version-resources", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("appArn"=>appArn, "appVersion"=>appVersion), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    start_app_assessment(app_arn, app_version, assessment_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a new application assessment for an application.

# Arguments
- `app_arn`: The Amazon Resource Name (ARN) of the application. The format for this ARN is:
  arn:partition:dcps:region:account:app/app-id. For more information about ARNs, see  Amazon
  Resource Names (ARNs) in the AWS General Reference.
- `app_version`: The version of the application.
- `assessment_name`: The name for the assessment.

# Keyword Parameters
- `client_token`: Used for an idempotency token. A client token is a unique, case-sensitive
  string of up to 64 ASCII characters. You should not reuse the same client token for other
  API requests.
- `tags`: The tags assigned to the resource. A tag is a label that you assign to an Amazon
  Web Services resource. Each tag consists of a key/value pair.
"""
function start_app_assessment(appArn, appVersion, assessmentName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/start-app-assessment", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("appArn"=>appArn, "appVersion"=>appVersion, "assessmentName"=>assessmentName, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    tag_resource(resource_arn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Applies one or more tags to a resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource.
- `tags`: The tags to assign to the resource. Each tag consists of a key/value pair.

"""
function tag_resource(resourceArn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/tags/$(resourceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tags"=>tags), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    untag_resource(resource_arn, tag_keys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes one or more tags from a resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource.
- `tag_keys`: The keys of the tags to remove.

"""
function untag_resource(resourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("DELETE", "/tags/$(resourceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tagKeys"=>tagKeys), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_app(app_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates an application.

# Arguments
- `app_arn`: The Amazon Resource Name (ARN) of the application. The format for this ARN is:
  arn:partition:dcps:region:account:app/app-id. For more information about ARNs, see  Amazon
  Resource Names (ARNs) in the AWS General Reference.

# Keyword Parameters
- `clear_resiliency_policy_arn`: Specifies if the resiliency policy ARN should be cleared.
- `description`: The optional description for an app.
- `policy_arn`: The Amazon Resource Name (ARN) of the resiliency policy. The format for
  this ARN is: arn:partition:dcps:region:account:resiliency-policy/policy-id. For more
  information about ARNs, see  Amazon Resource Names (ARNs) in the AWS General Reference.
"""
function update_app(appArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/update-app", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("appArn"=>appArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_resiliency_policy(policy_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates a resiliency policy.

# Arguments
- `policy_arn`: The Amazon Resource Name (ARN) of the resiliency policy. The format for
  this ARN is: arn:partition:dcps:region:account:resiliency-policy/policy-id. For more
  information about ARNs, see  Amazon Resource Names (ARNs) in the AWS General Reference.

# Keyword Parameters
- `data_location_constraint`: Specifies a high-level geographical location constraint for
  where your resilience policy data can be stored.
- `policy`: The type of resiliency policy to be created, including the recovery time
  objective (RTO) and recovery point objective (RPO) in seconds.
- `policy_description`: The description for the policy.
- `policy_name`: The name of the policy
- `tier`: The tier for this resiliency policy, ranging from the highest severity
  (MissionCritical) to lowest (NonCritical).
"""
function update_resiliency_policy(policyArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return resiliencehub("POST", "/update-resiliency-policy", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("policyArn"=>policyArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
