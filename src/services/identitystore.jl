# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: identitystore
using AWS.Compat
using AWS.UUIDs

# Julia syntax for service-level optional parameters to the AWS request syntax
const SERVICE_PARAMETER_MAP = OrderedCollections.LittleDict("filters" => "Filters", "max_results" => "MaxResults", "next_token" => "NextToken")

"""
    describe_group(group_id, identity_store_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves the group metadata and attributes from GroupId in an identity store.

# Arguments
- `group_id`: The identifier for a group in the identity store.
- `identity_store_id`: The globally unique identifier for the identity store, such as
  d-1234567890. In this example, d- is a fixed prefix, and 1234567890 is a randomly generated
  string that contains number and lower case letters. This value is generated at the time
  that a new identity store is created.

"""
function describe_group(GroupId, IdentityStoreId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return identitystore("DescribeGroup", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("GroupId"=>GroupId, "IdentityStoreId"=>IdentityStoreId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_user(identity_store_id, user_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves the user metadata and attributes from UserId in an identity store.

# Arguments
- `identity_store_id`: The globally unique identifier for the identity store, such as
  d-1234567890. In this example, d- is a fixed prefix, and 1234567890 is a randomly generated
  string that contains number and lower case letters. This value is generated at the time
  that a new identity store is created.
- `user_id`: The identifier for a user in the identity store.

"""
function describe_user(IdentityStoreId, UserId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return identitystore("DescribeUser", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("IdentityStoreId"=>IdentityStoreId, "UserId"=>UserId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_groups(identity_store_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the attribute name and value of the group that you specified in the search. We only
support DisplayName as a valid filter attribute path currently, and filter is required.
This API returns minimum attributes, including GroupId and group DisplayName in the
response.

# Arguments
- `identity_store_id`: The globally unique identifier for the identity store, such as
  d-1234567890. In this example, d- is a fixed prefix, and 1234567890 is a randomly generated
  string that contains number and lower case letters. This value is generated at the time
  that a new identity store is created.

# Keyword Parameters
- `filters`: A list of Filter objects, which is used in the ListUsers and ListGroups
  request.
- `max_results`: The maximum number of results to be returned per request. This parameter
  is used in the ListUsers and ListGroups request to specify how many results to return in
  one page. The length limit is 50 characters.
- `next_token`: The pagination token used for the ListUsers and ListGroups API operations.
  This value is generated by the identity store service. It is returned in the API response
  if the total results are more than the size of one page. This token is also returned when
  it is used in the API request to search for the next page.
"""
function list_groups(IdentityStoreId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return identitystore("ListGroups", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("IdentityStoreId"=>IdentityStoreId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_users(identity_store_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the attribute name and value of the user that you specified in the search. We only
support UserName as a valid filter attribute path currently, and filter is required. This
API returns minimum attributes, including UserId and UserName in the response.

# Arguments
- `identity_store_id`: The globally unique identifier for the identity store, such as
  d-1234567890. In this example, d- is a fixed prefix, and 1234567890 is a randomly generated
  string that contains number and lower case letters. This value is generated at the time
  that a new identity store is created.

# Keyword Parameters
- `filters`: A list of Filter objects, which is used in the ListUsers and ListGroups
  request.
- `max_results`: The maximum number of results to be returned per request. This parameter
  is used in the ListUsers and ListGroups request to specify how many results to return in
  one page. The length limit is 50 characters.
- `next_token`: The pagination token used for the ListUsers and ListGroups API operations.
  This value is generated by the identity store service. It is returned in the API response
  if the total results are more than the size of one page. This token is also returned when
  it is used in the API request to search for the next page.
"""
function list_users(IdentityStoreId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return identitystore("ListUsers", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("IdentityStoreId"=>IdentityStoreId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
