# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: amplifyuibuilder
using AWS.Compat
using AWS.UUIDs

# Julia syntax for service-level optional parameters to the AWS request syntax
const SERVICE_PARAMETER_MAP = AWS.LittleDict("client_token" => "clientToken", "max_results" => "maxResults", "next_token" => "nextToken")

"""
    create_component(app_id, component_to_create, environment_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a new component for an Amplify app.

# Arguments
- `app_id`: The unique ID of the Amplify app to associate with the component.
- `component_to_create`: Represents the configuration of the component to create.
- `environment_name`: The name of the backend environment that is a part of the Amplify app.

# Keyword Parameters
- `client_token`: The unique client token.
"""
function create_component(appId, componentToCreate, environmentName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return amplifyuibuilder("POST", "/app/$(appId)/environment/$(environmentName)/components", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("componentToCreate"=>componentToCreate, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_theme(app_id, environment_name, theme_to_create; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a theme to apply to the components in an Amplify app.

# Arguments
- `app_id`: The unique ID of the Amplify app associated with the theme.
- `environment_name`: The name of the backend environment that is a part of the Amplify app.
- `theme_to_create`: Represents the configuration of the theme to create.

# Keyword Parameters
- `client_token`: The unique client token.
"""
function create_theme(appId, environmentName, themeToCreate; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return amplifyuibuilder("POST", "/app/$(appId)/environment/$(environmentName)/themes", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("themeToCreate"=>themeToCreate, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_component(app_id, environment_name, id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a component from an Amplify app.

# Arguments
- `app_id`: The unique ID of the Amplify app associated with the component to delete.
- `environment_name`: The name of the backend environment that is a part of the Amplify app.
- `id`: The unique ID of the component to delete.

"""
function delete_component(appId, environmentName, id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return amplifyuibuilder("DELETE", "/app/$(appId)/environment/$(environmentName)/components/$(id)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_theme(app_id, environment_name, id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a theme from an Amplify app.

# Arguments
- `app_id`: The unique ID of the Amplify app associated with the theme to delete.
- `environment_name`: The name of the backend environment that is a part of the Amplify app.
- `id`: The unique ID of the theme to delete.

"""
function delete_theme(appId, environmentName, id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return amplifyuibuilder("DELETE", "/app/$(appId)/environment/$(environmentName)/themes/$(id)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    exchange_code_for_token(provider, request; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Exchanges an access code for a token.

# Arguments
- `provider`: The third-party provider for the token. The only valid value is figma.
- `request`: Describes the configuration of the request.

"""
function exchange_code_for_token(provider, request; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return amplifyuibuilder("POST", "/tokens/$(provider)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("request"=>request), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    export_components(app_id, environment_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Exports component configurations to code that is ready to integrate into an Amplify app.

# Arguments
- `app_id`: The unique ID of the Amplify app to export components to.
- `environment_name`: The name of the backend environment that is a part of the Amplify app.

"""
function export_components(appId, environmentName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return amplifyuibuilder("GET", "/export/app/$(appId)/environment/$(environmentName)/components", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    export_themes(app_id, environment_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Exports theme configurations to code that is ready to integrate into an Amplify app.

# Arguments
- `app_id`: The unique ID of the Amplify app to export the themes to.
- `environment_name`: The name of the backend environment that is part of the Amplify app.

"""
function export_themes(appId, environmentName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return amplifyuibuilder("GET", "/export/app/$(appId)/environment/$(environmentName)/themes", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_component(app_id, environment_name, id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns an existing component for an Amplify app.

# Arguments
- `app_id`: The unique ID of the Amplify app.
- `environment_name`: The name of the backend environment that is part of the Amplify app.
- `id`: The unique ID of the component.

"""
function get_component(appId, environmentName, id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return amplifyuibuilder("GET", "/app/$(appId)/environment/$(environmentName)/components/$(id)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_theme(app_id, environment_name, id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns an existing theme for an Amplify app.

# Arguments
- `app_id`: The unique ID of the Amplify app.
- `environment_name`: The name of the backend environment that is part of the Amplify app.
- `id`: The unique ID for the theme.

"""
function get_theme(appId, environmentName, id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return amplifyuibuilder("GET", "/app/$(appId)/environment/$(environmentName)/themes/$(id)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_components(app_id, environment_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves a list of components for a specified Amplify app and backend environment.

# Arguments
- `app_id`: The unique ID for the Amplify app.
- `environment_name`: The name of the backend environment that is a part of the Amplify app.

# Keyword Parameters
- `max_results`: The maximum number of components to retrieve.
- `next_token`: The token to request the next page of results.
"""
function list_components(appId, environmentName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return amplifyuibuilder("GET", "/app/$(appId)/environment/$(environmentName)/components", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_themes(app_id, environment_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves a list of themes for a specified Amplify app and backend environment.

# Arguments
- `app_id`: The unique ID for the Amplify app.
- `environment_name`: The name of the backend environment that is a part of the Amplify app.

# Keyword Parameters
- `max_results`: The maximum number of theme results to return in the response.
- `next_token`: The token to request the next page of results.
"""
function list_themes(appId, environmentName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return amplifyuibuilder("GET", "/app/$(appId)/environment/$(environmentName)/themes", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    refresh_token(provider, refresh_token_body; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Refreshes a previously issued access token that might have expired.

# Arguments
- `provider`: The third-party provider for the token. The only valid value is figma.
- `refresh_token_body`: Information about the refresh token request.

"""
function refresh_token(provider, refreshTokenBody; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return amplifyuibuilder("POST", "/tokens/$(provider)/refresh", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("refreshTokenBody"=>refreshTokenBody), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_component(app_id, environment_name, id, updated_component; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates an existing component.

# Arguments
- `app_id`: The unique ID for the Amplify app.
- `environment_name`: The name of the backend environment that is part of the Amplify app.
- `id`: The unique ID for the component.
- `updated_component`: The configuration of the updated component.

# Keyword Parameters
- `client_token`: The unique client token.
"""
function update_component(appId, environmentName, id, updatedComponent; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return amplifyuibuilder("PATCH", "/app/$(appId)/environment/$(environmentName)/components/$(id)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("updatedComponent"=>updatedComponent, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_theme(app_id, environment_name, id, updated_theme; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates an existing theme.

# Arguments
- `app_id`: The unique ID for the Amplify app.
- `environment_name`: The name of the backend environment that is part of the Amplify app.
- `id`: The unique ID for the theme.
- `updated_theme`: The configuration of the updated theme.

# Keyword Parameters
- `client_token`: The unique client token.
"""
function update_theme(appId, environmentName, id, updatedTheme; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return amplifyuibuilder("PATCH", "/app/$(appId)/environment/$(environmentName)/themes/$(id)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("updatedTheme"=>updatedTheme, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
