# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: proton
using AWS.Compat
using AWS.UUIDs

MAPPING = Dict(
    "provisioning" => "provisioning",
    "branch_name" => "branchName",
    "compatible_environment_templates" => "compatibleEnvironmentTemplates",
    "major_version" => "majorVersion",
    "next_token" => "nextToken",
    "proton_service_role_arn" => "protonServiceRoleArn",
    "repository_id" => "repositoryId",
    "environment_name" => "environmentName",
    "pipeline_service_role_arn" => "pipelineServiceRoleArn",
    "spec" => "spec",
    "encryption_key" => "encryptionKey",
    "pipeline_provisioning" => "pipelineProvisioning",
    "environment_templates" => "environmentTemplates",
    "status" => "status",
    "environment_account_connection_id" => "environmentAccountConnectionId",
    "template_major_version" => "templateMajorVersion",
    "description" => "description",
    "max_results" => "maxResults",
    "client_token" => "clientToken",
    "statuses" => "statuses",
    "service_name" => "serviceName",
    "template_minor_version" => "templateMinorVersion",
    "display_name" => "displayName",
    "tags" => "tags",
    "repository_connection_arn" => "repositoryConnectionArn",
)

"""
    accept_environment_account_connection(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

In a management account, an environment account connection request is accepted. When the
environment account connection request is accepted, AWS Proton can use the associated IAM
role to provision environment infrastructure resources in the associated environment
account. For more information, see Environment account connections in the AWS Proton
Administrator guide.

# Arguments
- `id`: The ID of the environment account connection.

"""
function accept_environment_account_connection(
    id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "AcceptEnvironmentAccountConnection",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    cancel_environment_deployment(environment_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Attempts to cancel an environment deployment on an UpdateEnvironment action, if the
deployment is IN_PROGRESS. For more information, see Update an environment in the AWS
Proton Administrator guide. The following list includes potential cancellation scenarios.
If the cancellation attempt succeeds, the resulting deployment state is CANCELLED.   If the
cancellation attempt fails, the resulting deployment state is FAILED.   If the current
UpdateEnvironment action succeeds before the cancellation attempt starts, the resulting
deployment state is SUCCEEDED and the cancellation attempt has no effect.

# Arguments
- `environment_name`: The name of the environment with the deployment to cancel.

"""
function cancel_environment_deployment(
    environmentName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "CancelEnvironmentDeployment",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("environmentName" => environmentName), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    cancel_service_instance_deployment(service_instance_name, service_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Attempts to cancel a service instance deployment on an UpdateServiceInstance action, if the
deployment is IN_PROGRESS. For more information, see Update a service instance in the AWS
Proton Administrator guide or the AWS Proton User guide. The following list includes
potential cancellation scenarios.   If the cancellation attempt succeeds, the resulting
deployment state is CANCELLED.   If the cancellation attempt fails, the resulting
deployment state is FAILED.   If the current UpdateServiceInstance action succeeds before
the cancellation attempt starts, the resulting deployment state is SUCCEEDED and the
cancellation attempt has no effect.

# Arguments
- `service_instance_name`: The name of the service instance with the deployment to cancel.
- `service_name`: The name of the service with the service instance deployment to cancel.

"""
function cancel_service_instance_deployment(
    serviceInstanceName,
    serviceName;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "CancelServiceInstanceDeployment",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "serviceInstanceName" => serviceInstanceName,
                    "serviceName" => serviceName,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    cancel_service_pipeline_deployment(service_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Attempts to cancel a service pipeline deployment on an UpdateServicePipeline action, if the
deployment is IN_PROGRESS. For more information, see Update a service pipeline in the AWS
Proton Administrator guide or the AWS Proton User guide. The following list includes
potential cancellation scenarios.   If the cancellation attempt succeeds, the resulting
deployment state is CANCELLED.   If the cancellation attempt fails, the resulting
deployment state is FAILED.   If the current UpdateServicePipeline action succeeds before
the cancellation attempt starts, the resulting deployment state is SUCCEEDED and the
cancellation attempt has no effect.

# Arguments
- `service_name`: The name of the service with the service pipeline deployment to cancel.

"""
function cancel_service_pipeline_deployment(
    serviceName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "CancelServicePipelineDeployment",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("serviceName" => serviceName), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_environment(name, spec, template_major_version, template_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deploy a new environment. An AWS Proton environment is created from an environment template
that defines infrastructure and resources that can be shared across services. For more
information, see the Environments in the AWS Proton Administrator Guide.

# Arguments
- `name`: The name of the environment.
- `spec`: A link to a YAML formatted spec file that provides inputs as defined in the
  environment template bundle schema file. For more information, see Environments in the AWS
  Proton Administrator Guide.
- `template_major_version`: The ID of the major version of the environment template.
- `template_name`: The name of the environment template. For more information, see
  Environment Templates in the AWS Proton Administrator Guide.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"description"`: A description of the environment that's being created and deployed.
- `"environment_account_connection_id"`: The ID of the environment account connection that
  you provide if you're provisioning your environment infrastructure resources to an
  environment account. You must include either the environmentAccountConnectionId or
  protonServiceRoleArn parameter and value. For more information, see Environment account
  connections in the AWS Proton Administrator guide.
- `"proton_service_role_arn"`: The Amazon Resource Name (ARN) of the AWS Proton service
  role that allows AWS Proton to make calls to other services on your behalf. You must
  include either the environmentAccountConnectionId or protonServiceRoleArn parameter and
  value.
- `"tags"`: Create tags for your environment. For more information, see AWS Proton
  resources and tagging in the AWS Proton Administrator Guide or AWS Proton User Guide.
- `"template_minor_version"`: The ID of the minor version of the environment template.
"""
function create_environment(
    name,
    spec,
    templateMajorVersion,
    templateName;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "CreateEnvironment",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "name" => name,
                    "spec" => spec,
                    "templateMajorVersion" => templateMajorVersion,
                    "templateName" => templateName,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_environment_account_connection(environment_name, management_account_id, role_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Create an environment account connection in an environment account so that environment
infrastructure resources can be provisioned in the environment account from a management
account. An environment account connection is a secure bi-directional connection between a
management account and an environment account that maintains authorization and permissions.
For more information, see Environment account connections in the AWS Proton Administrator
guide.

# Arguments
- `environment_name`: The name of the AWS Proton environment that's created in the
  associated management account.
- `management_account_id`: The ID of the management account that accepts or rejects the
  environment account connection. You create an manage the AWS Proton environment in this
  account. If the management account accepts the environment account connection, AWS Proton
  can use the associated IAM role to provision environment infrastructure resources in the
  associated environment account.
- `role_arn`: The Amazon Resource Name (ARN) of the IAM service role that's created in the
  environment account. AWS Proton uses this role to provision infrastructure resources in the
  associated environment account.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"client_token"`: When included, if two identicial requests are made with the same client
  token, AWS Proton returns the environment account connection that the first request created.
"""
function create_environment_account_connection(
    environmentName,
    managementAccountId,
    roleArn;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "CreateEnvironmentAccountConnection",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "environmentName" => environmentName,
                    "managementAccountId" => managementAccountId,
                    "roleArn" => roleArn,
                    "client_token" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_environment_template(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Create an environment template for AWS Proton. For more information, see Environment
Templates in the AWS Proton Administrator Guide. You can create an environment template in
one of the two following ways:   Register and publish a standard environment template that
instructs AWS Proton to deploy and manage environment infrastructure.   Register and
publish a customer managed environment template that connects AWS Proton to your existing
provisioned infrastructure that you manage. AWS Proton doesn't manage your existing
provisioned infrastructure. To create an environment template for customer provisioned and
managed infrastructure, include the provisioning parameter and set the value to
CUSTOMER_MANAGED. For more information, see Register and publish an environment template in
the AWS Proton Administrator Guide.

# Arguments
- `name`: The name of the environment template.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"description"`: A description of the environment template.
- `"display_name"`: The environment template name as displayed in the developer interface.
- `"encryption_key"`: A customer provided encryption key that AWS Proton uses to encrypt
  data.
- `"provisioning"`: When included, indicates that the environment template is for customer
  provisioned and managed infrastructure.
- `"tags"`: Create tags for your environment template. For more information, see AWS Proton
  resources and tagging in the AWS Proton Administrator Guide or AWS Proton User Guide.
"""
function create_environment_template(
    name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "CreateEnvironmentTemplate",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("name" => name), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_environment_template_version(source, template_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Create a new major or minor version of an environment template. A major version of an
environment template is a version that isn't backwards compatible. A minor version of an
environment template is a version that's backwards compatible within its major version.

# Arguments
- `source`: An object that includes the template bundle S3 bucket path and name for the new
  version of an template.
- `template_name`: The name of the environment template.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"client_token"`: When included, if two identicial requests are made with the same client
  token, AWS Proton returns the environment template version that the first request created.
- `"description"`: A description of the new version of an environment template.
- `"major_version"`: To create a new minor version of the environment template, include a
  majorVersion. To create a new major and minor version of the environment template, exclude
  majorVersion.
- `"tags"`: Create tags for a new version of an environment template.
"""
function create_environment_template_version(
    source, templateName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "CreateEnvironmentTemplateVersion",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "source" => source,
                    "templateName" => templateName,
                    "client_token" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_service(name, spec, template_major_version, template_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Create an AWS Proton service. An AWS Proton service is an instantiation of a service
template and often includes several service instances and pipeline. For more information,
see Services in the AWS Proton Administrator Guide and Services in the AWS Proton User
Guide.

# Arguments
- `name`: The service name.
- `spec`: A link to a spec file that provides inputs as defined in the service template
  bundle schema file. The spec file is in YAML format. Don’t include pipeline inputs in the
  spec if your service template doesn’t include a service pipeline. For more information,
  see Create a service in the AWS Proton Administrator Guide and Create a service in the AWS
  Proton User Guide.
- `template_major_version`: The ID of the major version of the service template that was
  used to create the service.
- `template_name`: The name of the service template that's used to create the service.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"branch_name"`: The name of the code repository branch that holds the code that's
  deployed in AWS Proton. Don't include this parameter if your service template doesn't
  include a service pipeline.
- `"description"`: A description of the AWS Proton service.
- `"repository_connection_arn"`: The Amazon Resource Name (ARN) of the repository
  connection. For more information, see Set up repository connection in the AWS Proton
  Administrator Guide and Setting up with AWS Proton in the AWS Proton User Guide. Don't
  include this parameter if your service template doesn't include a service pipeline.
- `"repository_id"`: The ID of the code repository. Don't include this parameter if your
  service template doesn't include a service pipeline.
- `"tags"`: Create tags for your service. For more information, see AWS Proton resources
  and tagging in the AWS Proton Administrator Guide or AWS Proton User Guide.
- `"template_minor_version"`: The ID of the minor version of the service template that was
  used to create the service.
"""
function create_service(
    name,
    spec,
    templateMajorVersion,
    templateName;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "CreateService",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "name" => name,
                    "spec" => spec,
                    "templateMajorVersion" => templateMajorVersion,
                    "templateName" => templateName,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_service_template(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Create a service template. The administrator creates a service template to define
standardized infrastructure and an optional CICD service pipeline. Developers, in turn,
select the service template from AWS Proton. If the selected service template includes a
service pipeline definition, they provide a link to their source code repository. AWS
Proton then deploys and manages the infrastructure defined by the selected service
template. For more information, see Service Templates in the AWS Proton Administrator Guide.

# Arguments
- `name`: The name of the service template.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"description"`: A description of the service template.
- `"display_name"`: The name of the service template as displayed in the developer
  interface.
- `"encryption_key"`: A customer provided encryption key that's used to encrypt data.
- `"pipeline_provisioning"`: AWS Proton includes a service pipeline for your service by
  default. When included, this parameter indicates that an AWS Proton service pipeline won't
  be included for your service. Once specified, this parameter can't be changed. For more
  information, see Service template bundles in the AWS Proton Administrator Guide.
- `"tags"`: Create tags for your service template. For more information, see AWS Proton
  resources and tagging in the AWS Proton Administrator Guide or AWS Proton User Guide.
"""
function create_service_template(
    name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "CreateServiceTemplate",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("name" => name), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_service_template_version(compatible_environment_templates, source, template_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Create a new major or minor version of a service template. A major version of a service
template is a version that isn't backwards compatible. A minor version of a service
template is a version that's backwards compatible within its major version.

# Arguments
- `compatible_environment_templates`: An array of compatible environment template objects
  for the new version of a service template.
- `source`: An object that includes the template bundle S3 bucket path and name for the new
  version of a service template.
- `template_name`: The name of the service template.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"client_token"`: When included, if two identicial requests are made with the same client
  token, AWS Proton returns the service template version that the first request created.
- `"description"`: A description of the new version of a service template.
- `"major_version"`: To create a new minor version of the service template, include a
  majorVersion. To create a new major and minor version of the service template, exclude
  majorVersion.
- `"tags"`: Create tags for a new version of a service template.
"""
function create_service_template_version(
    compatibleEnvironmentTemplates,
    source,
    templateName;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "CreateServiceTemplateVersion",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "compatibleEnvironmentTemplates" => compatibleEnvironmentTemplates,
                    "source" => source,
                    "templateName" => templateName,
                    "client_token" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_environment(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Delete an environment.

# Arguments
- `name`: The name of the environment to delete.

"""
function delete_environment(
    name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "DeleteEnvironment",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("name" => name), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_environment_account_connection(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

In an environment account, delete an environment account connection. After you delete an
environment account connection that’s in use by an AWS Proton environment, AWS Proton
can’t manage the environment infrastructure resources until a new environment account
connection is accepted for the environment account and associated environment. You're
responsible for cleaning up provisioned resources that remain without an environment
connection. For more information, see Environment account connections in the AWS Proton
Administrator guide.

# Arguments
- `id`: The ID of the environment account connection to delete.

"""
function delete_environment_account_connection(
    id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "DeleteEnvironmentAccountConnection",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_environment_template(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

If no other major or minor versions of an environment template exist, delete the
environment template.

# Arguments
- `name`: The name of the environment template to delete.

"""
function delete_environment_template(
    name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "DeleteEnvironmentTemplate",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("name" => name), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_environment_template_version(major_version, minor_version, template_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

If no other minor versions of an environment template exist, delete a major version of the
environment template if it's not the Recommended version. Delete the Recommended version of
the environment template if no other major versions or minor versions of the environment
template exist. A major version of an environment template is a version that's not
backwards compatible. Delete a minor version of an environment template if it isn't the
Recommended version. Delete a Recommended minor version of the environment template if no
other minor versions of the environment template exist. A minor version of an environment
template is a version that's backwards compatible.

# Arguments
- `major_version`: The environment template major version to delete.
- `minor_version`: The environment template minor version to delete.
- `template_name`: The name of the environment template.

"""
function delete_environment_template_version(
    majorVersion,
    minorVersion,
    templateName;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "DeleteEnvironmentTemplateVersion",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "majorVersion" => majorVersion,
                    "minorVersion" => minorVersion,
                    "templateName" => templateName,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_service(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Delete a service.

# Arguments
- `name`: The name of the service to delete.

"""
function delete_service(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "DeleteService",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("name" => name), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_service_template(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

If no other major or minor versions of the service template exist, delete the service
template.

# Arguments
- `name`: The name of the service template to delete.

"""
function delete_service_template(
    name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "DeleteServiceTemplate",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("name" => name), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_service_template_version(major_version, minor_version, template_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

If no other minor versions of a service template exist, delete a major version of the
service template if it's not the Recommended version. Delete the Recommended version of the
service template if no other major versions or minor versions of the service template
exist. A major version of a service template is a version that isn't backwards compatible.
Delete a minor version of a service template if it's not the Recommended version. Delete a
Recommended minor version of the service template if no other minor versions of the service
template exist. A minor version of a service template is a version that's backwards
compatible.

# Arguments
- `major_version`: The service template major version to delete.
- `minor_version`: The service template minor version to delete.
- `template_name`: The name of the service template.

"""
function delete_service_template_version(
    majorVersion,
    minorVersion,
    templateName;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "DeleteServiceTemplateVersion",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "majorVersion" => majorVersion,
                    "minorVersion" => minorVersion,
                    "templateName" => templateName,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_account_settings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Get detail data for the AWS Proton pipeline service role.

"""
function get_account_settings(;
    aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "GetAccountSettings", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    get_environment(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Get detail data for an environment.

# Arguments
- `name`: The name of the environment that you want to get the detail data for.

"""
function get_environment(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "GetEnvironment",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("name" => name), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_environment_account_connection(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

In an environment account, view the detail data for an environment account connection. For
more information, see Environment account connections in the AWS Proton Administrator guide.

# Arguments
- `id`: The ID of the environment account connection.

"""
function get_environment_account_connection(
    id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "GetEnvironmentAccountConnection",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_environment_template(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Get detail data for an environment template.

# Arguments
- `name`: The name of the environment template that you want to get the detail data for.

"""
function get_environment_template(
    name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "GetEnvironmentTemplate",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("name" => name), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_environment_template_version(major_version, minor_version, template_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

View detail data for a major or minor version of an environment template.

# Arguments
- `major_version`: To view environment template major version detail data, include
  majorVersion.
- `minor_version`: To view environment template minor version detail data, include
  minorVersion.
- `template_name`: The name of the environment template.

"""
function get_environment_template_version(
    majorVersion,
    minorVersion,
    templateName;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "GetEnvironmentTemplateVersion",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "majorVersion" => majorVersion,
                    "minorVersion" => minorVersion,
                    "templateName" => templateName,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_service(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Get detail data for a service.

# Arguments
- `name`: The name of the service that you want to get the detail data for.

"""
function get_service(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "GetService",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("name" => name), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_service_instance(name, service_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Get detail data for a service instance. A service instance is an instantiation of service
template, which is running in a specific environment.

# Arguments
- `name`: The name of a service instance that you want to get the detail data for.
- `service_name`: The name of the service that the service instance belongs to.

"""
function get_service_instance(
    name, serviceName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "GetServiceInstance",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("name" => name, "serviceName" => serviceName),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_service_template(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Get detail data for a service template.

# Arguments
- `name`: The name of the service template that you want to get detail data for.

"""
function get_service_template(
    name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "GetServiceTemplate",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("name" => name), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_service_template_version(major_version, minor_version, template_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

View detail data for a major or minor version of a service template.

# Arguments
- `major_version`: To view service template major version detail data, include majorVersion.
- `minor_version`: To view service template minor version detail data, include minorVersion.
- `template_name`: The name of the service template.

"""
function get_service_template_version(
    majorVersion,
    minorVersion,
    templateName;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "GetServiceTemplateVersion",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "majorVersion" => majorVersion,
                    "minorVersion" => minorVersion,
                    "templateName" => templateName,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_environment_account_connections(requested_by; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

View a list of environment account connections. For more information, see Environment
account connections in the AWS Proton Administrator guide.

# Arguments
- `requested_by`: The type of account making the ListEnvironmentAccountConnections request.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"environment_name"`: The environment name that's associated with each listed environment
  account connection.
- `"max_results"`: The maximum number of environment account connections to list.
- `"next_token"`: A token to indicate the location of the next environment account
  connection in the array of environment account connections, after the list of environment
  account connections that was previously requested.
- `"statuses"`: The status details for each listed environment account connection.
"""
function list_environment_account_connections(
    requestedBy; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "ListEnvironmentAccountConnections",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("requestedBy" => requestedBy), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_environment_template_versions(template_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

List major or minor versions of an environment template with detail data.

# Arguments
- `template_name`: The name of the environment template.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"major_version"`: To view a list of minor of versions under a major version of an
  environment template, include majorVersion. To view a list of major versions of an
  environment template, exclude majorVersion.
- `"max_results"`: The maximum number of major or minor versions of an environment template
  to list.
- `"next_token"`: A token to indicate the location of the next major or minor version in
  the array of major or minor versions of an environment template, after the list of major or
  minor versions that was previously requested.
"""
function list_environment_template_versions(
    templateName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "ListEnvironmentTemplateVersions",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("templateName" => templateName), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_environment_templates(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

List environment templates.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`: The maximum number of environment templates to list.
- `"next_token"`: A token to indicate the location of the next environment template in the
  array of environment templates, after the list of environment templates that was previously
  requested.
"""
function list_environment_templates(;
    aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "ListEnvironmentTemplates",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_environments(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

List environments with detail data summaries.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"environment_templates"`: An array of the versions of the environment template.
- `"max_results"`: The maximum number of environments to list.
- `"next_token"`: A token to indicate the location of the next environment in the array of
  environments, after the list of environments that was previously requested.
"""
function list_environments(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "ListEnvironments", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_service_instances(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

List service instances with summaries of detail data.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`: The maximum number of service instances to list.
- `"next_token"`: A token to indicate the location of the next service in the array of
  service instances, after the list of service instances that was previously requested.
- `"service_name"`: The name of the service that the service instance belongs to.
"""
function list_service_instances(;
    aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "ListServiceInstances",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_service_template_versions(template_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

List major or minor versions of a service template with detail data.

# Arguments
- `template_name`: The name of the service template.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"major_version"`: To view a list of minor of versions under a major version of a service
  template, include majorVersion. To view a list of major versions of a service template,
  exclude majorVersion.
- `"max_results"`: The maximum number of major or minor versions of a service template to
  list.
- `"next_token"`: A token to indicate the location of the next major or minor version in
  the array of major or minor versions of a service template, after the list of major or
  minor versions that was previously requested.
"""
function list_service_template_versions(
    templateName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "ListServiceTemplateVersions",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("templateName" => templateName), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_service_templates(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

List service templates with detail data.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`: The maximum number of service templates to list.
- `"next_token"`: A token to indicate the location of the next service template in the
  array of service templates, after the list of service templates previously requested.
"""
function list_service_templates(;
    aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "ListServiceTemplates",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_services(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

List services with summaries of detail data.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`: The maximum number of services to list.
- `"next_token"`: A token to indicate the location of the next service in the array of
  services, after the list of services that was previously requested.
"""
function list_services(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "ListServices", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_tags_for_resource(resource_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

List tags for a resource. For more information, see AWS Proton resources and tagging in the
AWS Proton Administrator Guide or AWS Proton User Guide.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource for the listed tags.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`: The maximum number of tags to list.
- `"next_token"`: A token to indicate the location of the next resource tag in the array of
  resource tags, after the list of resource tags that was previously requested.
"""
function list_tags_for_resource(
    resourceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "ListTagsForResource",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("resourceArn" => resourceArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    reject_environment_account_connection(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

In a management account, reject an environment account connection from another environment
account. After you reject an environment account connection request, you won’t be able to
accept or use the rejected environment account connection. You can’t reject an
environment account connection that is connected to an environment. For more information,
see Environment account connections in the AWS Proton Administrator guide.

# Arguments
- `id`: The ID of the environment account connection to reject.

"""
function reject_environment_account_connection(
    id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "RejectEnvironmentAccountConnection",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    tag_resource(resource_arn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Tag a resource. For more information, see AWS Proton resources and tagging in the AWS
Proton Administrator Guide or AWS Proton User Guide.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource that the resource tag is
  applied to.
- `tags`: An array of resource tags to apply to a resource.

"""
function tag_resource(
    resourceArn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "TagResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("resourceArn" => resourceArn, "tags" => tags),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    untag_resource(resource_arn, tag_keys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Remove a tag from a resource. For more information, see AWS Proton resources and tagging in
the AWS Proton Administrator Guide or AWS Proton User Guide.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource that the tag is to be
  removed from.
- `tag_keys`: An array of tag keys indicating the resource tags to be removed from the
  resource.

"""
function untag_resource(
    resourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "UntagResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("resourceArn" => resourceArn, "tagKeys" => tagKeys),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_account_settings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Update the AWS Proton pipeline service account settings.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"pipeline_service_role_arn"`: The Amazon Resource Name (ARN) of the AWS Proton pipeline
  service role.
"""
function update_account_settings(;
    aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "UpdateAccountSettings",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_environment(deployment_type, name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Update an environment. If the environment is associated with an environment account
connection, don't update or include the protonServiceRoleArn parameter to update or connect
to an environment account connection.  You can only update to a new environment account
connection if it was created in the same environment account that the current environment
account connection was created in and is associated with the current environment. If the
environment isn't associated with an environment account connection, don't update or
include the environmentAccountConnectionId parameter to update or connect to an environment
account connection. You can update either the environmentAccountConnectionId or
protonServiceRoleArn parameter and value. You can’t update both. There are four modes for
updating an environment as described in the following. The deploymentType field defines the
mode.     NONE  In this mode, a deployment doesn't occur. Only the requested metadata
parameters are updated.     CURRENT_VERSION  In this mode, the environment is deployed and
updated with the new spec that you provide. Only requested parameters are updated. Don’t
include minor or major version parameters when you use this deployment-type.
MINOR_VERSION  In this mode, the environment is deployed and updated with the published,
recommended (latest) minor version of the current major version in use, by default. You can
also specify a different minor version of the current major version in use.
MAJOR_VERSION  In this mode, the environment is deployed and updated with the published,
recommended (latest) major and minor version of the current template, by default. You can
also specify a different major version that's higher than the major version in use and a
minor version (optional).

# Arguments
- `deployment_type`: There are four modes for updating an environment as described in the
  following. The deploymentType field defines the mode.     NONE  In this mode, a deployment
  doesn't occur. Only the requested metadata parameters are updated.     CURRENT_VERSION  In
  this mode, the environment is deployed and updated with the new spec that you provide. Only
  requested parameters are updated. Don’t include minor or major version parameters when
  you use this deployment-type.     MINOR_VERSION  In this mode, the environment is deployed
  and updated with the published, recommended (latest) minor version of the current major
  version in use, by default. You can also specify a different minor version of the current
  major version in use.     MAJOR_VERSION  In this mode, the environment is deployed and
  updated with the published, recommended (latest) major and minor version of the current
  template, by default. You can also specify a different major version that is higher than
  the major version in use and a minor version (optional).
- `name`: The name of the environment to update.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"description"`: A description of the environment update.
- `"environment_account_connection_id"`: The ID of the environment account connection. You
  can only update to a new environment account connection if it was created in the same
  environment account that the current environment account connection was created in and is
  associated with the current environment.
- `"proton_service_role_arn"`: The Amazon Resource Name (ARN) of the AWS Proton service
  role that allows AWS Proton to make API calls to other services your behalf.
- `"spec"`: The formatted specification that defines the update.
- `"template_major_version"`: The ID of the major version of the environment to update.
- `"template_minor_version"`: The ID of the minor version of the environment to update.
"""
function update_environment(
    deploymentType, name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "UpdateEnvironment",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("deploymentType" => deploymentType, "name" => name),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_environment_account_connection(id, role_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

In an environment account, update an environment account connection to use a new IAM role.
For more information, see Environment account connections in the AWS Proton Administrator
guide.

# Arguments
- `id`: The ID of the environment account connection to update.
- `role_arn`: The Amazon Resource Name (ARN) of the IAM service role that is associated
  with the environment account connection to update.

"""
function update_environment_account_connection(
    id, roleArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "UpdateEnvironmentAccountConnection",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("id" => id, "roleArn" => roleArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_environment_template(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Update an environment template.

# Arguments
- `name`: The name of the environment template to update.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"description"`: A description of the environment template update.
- `"display_name"`: The name of the environment template to update as displayed in the
  developer interface.
"""
function update_environment_template(
    name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "UpdateEnvironmentTemplate",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("name" => name), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_environment_template_version(major_version, minor_version, template_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Update a major or minor version of an environment template.

# Arguments
- `major_version`: To update a major version of an environment template, include
  majorVersion.
- `minor_version`: To update a minor version of an environment template, include
  minorVersion.
- `template_name`: The name of the environment template.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"description"`: A description of environment template version to update.
- `"status"`: The status of the environment template minor version to update.
"""
function update_environment_template_version(
    majorVersion,
    minorVersion,
    templateName;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "UpdateEnvironmentTemplateVersion",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "majorVersion" => majorVersion,
                    "minorVersion" => minorVersion,
                    "templateName" => templateName,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_service(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Edit a service description or use a spec to add and delete service instances.  Existing
service instances and the service pipeline can't be edited using this API. They can only be
deleted.  Use the description parameter to modify the description. Edit the spec parameter
to add or delete instances.

# Arguments
- `name`: The name of the service to edit.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"description"`: The edited service description.
- `"spec"`: Lists the service instances to add and the existing service instances to
  remain. Omit the existing service instances to delete from the list. Don't include edits to
  the existing service instances or pipeline. For more information, see Edit a service in the
  AWS Proton Administrator Guide or the AWS Proton User Guide.
"""
function update_service(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "UpdateService",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("name" => name), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_service_instance(deployment_type, name, service_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Update a service instance. There are four modes for updating a service instance as
described in the following. The deploymentType field defines the mode.     NONE  In this
mode, a deployment doesn't occur. Only the requested metadata parameters are updated.
CURRENT_VERSION  In this mode, the service instance is deployed and updated with the new
spec that you provide. Only requested parameters are updated. Don’t include minor or
major version parameters when you use this deployment-type.     MINOR_VERSION  In this
mode, the service instance is deployed and updated with the published, recommended (latest)
minor version of the current major version in use, by default. You can also specify a
different minor version of the current major version in use.     MAJOR_VERSION  In this
mode, the service instance is deployed and updated with the published, recommended (latest)
major and minor version of the current template, by default. You can also specify a
different major version that is higher than the major version in use and a minor version
(optional).

# Arguments
- `deployment_type`: The deployment type. There are four modes for updating a service
  instance as described in the following. The deploymentType field defines the mode.     NONE
   In this mode, a deployment doesn't occur. Only the requested metadata parameters are
  updated.     CURRENT_VERSION  In this mode, the service instance is deployed and updated
  with the new spec that you provide. Only requested parameters are updated. Don’t include
  minor or major version parameters when you use this deployment-type.     MINOR_VERSION  In
  this mode, the service instance is deployed and updated with the published, recommended
  (latest) minor version of the current major version in use, by default. You can also
  specify a different minor version of the current major version in use.     MAJOR_VERSION
  In this mode, the service instance is deployed and updated with the published, recommended
  (latest) major and minor version of the current template, by default. You can also specify
  a different major version that is higher than the major version in use and a minor version
  (optional).
- `name`: The name of the service instance to update.
- `service_name`: The name of the service that the service instance belongs to.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"spec"`: The formatted specification that defines the service instance update.
- `"template_major_version"`: The major version of the service template to update.
- `"template_minor_version"`: The minor version of the service template to update.
"""
function update_service_instance(
    deploymentType,
    name,
    serviceName;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "UpdateServiceInstance",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "deploymentType" => deploymentType,
                    "name" => name,
                    "serviceName" => serviceName,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_service_pipeline(deployment_type, service_name, spec; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Update the service pipeline. There are four modes for updating a service pipeline as
described in the following. The deploymentType field defines the mode.     NONE  In this
mode, a deployment doesn't occur. Only the requested metadata parameters are updated.
CURRENT_VERSION  In this mode, the service pipeline is deployed and updated with the new
spec that you provide. Only requested parameters are updated. Don’t include minor or
major version parameters when you use this deployment-type.     MINOR_VERSION  In this
mode, the service pipeline is deployed and updated with the published, recommended (latest)
minor version of the current major version in use, by default. You can also specify a
different minor version of the current major version in use.     MAJOR_VERSION  In this
mode, the service pipeline is deployed and updated with the published, recommended (latest)
major and minor version of the current template by default. You can also specify a
different major version that is higher than the major version in use and a minor version
(optional).

# Arguments
- `deployment_type`: The deployment type. There are four modes for updating a service
  pipeline as described in the following. The deploymentType field defines the mode.     NONE
   In this mode, a deployment doesn't occur. Only the requested metadata parameters are
  updated.     CURRENT_VERSION  In this mode, the service pipeline is deployed and updated
  with the new spec that you provide. Only requested parameters are updated. Don’t include
  minor or major version parameters when you use this deployment-type.     MINOR_VERSION  In
  this mode, the service pipeline is deployed and updated with the published, recommended
  (latest) minor version of the current major version in use, by default. You can also
  specify a different minor version of the current major version in use.     MAJOR_VERSION
  In this mode, the service pipeline is deployed and updated with the published, recommended
  (latest) major and minor version of the current template, by default. You can also specify
  a different major version that is higher than the major version in use and a minor version
  (optional).
- `service_name`: The name of the service to that the pipeline is associated with.
- `spec`: The spec for the service pipeline to update.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"template_major_version"`: The major version of the service template that was used to
  create the service that the pipeline is associated with.
- `"template_minor_version"`: The minor version of the service template that was used to
  create the service that the pipeline is associated with.
"""
function update_service_pipeline(
    deploymentType,
    serviceName,
    spec;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "UpdateServicePipeline",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "deploymentType" => deploymentType,
                    "serviceName" => serviceName,
                    "spec" => spec,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_service_template(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Update a service template.

# Arguments
- `name`: The name of the service template to update.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"description"`: A description of the service template update.
- `"display_name"`: The name of the service template to update as displayed in the
  developer interface.
"""
function update_service_template(
    name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "UpdateServiceTemplate",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("name" => name), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_service_template_version(major_version, minor_version, template_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Update a major or minor version of a service template.

# Arguments
- `major_version`: To update a major version of a service template, include majorVersion.
- `minor_version`: To update a minor version of a service template, include minorVersion.
- `template_name`: The name of the service template.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"compatible_environment_templates"`: An array of compatible environment names for a
  service template major or minor version to update.
- `"description"`: A description of a service template version to update.
- `"status"`: The status of the service template minor version to update.
"""
function update_service_template_version(
    majorVersion,
    minorVersion,
    templateName;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return proton(
        "UpdateServiceTemplateVersion",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "majorVersion" => majorVersion,
                    "minorVersion" => minorVersion,
                    "templateName" => templateName,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
