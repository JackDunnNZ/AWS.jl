# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: auditmanager
using AWS.Compat
using AWS.UUIDs

MAPPING = Dict(
    "assessment_description" => "assessmentDescription",
    "default_process_owners" => "defaultProcessOwners",
    "comment_body" => "commentBody",
    "next_token" => "nextToken",
    "assessment_name" => "assessmentName",
    "default_assessment_reports_destination" => "defaultAssessmentReportsDestination",
    "assessment_reports_destination" => "assessmentReportsDestination",
    "control_set_id" => "controlSetId",
    "control_status" => "controlStatus",
    "description" => "description",
    "max_results" => "maxResults",
    "testing_information" => "testingInformation",
    "kms_key" => "kmsKey",
    "comment" => "comment",
    "compliance_type" => "complianceType",
    "action_plan_title" => "actionPlanTitle",
    "action_plan_instructions" => "actionPlanInstructions",
    "sns_topic" => "snsTopic",
    "control_id" => "controlId",
    "roles" => "roles",
    "tags" => "tags",
    "delegated_admin_account" => "delegatedAdminAccount",
    "admin_account_id" => "adminAccountId",
)

"""
    associate_assessment_report_evidence_folder(assessment_id, evidence_folder_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Associates an evidence folder to an assessment report in a Audit Manager assessment.

# Arguments
- `assessment_id`:  The identifier for the assessment.
- `evidence_folder_id`:  The identifier for the folder that the evidence is stored in.

"""
function associate_assessment_report_evidence_folder(
    assessmentId,
    evidenceFolderId;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "PUT",
        "/assessments/$(assessmentId)/associateToAssessmentReport",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("evidenceFolderId" => evidenceFolderId), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    batch_associate_assessment_report_evidence(assessment_id, evidence_folder_id, evidence_ids; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Associates a list of evidence to an assessment report in an Audit Manager assessment.

# Arguments
- `assessment_id`:  The identifier for the assessment.
- `evidence_folder_id`:  The identifier for the folder that the evidence is stored in.
- `evidence_ids`:  The list of evidence identifiers.

"""
function batch_associate_assessment_report_evidence(
    assessmentId,
    evidenceFolderId,
    evidenceIds;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "PUT",
        "/assessments/$(assessmentId)/batchAssociateToAssessmentReport",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "evidenceFolderId" => evidenceFolderId, "evidenceIds" => evidenceIds
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    batch_create_delegation_by_assessment(assessment_id, create_delegation_requests; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Creates a batch of delegations for an assessment in Audit Manager.

# Arguments
- `assessment_id`:  The identifier for the assessment.
- `create_delegation_requests`:  The API request to batch create delegations in Audit
  Manager.

"""
function batch_create_delegation_by_assessment(
    assessmentId,
    createDelegationRequests;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "POST",
        "/assessments/$(assessmentId)/delegations",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("createDelegationRequests" => createDelegationRequests),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    batch_delete_delegation_by_assessment(assessment_id, delegation_ids; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Deletes a batch of delegations for an assessment in Audit Manager.

# Arguments
- `assessment_id`:  The identifier for the assessment.
- `delegation_ids`:  The identifiers for the delegations.

"""
function batch_delete_delegation_by_assessment(
    assessmentId,
    delegationIds;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "PUT",
        "/assessments/$(assessmentId)/delegations",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("delegationIds" => delegationIds), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    batch_disassociate_assessment_report_evidence(assessment_id, evidence_folder_id, evidence_ids; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Disassociates a list of evidence from an assessment report in Audit Manager.

# Arguments
- `assessment_id`:  The identifier for the assessment.
- `evidence_folder_id`:  The identifier for the folder that the evidence is stored in.
- `evidence_ids`:  The list of evidence identifiers.

"""
function batch_disassociate_assessment_report_evidence(
    assessmentId,
    evidenceFolderId,
    evidenceIds;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "PUT",
        "/assessments/$(assessmentId)/batchDisassociateFromAssessmentReport",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "evidenceFolderId" => evidenceFolderId, "evidenceIds" => evidenceIds
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    batch_import_evidence_to_assessment_control(assessment_id, control_id, control_set_id, manual_evidence; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Uploads one or more pieces of evidence to a control in an Audit Manager assessment.

# Arguments
- `assessment_id`:  The identifier for the assessment.
- `control_id`:  The identifier for the control.
- `control_set_id`:  The identifier for the control set.
- `manual_evidence`:  The list of manual evidence objects.

"""
function batch_import_evidence_to_assessment_control(
    assessmentId,
    controlId,
    controlSetId,
    manualEvidence;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "POST",
        "/assessments/$(assessmentId)/controlSets/$(controlSetId)/controls/$(controlId)/evidence",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("manualEvidence" => manualEvidence), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_assessment(assessment_reports_destination, framework_id, name, roles, scope; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Creates an assessment in Audit Manager.

# Arguments
- `assessment_reports_destination`:  The assessment report storage destination for the
  assessment that's being created.
- `framework_id`:  The identifier for the framework that the assessment will be created
  from.
- `name`:  The name of the assessment to be created.
- `roles`:  The list of roles for the assessment.
- `scope`:

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"description"`:  The optional description of the assessment to be created.
- `"tags"`:  The tags that are associated with the assessment.
"""
function create_assessment(
    assessmentReportsDestination,
    frameworkId,
    name,
    roles,
    scope;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "POST",
        "/assessments",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "assessmentReportsDestination" => assessmentReportsDestination,
                    "frameworkId" => frameworkId,
                    "name" => name,
                    "roles" => roles,
                    "scope" => scope,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_assessment_framework(control_sets, name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Creates a custom framework in Audit Manager.

# Arguments
- `control_sets`:  The control sets that are associated with the framework.
- `name`:  The name of the new custom framework.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"compliance_type"`:  The compliance type that the new custom framework supports, such as
  CIS or HIPAA.
- `"description"`:  An optional description for the new custom framework.
- `"tags"`:  The tags that are associated with the framework.
"""
function create_assessment_framework(
    controlSets, name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "POST",
        "/assessmentFrameworks",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("controlSets" => controlSets, "name" => name),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_assessment_report(assessment_id, name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Creates an assessment report for the specified assessment.

# Arguments
- `assessment_id`:  The identifier for the assessment.
- `name`:  The name of the new assessment report.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"description"`:  The description of the assessment report.
"""
function create_assessment_report(
    assessmentId, name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "POST",
        "/assessments/$(assessmentId)/reports",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("name" => name), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_control(control_mapping_sources, name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Creates a new custom control in Audit Manager.

# Arguments
- `control_mapping_sources`:  The data mapping sources for the control.
- `name`:  The name of the control.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"action_plan_instructions"`:  The recommended actions to carry out if the control isn't
  fulfilled.
- `"action_plan_title"`:  The title of the action plan for remediating the control.
- `"description"`:  The description of the control.
- `"tags"`:  The tags that are associated with the control.
- `"testing_information"`:  The steps to follow to determine if the control is satisfied.
"""
function create_control(
    controlMappingSources,
    name;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "POST",
        "/controls",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "controlMappingSources" => controlMappingSources, "name" => name
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_assessment(assessment_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Deletes an assessment in Audit Manager.

# Arguments
- `assessment_id`:  The identifier for the assessment.

"""
function delete_assessment(
    assessmentId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "DELETE",
        "/assessments/$(assessmentId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_assessment_framework(framework_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Deletes a custom framework in Audit Manager.

# Arguments
- `framework_id`:  The identifier for the framework.

"""
function delete_assessment_framework(
    frameworkId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "DELETE",
        "/assessmentFrameworks/$(frameworkId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_assessment_framework_share(request_id, request_type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Deletes a share request for a custom framework in Audit Manager.

# Arguments
- `request_id`: The unique identifier for the share request to be deleted.
- `request_type`: Specifies whether the share request is a sent request or a received
  request.

"""
function delete_assessment_framework_share(
    requestId, requestType; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "DELETE",
        "/assessmentFrameworkShareRequests/$(requestId)",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("requestType" => requestType), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_assessment_report(assessment_id, assessment_report_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Deletes an assessment report from an assessment in Audit Manager.

# Arguments
- `assessment_id`:  The identifier for the assessment.
- `assessment_report_id`:  The unique identifier for the assessment report.

"""
function delete_assessment_report(
    assessmentId,
    assessmentReportId;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "DELETE",
        "/assessments/$(assessmentId)/reports/$(assessmentReportId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_control(control_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Deletes a custom control in Audit Manager.

# Arguments
- `control_id`:  The identifier for the control.

"""
function delete_control(
    controlId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "DELETE",
        "/controls/$(controlId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    deregister_account(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Deregisters an account in Audit Manager.

"""
function deregister_account(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "POST",
        "/account/deregisterAccount",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    deregister_organization_admin_account(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes the specified member Amazon Web Services account as a delegated administrator for
Audit Manager.   When you remove a delegated administrator from your Audit Manager
settings, you continue to have access to the evidence that you previously collected under
that account. This is also the case when you deregister a delegated administrator from
Audit Manager. However, Audit Manager will stop collecting and attaching evidence to that
delegated administrator account moving forward.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"admin_account_id"`:  The identifier for the administrator account.
"""
function deregister_organization_admin_account(;
    aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "POST",
        "/account/deregisterOrganizationAdminAccount",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    disassociate_assessment_report_evidence_folder(assessment_id, evidence_folder_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Disassociates an evidence folder from the specified assessment report in Audit Manager.

# Arguments
- `assessment_id`:  The identifier for the assessment.
- `evidence_folder_id`:  The identifier for the folder in which evidence is stored.

"""
function disassociate_assessment_report_evidence_folder(
    assessmentId,
    evidenceFolderId;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "PUT",
        "/assessments/$(assessmentId)/disassociateFromAssessmentReport",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("evidenceFolderId" => evidenceFolderId), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_account_status(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Returns the registration status of an account in Audit Manager.

"""
function get_account_status(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "GET",
        "/account/status",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_assessment(assessment_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Returns an assessment from Audit Manager.

# Arguments
- `assessment_id`:  The identifier for the assessment.

"""
function get_assessment(
    assessmentId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "GET",
        "/assessments/$(assessmentId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_assessment_framework(framework_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Returns a framework from Audit Manager.

# Arguments
- `framework_id`:  The identifier for the framework.

"""
function get_assessment_framework(
    frameworkId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "GET",
        "/assessmentFrameworks/$(frameworkId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_assessment_report_url(assessment_id, assessment_report_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Returns the URL of an assessment report in Audit Manager.

# Arguments
- `assessment_id`:  The identifier for the assessment.
- `assessment_report_id`:  The identifier for the assessment report.

"""
function get_assessment_report_url(
    assessmentId,
    assessmentReportId;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "GET",
        "/assessments/$(assessmentId)/reports/$(assessmentReportId)/url",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_change_logs(assessment_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Returns a list of changelogs from Audit Manager.

# Arguments
- `assessment_id`:  The identifier for the assessment.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"control_id"`:  The identifier for the control.
- `"control_set_id"`:  The identifier for the control set.
- `"max_results"`:  Represents the maximum number of results on a page or for an API
  request call.
- `"next_token"`:  The pagination token that's used to fetch the next set of results.
"""
function get_change_logs(
    assessmentId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "GET",
        "/assessments/$(assessmentId)/changelogs",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_control(control_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Returns a control from Audit Manager.

# Arguments
- `control_id`:  The identifier for the control.

"""
function get_control(
    controlId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "GET",
        "/controls/$(controlId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_delegations(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Returns a list of delegations from an audit owner to a delegate.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`:  Represents the maximum number of results on a page or for an API
  request call.
- `"next_token"`:  The pagination token that's used to fetch the next set of results.
"""
function get_delegations(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "GET",
        "/delegations",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_evidence(assessment_id, control_set_id, evidence_folder_id, evidence_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Returns evidence from Audit Manager.

# Arguments
- `assessment_id`:  The identifier for the assessment.
- `control_set_id`:  The identifier for the control set.
- `evidence_folder_id`:  The identifier for the folder that the evidence is stored in.
- `evidence_id`:  The identifier for the evidence.

"""
function get_evidence(
    assessmentId,
    controlSetId,
    evidenceFolderId,
    evidenceId;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "GET",
        "/assessments/$(assessmentId)/controlSets/$(controlSetId)/evidenceFolders/$(evidenceFolderId)/evidence/$(evidenceId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_evidence_by_evidence_folder(assessment_id, control_set_id, evidence_folder_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Returns all evidence from a specified evidence folder in Audit Manager.

# Arguments
- `assessment_id`:  The identifier for the assessment.
- `control_set_id`:  The identifier for the control set.
- `evidence_folder_id`:  The unique identifier for the folder that the evidence is stored
  in.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`:  Represents the maximum number of results on a page or for an API
  request call.
- `"next_token"`:  The pagination token that's used to fetch the next set of results.
"""
function get_evidence_by_evidence_folder(
    assessmentId,
    controlSetId,
    evidenceFolderId;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "GET",
        "/assessments/$(assessmentId)/controlSets/$(controlSetId)/evidenceFolders/$(evidenceFolderId)/evidence",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_evidence_folder(assessment_id, control_set_id, evidence_folder_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Returns an evidence folder from the specified assessment in Audit Manager.

# Arguments
- `assessment_id`:  The identifier for the assessment.
- `control_set_id`:  The identifier for the control set.
- `evidence_folder_id`:  The identifier for the folder that the evidence is stored in.

"""
function get_evidence_folder(
    assessmentId,
    controlSetId,
    evidenceFolderId;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "GET",
        "/assessments/$(assessmentId)/controlSets/$(controlSetId)/evidenceFolders/$(evidenceFolderId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_evidence_folders_by_assessment(assessment_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Returns the evidence folders from a specified assessment in Audit Manager.

# Arguments
- `assessment_id`:  The identifier for the assessment.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`:  Represents the maximum number of results on a page or for an API
  request call.
- `"next_token"`:  The pagination token that's used to fetch the next set of results.
"""
function get_evidence_folders_by_assessment(
    assessmentId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "GET",
        "/assessments/$(assessmentId)/evidenceFolders",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_evidence_folders_by_assessment_control(assessment_id, control_id, control_set_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Returns a list of evidence folders that are associated with a specified control of an
assessment in Audit Manager.

# Arguments
- `assessment_id`:  The identifier for the assessment.
- `control_id`:  The identifier for the control.
- `control_set_id`:  The identifier for the control set.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`:  Represents the maximum number of results on a page or for an API
  request call.
- `"next_token"`:  The pagination token that's used to fetch the next set of results.
"""
function get_evidence_folders_by_assessment_control(
    assessmentId,
    controlId,
    controlSetId;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "GET",
        "/assessments/$(assessmentId)/evidenceFolders-by-assessment-control/$(controlSetId)/$(controlId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_organization_admin_account(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Returns the name of the delegated Amazon Web Services administrator account for the
organization.

"""
function get_organization_admin_account(;
    aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "GET",
        "/account/organizationAdminAccount",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_services_in_scope(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Returns a list of the in-scope Amazon Web Services services for the specified assessment.

"""
function get_services_in_scope(;
    aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "GET", "/services", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    get_settings(attribute; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Returns the settings for the specified Amazon Web Services account.

# Arguments
- `attribute`:  The list of SettingAttribute enum values.

"""
function get_settings(
    attribute; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "GET",
        "/settings/$(attribute)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_assessment_framework_share_requests(request_type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Returns a list of sent or received share requests for custom frameworks in Audit Manager.

# Arguments
- `request_type`:  Specifies whether the share request is a sent request or a received
  request.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`:  Represents the maximum number of results on a page or for an API
  request call.
- `"next_token"`:  The pagination token that's used to fetch the next set of results.
"""
function list_assessment_framework_share_requests(
    requestType; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "GET",
        "/assessmentFrameworkShareRequests",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("requestType" => requestType), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_assessment_frameworks(framework_type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Returns a list of the frameworks that are available in the Audit Manager framework
library.

# Arguments
- `framework_type`:  The type of framework, such as a standard framework or a custom
  framework.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`:  Represents the maximum number of results on a page or for an API
  request call.
- `"next_token"`:  The pagination token that's used to fetch the next set of results.
"""
function list_assessment_frameworks(
    frameworkType; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "GET",
        "/assessmentFrameworks",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("frameworkType" => frameworkType), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_assessment_reports(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Returns a list of assessment reports created in Audit Manager.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`:  Represents the maximum number of results on a page or for an API
  request call.
- `"next_token"`:  The pagination token that's used to fetch the next set of results.
"""
function list_assessment_reports(;
    aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "GET",
        "/assessmentReports",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_assessments(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Returns a list of current and past assessments from Audit Manager.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`:  Represents the maximum number of results on a page or for an API
  request call.
- `"next_token"`:  The pagination token that's used to fetch the next set of results.
"""
function list_assessments(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "GET",
        "/assessments",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_controls(control_type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Returns a list of controls from Audit Manager.

# Arguments
- `control_type`:  The type of control, such as a standard control or a custom control.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`:  Represents the maximum number of results on a page or for an API
  request call.
- `"next_token"`:  The pagination token that's used to fetch the next set of results.
"""
function list_controls(
    controlType; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "GET",
        "/controls",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("controlType" => controlType), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_keywords_for_data_source(source; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Returns a list of keywords that are pre-mapped to the specified control data source.

# Arguments
- `source`:  The control mapping data source that the keywords apply to.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`:  Represents the maximum number of results on a page or for an API
  request call.
- `"next_token"`:  The pagination token that's used to fetch the next set of results.
"""
function list_keywords_for_data_source(
    source; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "GET",
        "/dataSourceKeywords",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("source" => source), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_notifications(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Returns a list of all Audit Manager notifications.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`:  Represents the maximum number of results on a page or for an API
  request call.
- `"next_token"`:  The pagination token that's used to fetch the next set of results.
"""
function list_notifications(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "GET",
        "/notifications",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_tags_for_resource(resource_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Returns a list of tags for the specified resource in Audit Manager.

# Arguments
- `resource_arn`:  The Amazon Resource Name (ARN) of the resource.

"""
function list_tags_for_resource(
    resourceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "GET",
        "/tags/$(resourceArn)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    register_account(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Enables Audit Manager for the specified Amazon Web Services account.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"delegated_admin_account"`:  The delegated administrator account for Audit Manager.
- `"kms_key"`:  The KMS key details.
"""
function register_account(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "POST",
        "/account/registerAccount",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    register_organization_admin_account(admin_account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Enables an Amazon Web Services account within the organization as the delegated
administrator for Audit Manager.

# Arguments
- `admin_account_id`:  The identifier for the delegated administrator account.

"""
function register_organization_admin_account(
    adminAccountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "POST",
        "/account/registerOrganizationAdminAccount",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("adminAccountId" => adminAccountId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_assessment_framework_share(destination_account, destination_region, framework_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Creates a share request for a custom framework in Audit Manager.  The share request
specifies a recipient and notifies them that a custom framework is available. Recipients
have 120 days to accept or decline the request. If no action is taken, the share request
expires.  When you invoke the StartAssessmentFrameworkShare API, you are about to share a
custom framework with another Amazon Web Services account. You may not share a custom
framework that is derived from a standard framework if the standard framework is designated
as not eligible for sharing by Amazon Web Services, unless you have obtained permission to
do so from the owner of the standard framework. To learn more about which standard
frameworks are eligible for sharing, see Framework sharing eligibility in the Audit Manager
User Guide.

# Arguments
- `destination_account`:  The Amazon Web Services account of the recipient.
- `destination_region`:  The Amazon Web Services Region of the recipient.
- `framework_id`:  The unique identifier for the custom framework to be shared.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"comment"`:  An optional comment from the sender about the share request.
"""
function start_assessment_framework_share(
    destinationAccount,
    destinationRegion,
    frameworkId;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "POST",
        "/assessmentFrameworks/$(frameworkId)/shareRequests",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "destinationAccount" => destinationAccount,
                    "destinationRegion" => destinationRegion,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    tag_resource(resource_arn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Tags the specified resource in Audit Manager.

# Arguments
- `resource_arn`:  The Amazon Resource Name (ARN) of the resource.
- `tags`:  The tags that are associated with the resource.

"""
function tag_resource(
    resourceArn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "POST",
        "/tags/$(resourceArn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("tags" => tags), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    untag_resource(resource_arn, tag_keys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Removes a tag from a resource in Audit Manager.

# Arguments
- `resource_arn`:  The Amazon Resource Name (ARN) of the specified resource.
- `tag_keys`:  The name or key of the tag.

"""
function untag_resource(
    resourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "DELETE",
        "/tags/$(resourceArn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("tagKeys" => tagKeys), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_assessment(assessment_id, scope; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Edits an Audit Manager assessment.

# Arguments
- `assessment_id`:  The identifier for the assessment.
- `scope`:  The scope of the assessment.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"assessment_description"`:  The description of the assessment.
- `"assessment_name"`:  The name of the assessment to be updated.
- `"assessment_reports_destination"`:  The assessment report storage destination for the
  assessment that's being updated.
- `"roles"`:  The list of roles for the assessment.
"""
function update_assessment(
    assessmentId, scope; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "PUT",
        "/assessments/$(assessmentId)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("scope" => scope), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_assessment_control(assessment_id, control_id, control_set_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Updates a control within an assessment in Audit Manager.

# Arguments
- `assessment_id`:  The identifier for the assessment.
- `control_id`:  The identifier for the control.
- `control_set_id`:  The identifier for the control set.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"comment_body"`:  The comment body text for the control.
- `"control_status"`:  The status of the control.
"""
function update_assessment_control(
    assessmentId,
    controlId,
    controlSetId;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "PUT",
        "/assessments/$(assessmentId)/controlSets/$(controlSetId)/controls/$(controlId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_assessment_control_set_status(assessment_id, comment, control_set_id, status; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Updates the status of a control set in an Audit Manager assessment.

# Arguments
- `assessment_id`:  The identifier for the assessment.
- `comment`:  The comment that's related to the status update.
- `control_set_id`:  The identifier for the control set.
- `status`:  The status of the control set that's being updated.

"""
function update_assessment_control_set_status(
    assessmentId,
    comment,
    controlSetId,
    status;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "PUT",
        "/assessments/$(assessmentId)/controlSets/$(controlSetId)/status",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("comment" => comment, "status" => status), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_assessment_framework(control_sets, framework_id, name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Updates a custom framework in Audit Manager.

# Arguments
- `control_sets`:  The control sets that are associated with the framework.
- `framework_id`:  The identifier for the framework.
- `name`:  The name of the framework to be updated.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"compliance_type"`:  The compliance type that the new custom framework supports, such as
  CIS or HIPAA.
- `"description"`:  The description of the updated framework.
"""
function update_assessment_framework(
    controlSets,
    frameworkId,
    name;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "PUT",
        "/assessmentFrameworks/$(frameworkId)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("controlSets" => controlSets, "name" => name),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_assessment_framework_share(action, request_id, request_type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Updates a share request for a custom framework in Audit Manager.

# Arguments
- `action`: Specifies the update action for the share request.
- `request_id`:  The unique identifier for the share request.
- `request_type`: Specifies whether the share request is a sent request or a received
  request.

"""
function update_assessment_framework_share(
    action,
    requestId,
    requestType;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "PUT",
        "/assessmentFrameworkShareRequests/$(requestId)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("action" => action, "requestType" => requestType),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_assessment_status(assessment_id, status; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Updates the status of an assessment in Audit Manager.

# Arguments
- `assessment_id`:  The identifier for the assessment.
- `status`:  The current status of the assessment.

"""
function update_assessment_status(
    assessmentId, status; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "PUT",
        "/assessments/$(assessmentId)/status",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("status" => status), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_control(control_id, control_mapping_sources, name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Updates a custom control in Audit Manager.

# Arguments
- `control_id`:  The identifier for the control.
- `control_mapping_sources`:  The data mapping sources for the control.
- `name`:  The name of the updated control.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"action_plan_instructions"`:  The recommended actions to carry out if the control isn't
  fulfilled.
- `"action_plan_title"`:  The title of the action plan for remediating the control.
- `"description"`:  The optional description of the control.
- `"testing_information"`:  The steps that you should follow to determine if the control is
  met.
"""
function update_control(
    controlId,
    controlMappingSources,
    name;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "PUT",
        "/controls/$(controlId)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "controlMappingSources" => controlMappingSources, "name" => name
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_settings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Updates Audit Manager settings for the current user account.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"default_assessment_reports_destination"`:  The default storage destination for
  assessment reports.
- `"default_process_owners"`:  A list of the default audit owners.
- `"kms_key"`:  The KMS key details.
- `"sns_topic"`:  The Amazon Simple Notification Service (Amazon SNS) topic that Audit
  Manager sends notifications to.
"""
function update_settings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "PUT", "/settings", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    validate_assessment_report_integrity(s3_relative_path; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Validates the integrity of an assessment report in Audit Manager.

# Arguments
- `s3_relative_path`:  The relative path of the Amazon S3 bucket that the assessment report
  is stored in.

"""
function validate_assessment_report_integrity(
    s3RelativePath; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return auditmanager(
        "POST",
        "/assessmentReports/integrity",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("s3RelativePath" => s3RelativePath), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
