# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: sagemaker_featurestore_runtime
using AWS.Compat
using AWS.UUIDs

# Julia syntax for service-level optional parameters to the AWS request syntax
const SERVICE_PARAMETER_MAP = OrderedCollections.LittleDict("feature_names" => "FeatureName")

"""
    batch_get_record(identifiers; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves a batch of Records from a FeatureGroup.

# Arguments
- `identifiers`: A list of FeatureGroup names, with their corresponding RecordIdentifier
  value, and Feature name that have been requested to be retrieved in batch.

"""
function batch_get_record(Identifiers; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return sagemaker_featurestore_runtime("POST", "/BatchGetRecord", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Identifiers"=>Identifiers), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_record(event_time, feature_group_name, record_identifier_value_as_string; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a Record from a FeatureGroup. A new record will show up in the OfflineStore when
the DeleteRecord API is called. This record will have a value of True in the is_deleted
column.

# Arguments
- `event_time`: Timestamp indicating when the deletion event occurred. EventTime can be
  used to query data at a certain point in time.
- `feature_group_name`: The name of the feature group to delete the record from.
- `record_identifier_value_as_string`: The value for the RecordIdentifier that uniquely
  identifies the record, in string format.

"""
function delete_record(EventTime, FeatureGroupName, RecordIdentifierValueAsString; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return sagemaker_featurestore_runtime("DELETE", "/FeatureGroup/$(FeatureGroupName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("EventTime"=>EventTime, "RecordIdentifierValueAsString"=>RecordIdentifierValueAsString), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_record(feature_group_name, record_identifier_value_as_string; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Use for OnlineStore serving from a FeatureStore. Only the latest records stored in the
OnlineStore can be retrieved. If no Record with RecordIdentifierValue is found, then an
empty result is returned.

# Arguments
- `feature_group_name`: The name of the feature group in which you want to put the records.
- `record_identifier_value_as_string`: The value that corresponds to RecordIdentifier type
  and uniquely identifies the record in the FeatureGroup.

# Keyword Parameters
- `feature_names`: List of names of Features to be retrieved. If not specified, the latest
  value for all the Features are returned.
"""
function get_record(FeatureGroupName, RecordIdentifierValueAsString; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return sagemaker_featurestore_runtime("GET", "/FeatureGroup/$(FeatureGroupName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("RecordIdentifierValueAsString"=>RecordIdentifierValueAsString), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    put_record(feature_group_name, record; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Used for data ingestion into the FeatureStore. The PutRecord API writes to both the
OnlineStore and OfflineStore. If the record is the latest record for the recordIdentifier,
the record is written to both the OnlineStore and OfflineStore. If the record is a historic
record, it is written only to the OfflineStore.

# Arguments
- `feature_group_name`: The name of the feature group that you want to insert the record
  into.
- `record`: List of FeatureValues to be inserted. This will be a full over-write. If you
  only want to update few of the feature values, do the following:   Use GetRecord to
  retrieve the latest record.   Update the record returned from GetRecord.    Use PutRecord
  to update feature values.

"""
function put_record(FeatureGroupName, Record; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return sagemaker_featurestore_runtime("PUT", "/FeatureGroup/$(FeatureGroupName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Record"=>Record), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
