# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: panorama
using AWS.Compat
using AWS.UUIDs

# Julia syntax for service-level optional parameters to the AWS request syntax
const SERVICE_PARAMETER_MAP = AWS.LittleDict("max_results" => "maxResults", "next_token" => "nextToken", "job_tags" => "JobTags", "node_description" => "NodeDescription", "mark_latest" => "MarkLatest", "owner_account" => "OwnerAccount", "category" => "category", "package_name" => "packageName", "package_version" => "packageVersion", "patch_version" => "PatchVersion", "updated_latest_patch_version" => "UpdatedLatestPatchVersion", "force_delete" => "ForceDelete", "tags" => "Tags", "device_id" => "DeviceId", "status_filter" => "statusFilter", "application_instance_id_to_replace" => "ApplicationInstanceIdToReplace", "description" => "Description", "manifest_overrides_payload" => "ManifestOverridesPayload", "name" => "Name", "runtime_role_arn" => "RuntimeRoleArn", "networking_configuration" => "NetworkingConfiguration")

"""
    create_application_instance(default_runtime_context_device, manifest_payload; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an application instance and deploys it to a device.

# Arguments
- `default_runtime_context_device`: A device's ID.
- `manifest_payload`: The application's manifest document.

# Keyword Parameters
- `application_instance_id_to_replace`: The ID of an application instance to replace with
  the new instance.
- `description`: A description for the application instance.
- `manifest_overrides_payload`: Setting overrides for the application manifest.
- `name`: A name for the application instance.
- `runtime_role_arn`: The ARN of a runtime role for the application instance.
- `tags`: Tags for the application instance.
"""
function create_application_instance(DefaultRuntimeContextDevice, ManifestPayload; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("POST", "/application-instances", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("DefaultRuntimeContextDevice"=>DefaultRuntimeContextDevice, "ManifestPayload"=>ManifestPayload), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_job_for_devices(device_ids, device_job_config, job_type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a job to run on one or more devices.

# Arguments
- `device_ids`: IDs of target devices.
- `device_job_config`: Configuration settings for the job.
- `job_type`: The type of job to run.

"""
function create_job_for_devices(DeviceIds, DeviceJobConfig, JobType; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("POST", "/jobs", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("DeviceIds"=>DeviceIds, "DeviceJobConfig"=>DeviceJobConfig, "JobType"=>JobType), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_node_from_template_job(node_name, output_package_name, output_package_version, template_parameters, template_type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a camera stream node.

# Arguments
- `node_name`: A name for the node.
- `output_package_name`: An output package name for the node.
- `output_package_version`: An output package version for the node.
- `template_parameters`: Template parameters for the node.
- `template_type`: The type of node.

# Keyword Parameters
- `job_tags`: Tags for the job.
- `node_description`: A description for the node.
"""
function create_node_from_template_job(NodeName, OutputPackageName, OutputPackageVersion, TemplateParameters, TemplateType; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("POST", "/packages/template-job", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("NodeName"=>NodeName, "OutputPackageName"=>OutputPackageName, "OutputPackageVersion"=>OutputPackageVersion, "TemplateParameters"=>TemplateParameters, "TemplateType"=>TemplateType), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_package(package_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a package and storage location in an Amazon S3 access point.

# Arguments
- `package_name`: A name for the package.

# Keyword Parameters
- `tags`: Tags for the package.
"""
function create_package(PackageName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("POST", "/packages", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("PackageName"=>PackageName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_package_import_job(client_token, input_config, job_type, output_config; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Imports a node package.

# Arguments
- `client_token`: A client token for the package import job.
- `input_config`: An input config for the package import job.
- `job_type`: A job type for the package import job.
- `output_config`: An output config for the package import job.

# Keyword Parameters
- `job_tags`: Tags for the package import job.
"""
function create_package_import_job(ClientToken, InputConfig, JobType, OutputConfig; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("POST", "/packages/import-jobs", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClientToken"=>ClientToken, "InputConfig"=>InputConfig, "JobType"=>JobType, "OutputConfig"=>OutputConfig), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_device(device_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a device.

# Arguments
- `device_id`: The device's ID.

"""
function delete_device(DeviceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("DELETE", "/devices/$(DeviceId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_package(package_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a package.

# Arguments
- `package_id`: The package's ID.

# Keyword Parameters
- `force_delete`: Delete the package even if it has artifacts stored in its access point.
  Deletes the package's artifacts from Amazon S3.
"""
function delete_package(PackageId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("DELETE", "/packages/$(PackageId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    deregister_package_version(package_id, package_version, patch_version; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deregisters a package version.

# Arguments
- `package_id`: A package ID.
- `package_version`: A package version.
- `patch_version`: A patch version.

# Keyword Parameters
- `owner_account`: An owner account.
- `updated_latest_patch_version`: If the version was marked latest, the new version to
  maker as latest.
"""
function deregister_package_version(PackageId, PackageVersion, PatchVersion; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("DELETE", "/packages/$(PackageId)/versions/$(PackageVersion)/patch/$(PatchVersion)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_application_instance(application_instance_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about an application instance on a device.

# Arguments
- `application_instance_id`: The application instance's ID.

"""
function describe_application_instance(applicationInstanceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("GET", "/application-instances/$(applicationInstanceId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_application_instance_details(application_instance_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about an application instance's configuration manifest.

# Arguments
- `application_instance_id`: The application instance's ID.

"""
function describe_application_instance_details(applicationInstanceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("GET", "/application-instances/$(applicationInstanceId)/details", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_device(device_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about a device.

# Arguments
- `device_id`: The device's ID.

"""
function describe_device(DeviceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("GET", "/devices/$(DeviceId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_device_job(job_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about a device job.

# Arguments
- `job_id`: The job's ID.

"""
function describe_device_job(JobId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("GET", "/jobs/$(JobId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_node(node_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about a node.

# Arguments
- `node_id`: The node's ID.

# Keyword Parameters
- `owner_account`: The account ID of the node's owner.
"""
function describe_node(NodeId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("GET", "/nodes/$(NodeId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_node_from_template_job(job_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about a job to create a camera stream node.

# Arguments
- `job_id`: The job's ID.

"""
function describe_node_from_template_job(JobId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("GET", "/packages/template-job/$(JobId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_package(package_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about a package.

# Arguments
- `package_id`: The package's ID.

"""
function describe_package(PackageId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("GET", "/packages/metadata/$(PackageId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_package_import_job(job_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about a package import job.

# Arguments
- `job_id`: The job's ID.

"""
function describe_package_import_job(JobId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("GET", "/packages/import-jobs/$(JobId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_package_version(package_id, package_version; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about a package version.

# Arguments
- `package_id`: The version's ID.
- `package_version`: The version's version.

# Keyword Parameters
- `owner_account`: The version's owner account.
- `patch_version`: The version's patch version.
"""
function describe_package_version(PackageId, PackageVersion; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("GET", "/packages/metadata/$(PackageId)/versions/$(PackageVersion)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_application_instance_dependencies(application_instance_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of application instance dependencies.

# Arguments
- `application_instance_id`: The application instance's ID.

# Keyword Parameters
- `max_results`: The maximum number of application instance dependencies to return in one
  page of results.
- `next_token`: Specify the pagination token from a previous request to retrieve the next
  page of results.
"""
function list_application_instance_dependencies(applicationInstanceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("GET", "/application-instances/$(applicationInstanceId)/package-dependencies", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_application_instance_node_instances(application_instance_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of application node instances.

# Arguments
- `application_instance_id`: The node instances' application instance ID.

# Keyword Parameters
- `max_results`: The maximum number of node instances to return in one page of results.
- `next_token`: Specify the pagination token from a previous request to retrieve the next
  page of results.
"""
function list_application_instance_node_instances(applicationInstanceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("GET", "/application-instances/$(applicationInstanceId)/node-instances", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_application_instances(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of application instances.

# Keyword Parameters
- `device_id`: The application instances' device ID.
- `max_results`: The maximum number of application instances to return in one page of
  results.
- `next_token`: Specify the pagination token from a previous request to retrieve the next
  page of results.
- `status_filter`: Only include instances with a specific status.
"""
function list_application_instances(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("GET", "/application-instances", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_devices(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of devices.

# Keyword Parameters
- `max_results`: The maximum number of devices to return in one page of results.
- `next_token`: Specify the pagination token from a previous request to retrieve the next
  page of results.
"""
function list_devices(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("GET", "/devices", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_devices_jobs(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of jobs.

# Keyword Parameters
- `device_id`: Filter results by the job's target device ID.
- `max_results`: The maximum number of device jobs to return in one page of results.
- `next_token`: Specify the pagination token from a previous request to retrieve the next
  page of results.
"""
function list_devices_jobs(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("GET", "/jobs", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_node_from_template_jobs(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of camera stream node jobs.

# Keyword Parameters
- `max_results`: The maximum number of node from template jobs to return in one page of
  results.
- `next_token`: Specify the pagination token from a previous request to retrieve the next
  page of results.
"""
function list_node_from_template_jobs(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("GET", "/packages/template-job", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_nodes(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of nodes.

# Keyword Parameters
- `category`: Search for nodes by category.
- `max_results`: The maximum number of nodes to return in one page of results.
- `next_token`: Specify the pagination token from a previous request to retrieve the next
  page of results.
- `owner_account`: Search for nodes by the account ID of the nodes' owner.
- `package_name`: Search for nodes by name.
- `package_version`: Search for nodes by version.
- `patch_version`: Search for nodes by patch version.
"""
function list_nodes(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("GET", "/nodes", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_package_import_jobs(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of package import jobs.

# Keyword Parameters
- `max_results`: The maximum number of package import jobs to return in one page of results.
- `next_token`: Specify the pagination token from a previous request to retrieve the next
  page of results.
"""
function list_package_import_jobs(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("GET", "/packages/import-jobs", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_packages(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of packages.

# Keyword Parameters
- `max_results`: The maximum number of packages to return in one page of results.
- `next_token`: Specify the pagination token from a previous request to retrieve the next
  page of results.
"""
function list_packages(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("GET", "/packages", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_tags_for_resource(resource_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of tags for a resource.

# Arguments
- `resource_arn`: The resource's ARN.

"""
function list_tags_for_resource(ResourceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("GET", "/tags/$(ResourceArn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    provision_device(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a device and returns a configuration archive. The configuration archive is a ZIP
file that contains a provisioning certificate that is valid for 5 minutes. Transfer the
configuration archive to the device with the included USB storage device within 5 minutes.

# Arguments
- `name`: A name for the device.

# Keyword Parameters
- `description`: A description for the device.
- `networking_configuration`: A networking configuration for the device.
- `tags`: Tags for the device.
"""
function provision_device(Name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("POST", "/devices", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Name"=>Name), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    register_package_version(package_id, package_version, patch_version; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Registers a package version.

# Arguments
- `package_id`: A package ID.
- `package_version`: A package version.
- `patch_version`: A patch version.

# Keyword Parameters
- `mark_latest`: Whether to mark the new version as the latest version.
- `owner_account`: An owner account.
"""
function register_package_version(PackageId, PackageVersion, PatchVersion; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("PUT", "/packages/$(PackageId)/versions/$(PackageVersion)/patch/$(PatchVersion)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    remove_application_instance(application_instance_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes an application instance.

# Arguments
- `application_instance_id`: An application instance ID.

"""
function remove_application_instance(applicationInstanceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("DELETE", "/application-instances/$(applicationInstanceId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    tag_resource(resource_arn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Tags a resource.

# Arguments
- `resource_arn`: The resource's ARN.
- `tags`: Tags for the resource.

"""
function tag_resource(ResourceArn, Tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("POST", "/tags/$(ResourceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Tags"=>Tags), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    untag_resource(resource_arn, tag_keys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes tags from a resource.

# Arguments
- `resource_arn`: The resource's ARN.
- `tag_keys`: Tag keys to remove.

"""
function untag_resource(ResourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("DELETE", "/tags/$(ResourceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tagKeys"=>tagKeys), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_device_metadata(device_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates a device's metadata.

# Arguments
- `device_id`: The device's ID.

# Keyword Parameters
- `description`: A description for the device.
"""
function update_device_metadata(DeviceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return panorama("PUT", "/devices/$(DeviceId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
