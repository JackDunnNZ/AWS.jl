# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: mediapackage_vod
using AWS.Compat
using AWS.UUIDs

MAPPING = Dict(
    "resource_id" => "resourceId",
    "hls_package" => "hlsPackage",
    "next_token" => "nextToken",
    "dash_package" => "dashPackage",
    "authorization" => "authorization",
    "max_results" => "maxResults",
    "packaging_group_id" => "packagingGroupId",
    "mss_package" => "mssPackage",
    "egress_access_logs" => "egressAccessLogs",
    "tags" => "tags",
    "cmaf_package" => "cmafPackage",
)

"""
    configure_logs(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Changes the packaging group's properities to configure log subscription

# Arguments
- `id`: The ID of a MediaPackage VOD PackagingGroup resource.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"egress_access_logs"`:
"""
function configure_logs(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return mediapackage_vod(
        "PUT",
        "/packaging_groups/$(id)/configure_logs",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_asset(id, packaging_group_id, source_arn, source_role_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a new MediaPackage VOD Asset resource.

# Arguments
- `id`: The unique identifier for the Asset.
- `packaging_group_id`: The ID of the PackagingGroup for the Asset.
- `source_arn`: ARN of the source object in S3.
- `source_role_arn`: The IAM role ARN used to access the source S3 bucket.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"resource_id"`: The resource ID to include in SPEKE key requests.
- `"tags"`:
"""
function create_asset(
    id,
    packagingGroupId,
    sourceArn,
    sourceRoleArn;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return mediapackage_vod(
        "POST",
        "/assets",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "id" => id,
                    "packagingGroupId" => packagingGroupId,
                    "sourceArn" => sourceArn,
                    "sourceRoleArn" => sourceRoleArn,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_packaging_configuration(id, packaging_group_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a new MediaPackage VOD PackagingConfiguration resource.

# Arguments
- `id`: The ID of the PackagingConfiguration.
- `packaging_group_id`: The ID of a PackagingGroup.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"cmaf_package"`:
- `"dash_package"`:
- `"hls_package"`:
- `"mss_package"`:
- `"tags"`:
"""
function create_packaging_configuration(
    id, packagingGroupId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return mediapackage_vod(
        "POST",
        "/packaging_configurations",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("id" => id, "packagingGroupId" => packagingGroupId),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_packaging_group(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a new MediaPackage VOD PackagingGroup resource.

# Arguments
- `id`: The ID of the PackagingGroup.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"authorization"`:
- `"egress_access_logs"`:
- `"tags"`:
"""
function create_packaging_group(
    id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return mediapackage_vod(
        "POST",
        "/packaging_groups",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_asset(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes an existing MediaPackage VOD Asset resource.

# Arguments
- `id`: The ID of the MediaPackage VOD Asset resource to delete.

"""
function delete_asset(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return mediapackage_vod(
        "DELETE",
        "/assets/$(id)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_packaging_configuration(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a MediaPackage VOD PackagingConfiguration resource.

# Arguments
- `id`: The ID of the MediaPackage VOD PackagingConfiguration resource to delete.

"""
function delete_packaging_configuration(
    id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return mediapackage_vod(
        "DELETE",
        "/packaging_configurations/$(id)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_packaging_group(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a MediaPackage VOD PackagingGroup resource.

# Arguments
- `id`: The ID of the MediaPackage VOD PackagingGroup resource to delete.

"""
function delete_packaging_group(
    id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return mediapackage_vod(
        "DELETE",
        "/packaging_groups/$(id)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_asset(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a description of a MediaPackage VOD Asset resource.

# Arguments
- `id`: The ID of an MediaPackage VOD Asset resource.

"""
function describe_asset(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return mediapackage_vod(
        "GET",
        "/assets/$(id)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_packaging_configuration(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a description of a MediaPackage VOD PackagingConfiguration resource.

# Arguments
- `id`: The ID of a MediaPackage VOD PackagingConfiguration resource.

"""
function describe_packaging_configuration(
    id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return mediapackage_vod(
        "GET",
        "/packaging_configurations/$(id)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_packaging_group(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a description of a MediaPackage VOD PackagingGroup resource.

# Arguments
- `id`: The ID of a MediaPackage VOD PackagingGroup resource.

"""
function describe_packaging_group(
    id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return mediapackage_vod(
        "GET",
        "/packaging_groups/$(id)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_assets(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a collection of MediaPackage VOD Asset resources.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`: Upper bound on number of records to return.
- `"next_token"`: A token used to resume pagination from the end of a previous request.
- `"packaging_group_id"`: Returns Assets associated with the specified PackagingGroup.
"""
function list_assets(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return mediapackage_vod(
        "GET", "/assets", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_packaging_configurations(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a collection of MediaPackage VOD PackagingConfiguration resources.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`: Upper bound on number of records to return.
- `"next_token"`: A token used to resume pagination from the end of a previous request.
- `"packaging_group_id"`: Returns MediaPackage VOD PackagingConfigurations associated with
  the specified PackagingGroup.
"""
function list_packaging_configurations(;
    aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return mediapackage_vod(
        "GET",
        "/packaging_configurations",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_packaging_groups(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a collection of MediaPackage VOD PackagingGroup resources.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`: Upper bound on number of records to return.
- `"next_token"`: A token used to resume pagination from the end of a previous request.
"""
function list_packaging_groups(;
    aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return mediapackage_vod(
        "GET",
        "/packaging_groups",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_tags_for_resource(resource-arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of the tags assigned to the specified resource.

# Arguments
- `resource-arn`: The Amazon Resource Name (ARN) for the resource. You can get this from
  the response to any request to the resource.

"""
function list_tags_for_resource(
    resource_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return mediapackage_vod(
        "GET",
        "/tags/$(resource-arn)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    tag_resource(resource-arn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds tags to the specified resource. You can specify one or more tags to add.

# Arguments
- `resource-arn`: The Amazon Resource Name (ARN) for the resource. You can get this from
  the response to any request to the resource.
- `tags`: A collection of tags associated with a resource

"""
function tag_resource(
    resource_arn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return mediapackage_vod(
        "POST",
        "/tags/$(resource-arn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("tags" => tags), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    untag_resource(resource-arn, tag_keys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes tags from the specified resource. You can specify one or more tags to remove.

# Arguments
- `resource-arn`: The Amazon Resource Name (ARN) for the resource. You can get this from
  the response to any request to the resource.
- `tag_keys`: A comma-separated list of the tag keys to remove from the resource.

"""
function untag_resource(
    resource_arn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return mediapackage_vod(
        "DELETE",
        "/tags/$(resource-arn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("tagKeys" => tagKeys), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_packaging_group(id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates a specific packaging group. You can't change the id attribute or any other
system-generated attributes.

# Arguments
- `id`: The ID of a MediaPackage VOD PackagingGroup resource.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"authorization"`:
"""
function update_packaging_group(
    id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return mediapackage_vod(
        "PUT",
        "/packaging_groups/$(id)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
