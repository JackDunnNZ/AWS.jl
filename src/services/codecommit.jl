# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: codecommit
using AWS.Compat
using AWS.UUIDs

# Julia syntax for service-level optional parameters to the AWS request syntax
const SERVICE_PARAMETER_MAP = OrderedCollections.LittleDict("repository_description" => "repositoryDescription", "tags" => "tags", "author_name" => "authorName", "commit_message" => "commitMessage", "delete_files" => "deleteFiles", "email" => "email", "keep_empty_folders" => "keepEmptyFolders", "parent_commit_id" => "parentCommitId", "put_files" => "putFiles", "set_file_modes" => "setFileModes", "after_commit_id" => "afterCommitId", "before_commit_id" => "beforeCommitId", "max_results" => "maxResults", "next_token" => "nextToken", "repository_name" => "repositoryName", "actor_arn" => "actorArn", "pull_request_event_type" => "pullRequestEventType", "conflict_detail_level" => "conflictDetailLevel", "conflict_resolution" => "conflictResolution", "conflict_resolution_strategy" => "conflictResolutionStrategy", "source_commit_id" => "sourceCommitId", "author_arn" => "authorArn", "pull_request_status" => "pullRequestStatus", "client_request_token" => "clientRequestToken", "file_mode" => "fileMode", "name" => "name", "location" => "location", "description" => "description", "max_conflict_files" => "maxConflictFiles", "commit_specifier" => "commitSpecifier", "reaction_user_arn" => "reactionUserArn", "existing_rule_content_sha256" => "existingRuleContentSha256", "max_merge_hunks" => "maxMergeHunks", "target_branch" => "targetBranch", "file_paths" => "filePaths", "after_path" => "afterPath", "before_commit_specifier" => "beforeCommitSpecifier", "before_path" => "beforePath", "approval_rule_template_description" => "approvalRuleTemplateDescription", "branch_name" => "branchName", "order" => "order", "sort_by" => "sortBy")

"""
    associate_approval_rule_template_with_repository(approval_rule_template_name, repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an association between an approval rule template and a specified repository. Then,
the next time a pull request is created in the repository where the destination reference
(if specified) matches the destination reference (branch) for the pull request, an approval
rule that matches the template conditions is automatically created for that pull request.
If no destination references are specified in the template, an approval rule that matches
the template contents is created for all pull requests in that repository.

# Arguments
- `approval_rule_template_name`: The name for the approval rule template.
- `repository_name`: The name of the repository that you want to associate with the
  template.

"""
function associate_approval_rule_template_with_repository(approvalRuleTemplateName, repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("AssociateApprovalRuleTemplateWithRepository", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("approvalRuleTemplateName"=>approvalRuleTemplateName, "repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    batch_associate_approval_rule_template_with_repositories(approval_rule_template_name, repository_names; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an association between an approval rule template and one or more specified
repositories.

# Arguments
- `approval_rule_template_name`: The name of the template you want to associate with one or
  more repositories.
- `repository_names`: The names of the repositories you want to associate with the
  template.  The length constraint limit is for each string in the array. The array itself
  can be empty.

"""
function batch_associate_approval_rule_template_with_repositories(approvalRuleTemplateName, repositoryNames; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("BatchAssociateApprovalRuleTemplateWithRepositories", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("approvalRuleTemplateName"=>approvalRuleTemplateName, "repositoryNames"=>repositoryNames), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    batch_describe_merge_conflicts(destination_commit_specifier, merge_option, repository_name, source_commit_specifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about one or more merge conflicts in the attempted merge of two commit
specifiers using the squash or three-way merge strategy.

# Arguments
- `destination_commit_specifier`: The branch, tag, HEAD, or other fully qualified reference
  used to identify a commit (for example, a branch name or a full commit ID).
- `merge_option`: The merge option or strategy you want to use to merge the code.
- `repository_name`: The name of the repository that contains the merge conflicts you want
  to review.
- `source_commit_specifier`: The branch, tag, HEAD, or other fully qualified reference used
  to identify a commit (for example, a branch name or a full commit ID).

# Keyword Parameters
- `conflict_detail_level`: The level of conflict detail to use. If unspecified, the default
  FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences
  in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the
  same file in both branches has differences on the same line.
- `conflict_resolution_strategy`: Specifies which branch to use when resolving conflicts,
  or whether to attempt automatically merging two versions of a file. The default is NONE,
  which requires any conflicts to be resolved manually before the merge operation is
  successful.
- `file_paths`: The path of the target files used to describe the conflicts. If not
  specified, the default is all conflict files.
- `max_conflict_files`: The maximum number of files to include in the output.
- `max_merge_hunks`: The maximum number of merge hunks to include in the output.
- `next_token`: An enumeration token that, when provided in a request, returns the next
  batch of the results.
"""
function batch_describe_merge_conflicts(destinationCommitSpecifier, mergeOption, repositoryName, sourceCommitSpecifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("BatchDescribeMergeConflicts", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("destinationCommitSpecifier"=>destinationCommitSpecifier, "mergeOption"=>mergeOption, "repositoryName"=>repositoryName, "sourceCommitSpecifier"=>sourceCommitSpecifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    batch_disassociate_approval_rule_template_from_repositories(approval_rule_template_name, repository_names; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes the association between an approval rule template and one or more specified
repositories.

# Arguments
- `approval_rule_template_name`: The name of the template that you want to disassociate
  from one or more repositories.
- `repository_names`: The repository names that you want to disassociate from the approval
  rule template.  The length constraint limit is for each string in the array. The array
  itself can be empty.

"""
function batch_disassociate_approval_rule_template_from_repositories(approvalRuleTemplateName, repositoryNames; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("BatchDisassociateApprovalRuleTemplateFromRepositories", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("approvalRuleTemplateName"=>approvalRuleTemplateName, "repositoryNames"=>repositoryNames), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    batch_get_commits(commit_ids, repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about the contents of one or more commits in a repository.

# Arguments
- `commit_ids`: The full commit IDs of the commits to get information about.  You must
  supply the full SHA IDs of each commit. You cannot use shortened SHA IDs.
- `repository_name`: The name of the repository that contains the commits.

"""
function batch_get_commits(commitIds, repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("BatchGetCommits", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("commitIds"=>commitIds, "repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    batch_get_repositories(repository_names; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about one or more repositories.  The description field for a repository
accepts all HTML characters and all valid Unicode characters. Applications that do not
HTML-encode the description and display it in a webpage can expose users to potentially
malicious code. Make sure that you HTML-encode the description field in any application
that uses this API to display the repository description on a webpage.

# Arguments
- `repository_names`: The names of the repositories to get information about.  The length
  constraint limit is for each string in the array. The array itself can be empty.

"""
function batch_get_repositories(repositoryNames; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("BatchGetRepositories", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("repositoryNames"=>repositoryNames), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_approval_rule_template(approval_rule_template_content, approval_rule_template_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a template for approval rules that can then be associated with one or more
repositories in your AWS account. When you associate a template with a repository, AWS
CodeCommit creates an approval rule that matches the conditions of the template for all
pull requests that meet the conditions of the template. For more information, see
AssociateApprovalRuleTemplateWithRepository.

# Arguments
- `approval_rule_template_content`: The content of the approval rule that is created on
  pull requests in associated repositories. If you specify one or more destination references
  (branches), approval rules are created in an associated repository only if their
  destination references (branches) match those specified in the template.  When you create
  the content of the approval rule template, you can specify approvers in an approval pool in
  one of two ways:    CodeCommitApprovers: This option only requires an AWS account and a
  resource. It can be used for both IAM users and federated access users whose name matches
  the provided resource name. This is a very powerful option that offers a great deal of
  flexibility. For example, if you specify the AWS account 123456789012 and Mary_Major, all
  of the following are counted as approvals coming from that user:   An IAM user in the
  account (arn:aws:iam::123456789012:user/Mary_Major)   A federated user identified in IAM as
  Mary_Major (arn:aws:sts::123456789012:federated-user/Mary_Major)   This option does not
  recognize an active session of someone assuming the role of CodeCommitReview with a role
  session name of Mary_Major
  (arn:aws:sts::123456789012:assumed-role/CodeCommitReview/Mary_Major) unless you include a
  wildcard (*Mary_Major).    Fully qualified ARN: This option allows you to specify the fully
  qualified Amazon Resource Name (ARN) of the IAM user or role.    For more information about
  IAM ARNs, wildcards, and formats, see IAM Identifiers in the IAM User Guide.
- `approval_rule_template_name`: The name of the approval rule template. Provide
  descriptive names, because this name is applied to the approval rules created automatically
  in associated repositories.

# Keyword Parameters
- `approval_rule_template_description`: The description of the approval rule template.
  Consider providing a description that explains what this template does and when it might be
  appropriate to associate it with repositories.
"""
function create_approval_rule_template(approvalRuleTemplateContent, approvalRuleTemplateName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("CreateApprovalRuleTemplate", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("approvalRuleTemplateContent"=>approvalRuleTemplateContent, "approvalRuleTemplateName"=>approvalRuleTemplateName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_branch(branch_name, commit_id, repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a branch in a repository and points the branch to a commit.  Calling the create
branch operation does not set a repository's default branch. To do this, call the update
default branch operation.

# Arguments
- `branch_name`: The name of the new branch to create.
- `commit_id`: The ID of the commit to point the new branch to.
- `repository_name`: The name of the repository in which you want to create the new branch.

"""
function create_branch(branchName, commitId, repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("CreateBranch", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("branchName"=>branchName, "commitId"=>commitId, "repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_commit(branch_name, repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a commit for a repository on the tip of a specified branch.

# Arguments
- `branch_name`: The name of the branch where you create the commit.
- `repository_name`: The name of the repository where you create the commit.

# Keyword Parameters
- `author_name`: The name of the author who created the commit. This information is used as
  both the author and committer for the commit.
- `commit_message`: The commit message you want to include in the commit. Commit messages
  are limited to 256 KB. If no message is specified, a default message is used.
- `delete_files`: The files to delete in this commit. These files still exist in earlier
  commits.
- `email`: The email address of the person who created the commit.
- `keep_empty_folders`: If the commit contains deletions, whether to keep a folder or
  folder structure if the changes leave the folders empty. If true, a ..gitkeep file is
  created for empty folders. The default is false.
- `parent_commit_id`: The ID of the commit that is the parent of the commit you create. Not
  required if this is an empty repository.
- `put_files`: The files to add or update in this commit.
- `set_file_modes`: The file modes to update for files in this commit.
"""
function create_commit(branchName, repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("CreateCommit", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("branchName"=>branchName, "repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_pull_request(targets, title; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a pull request in the specified repository.

# Arguments
- `targets`: The targets for the pull request, including the source of the code to be
  reviewed (the source branch) and the destination where the creator of the pull request
  intends the code to be merged after the pull request is closed (the destination branch).
- `title`: The title of the pull request. This title is used to identify the pull request
  to other users in the repository.

# Keyword Parameters
- `client_request_token`: A unique, client-generated idempotency token that, when provided
  in a request, ensures the request cannot be repeated with a changed parameter. If a request
  is received with the same parameters and a token is included, the request returns
  information about the initial request that used that token.  The AWS SDKs prepopulate
  client request tokens. If you are using an AWS SDK, an idempotency token is created for
  you.
- `description`: A description of the pull request.
"""
function create_pull_request(targets, title; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("CreatePullRequest", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("targets"=>targets, "title"=>title, "client_request_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_pull_request_approval_rule(approval_rule_content, approval_rule_name, pull_request_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an approval rule for a pull request.

# Arguments
- `approval_rule_content`: The content of the approval rule, including the number of
  approvals needed and the structure of an approval pool defined for approvals, if any. For
  more information about approval pools, see the AWS CodeCommit User Guide.  When you create
  the content of the approval rule, you can specify approvers in an approval pool in one of
  two ways:    CodeCommitApprovers: This option only requires an AWS account and a resource.
  It can be used for both IAM users and federated access users whose name matches the
  provided resource name. This is a very powerful option that offers a great deal of
  flexibility. For example, if you specify the AWS account 123456789012 and Mary_Major, all
  of the following would be counted as approvals coming from that user:   An IAM user in the
  account (arn:aws:iam::123456789012:user/Mary_Major)   A federated user identified in IAM as
  Mary_Major (arn:aws:sts::123456789012:federated-user/Mary_Major)   This option does not
  recognize an active session of someone assuming the role of CodeCommitReview with a role
  session name of Mary_Major
  (arn:aws:sts::123456789012:assumed-role/CodeCommitReview/Mary_Major) unless you include a
  wildcard (*Mary_Major).    Fully qualified ARN: This option allows you to specify the fully
  qualified Amazon Resource Name (ARN) of the IAM user or role.    For more information about
  IAM ARNs, wildcards, and formats, see IAM Identifiers in the IAM User Guide.
- `approval_rule_name`: The name for the approval rule.
- `pull_request_id`: The system-generated ID of the pull request for which you want to
  create the approval rule.

"""
function create_pull_request_approval_rule(approvalRuleContent, approvalRuleName, pullRequestId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("CreatePullRequestApprovalRule", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("approvalRuleContent"=>approvalRuleContent, "approvalRuleName"=>approvalRuleName, "pullRequestId"=>pullRequestId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_repository(repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a new, empty repository.

# Arguments
- `repository_name`: The name of the new repository to be created.  The repository name
  must be unique across the calling AWS account. Repository names are limited to 100
  alphanumeric, dash, and underscore characters, and cannot include certain characters. For
  more information about the limits on repository names, see Limits in the AWS CodeCommit
  User Guide. The suffix .git is prohibited.

# Keyword Parameters
- `repository_description`: A comment or description about the new repository.  The
  description field for a repository accepts all HTML characters and all valid Unicode
  characters. Applications that do not HTML-encode the description and display it in a
  webpage can expose users to potentially malicious code. Make sure that you HTML-encode the
  description field in any application that uses this API to display the repository
  description on a webpage.
- `tags`: One or more tag key-value pairs to use when tagging this repository.
"""
function create_repository(repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("CreateRepository", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_unreferenced_merge_commit(destination_commit_specifier, merge_option, repository_name, source_commit_specifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an unreferenced commit that represents the result of merging two branches using a
specified merge strategy. This can help you determine the outcome of a potential merge.
This API cannot be used with the fast-forward merge strategy because that strategy does not
create a merge commit.  This unreferenced merge commit can only be accessed using the
GetCommit API or through git commands such as git fetch. To retrieve this commit, you must
specify its commit ID or otherwise reference it.

# Arguments
- `destination_commit_specifier`: The branch, tag, HEAD, or other fully qualified reference
  used to identify a commit (for example, a branch name or a full commit ID).
- `merge_option`: The merge option or strategy you want to use to merge the code.
- `repository_name`: The name of the repository where you want to create the unreferenced
  merge commit.
- `source_commit_specifier`: The branch, tag, HEAD, or other fully qualified reference used
  to identify a commit (for example, a branch name or a full commit ID).

# Keyword Parameters
- `author_name`: The name of the author who created the unreferenced commit. This
  information is used as both the author and committer for the commit.
- `commit_message`: The commit message for the unreferenced commit.
- `conflict_detail_level`: The level of conflict detail to use. If unspecified, the default
  FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences
  in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the
  same file in both branches has differences on the same line.
- `conflict_resolution`: If AUTOMERGE is the conflict resolution strategy, a list of inputs
  to use when resolving conflicts during a merge.
- `conflict_resolution_strategy`: Specifies which branch to use when resolving conflicts,
  or whether to attempt automatically merging two versions of a file. The default is NONE,
  which requires any conflicts to be resolved manually before the merge operation is
  successful.
- `email`: The email address for the person who created the unreferenced commit.
- `keep_empty_folders`: If the commit contains deletions, whether to keep a folder or
  folder structure if the changes leave the folders empty. If this is specified as true, a
  .gitkeep file is created for empty folders. The default is false.
"""
function create_unreferenced_merge_commit(destinationCommitSpecifier, mergeOption, repositoryName, sourceCommitSpecifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("CreateUnreferencedMergeCommit", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("destinationCommitSpecifier"=>destinationCommitSpecifier, "mergeOption"=>mergeOption, "repositoryName"=>repositoryName, "sourceCommitSpecifier"=>sourceCommitSpecifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_approval_rule_template(approval_rule_template_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a specified approval rule template. Deleting a template does not remove approval
rules on pull requests already created with the template.

# Arguments
- `approval_rule_template_name`: The name of the approval rule template to delete.

"""
function delete_approval_rule_template(approvalRuleTemplateName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("DeleteApprovalRuleTemplate", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("approvalRuleTemplateName"=>approvalRuleTemplateName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_branch(branch_name, repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a branch from a repository, unless that branch is the default branch for the
repository.

# Arguments
- `branch_name`: The name of the branch to delete.
- `repository_name`: The name of the repository that contains the branch to be deleted.

"""
function delete_branch(branchName, repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("DeleteBranch", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("branchName"=>branchName, "repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_comment_content(comment_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the content of a comment made on a change, file, or commit in a repository.

# Arguments
- `comment_id`: The unique, system-generated ID of the comment. To get this ID, use
  GetCommentsForComparedCommit or GetCommentsForPullRequest.

"""
function delete_comment_content(commentId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("DeleteCommentContent", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("commentId"=>commentId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_file(branch_name, file_path, parent_commit_id, repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a specified file from a specified branch. A commit is created on the branch that
contains the revision. The file still exists in the commits earlier to the commit that
contains the deletion.

# Arguments
- `branch_name`: The name of the branch where the commit that deletes the file is made.
- `file_path`: The fully qualified path to the file that to be deleted, including the full
  name and extension of that file. For example, /examples/file.md is a fully qualified path
  to a file named file.md in a folder named examples.
- `parent_commit_id`: The ID of the commit that is the tip of the branch where you want to
  create the commit that deletes the file. This must be the HEAD commit for the branch. The
  commit that deletes the file is created from this commit ID.
- `repository_name`: The name of the repository that contains the file to delete.

# Keyword Parameters
- `commit_message`: The commit message you want to include as part of deleting the file.
  Commit messages are limited to 256 KB. If no message is specified, a default message is
  used.
- `email`: The email address for the commit that deletes the file. If no email address is
  specified, the email address is left blank.
- `keep_empty_folders`: If a file is the only object in the folder or directory, specifies
  whether to delete the folder or directory that contains the file. By default, empty folders
  are deleted. This includes empty folders that are part of the directory structure. For
  example, if the path to a file is dir1/dir2/dir3/dir4, and dir2 and dir3 are empty,
  deleting the last file in dir4 also deletes the empty folders dir4, dir3, and dir2.
- `name`: The name of the author of the commit that deletes the file. If no name is
  specified, the user's ARN is used as the author name and committer name.
"""
function delete_file(branchName, filePath, parentCommitId, repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("DeleteFile", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("branchName"=>branchName, "filePath"=>filePath, "parentCommitId"=>parentCommitId, "repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_pull_request_approval_rule(approval_rule_name, pull_request_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes an approval rule from a specified pull request. Approval rules can be deleted from
a pull request only if the pull request is open, and if the approval rule was created
specifically for a pull request and not generated from an approval rule template associated
with the repository where the pull request was created. You cannot delete an approval rule
from a merged or closed pull request.

# Arguments
- `approval_rule_name`: The name of the approval rule you want to delete.
- `pull_request_id`: The system-generated ID of the pull request that contains the approval
  rule you want to delete.

"""
function delete_pull_request_approval_rule(approvalRuleName, pullRequestId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("DeletePullRequestApprovalRule", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("approvalRuleName"=>approvalRuleName, "pullRequestId"=>pullRequestId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_repository(repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a repository. If a specified repository was already deleted, a null repository ID
is returned.  Deleting a repository also deletes all associated objects and metadata. After
a repository is deleted, all future push calls to the deleted repository fail.

# Arguments
- `repository_name`: The name of the repository to delete.

"""
function delete_repository(repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("DeleteRepository", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_merge_conflicts(destination_commit_specifier, file_path, merge_option, repository_name, source_commit_specifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about one or more merge conflicts in the attempted merge of two commit
specifiers using the squash or three-way merge strategy. If the merge option for the
attempted merge is specified as FAST_FORWARD_MERGE, an exception is thrown.

# Arguments
- `destination_commit_specifier`: The branch, tag, HEAD, or other fully qualified reference
  used to identify a commit (for example, a branch name or a full commit ID).
- `file_path`: The path of the target files used to describe the conflicts.
- `merge_option`: The merge option or strategy you want to use to merge the code.
- `repository_name`: The name of the repository where you want to get information about a
  merge conflict.
- `source_commit_specifier`: The branch, tag, HEAD, or other fully qualified reference used
  to identify a commit (for example, a branch name or a full commit ID).

# Keyword Parameters
- `conflict_detail_level`: The level of conflict detail to use. If unspecified, the default
  FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences
  in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the
  same file in both branches has differences on the same line.
- `conflict_resolution_strategy`: Specifies which branch to use when resolving conflicts,
  or whether to attempt automatically merging two versions of a file. The default is NONE,
  which requires any conflicts to be resolved manually before the merge operation is
  successful.
- `max_merge_hunks`: The maximum number of merge hunks to include in the output.
- `next_token`: An enumeration token that, when provided in a request, returns the next
  batch of the results.
"""
function describe_merge_conflicts(destinationCommitSpecifier, filePath, mergeOption, repositoryName, sourceCommitSpecifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("DescribeMergeConflicts", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("destinationCommitSpecifier"=>destinationCommitSpecifier, "filePath"=>filePath, "mergeOption"=>mergeOption, "repositoryName"=>repositoryName, "sourceCommitSpecifier"=>sourceCommitSpecifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_pull_request_events(pull_request_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about one or more pull request events.

# Arguments
- `pull_request_id`: The system-generated ID of the pull request. To get this ID, use
  ListPullRequests.

# Keyword Parameters
- `actor_arn`: The Amazon Resource Name (ARN) of the user whose actions resulted in the
  event. Examples include updating the pull request with more commits or changing the status
  of a pull request.
- `max_results`: A non-zero, non-negative integer used to limit the number of returned
  results. The default is 100 events, which is also the maximum number of events that can be
  returned in a result.
- `next_token`: An enumeration token that, when provided in a request, returns the next
  batch of the results.
- `pull_request_event_type`: Optional. The pull request event type about which you want to
  return information.
"""
function describe_pull_request_events(pullRequestId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("DescribePullRequestEvents", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("pullRequestId"=>pullRequestId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    disassociate_approval_rule_template_from_repository(approval_rule_template_name, repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes the association between a template and a repository so that approval rules based on
the template are not automatically created when pull requests are created in the specified
repository. This does not delete any approval rules previously created for pull requests
through the template association.

# Arguments
- `approval_rule_template_name`: The name of the approval rule template to disassociate
  from a specified repository.
- `repository_name`: The name of the repository you want to disassociate from the template.

"""
function disassociate_approval_rule_template_from_repository(approvalRuleTemplateName, repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("DisassociateApprovalRuleTemplateFromRepository", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("approvalRuleTemplateName"=>approvalRuleTemplateName, "repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    evaluate_pull_request_approval_rules(pull_request_id, revision_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Evaluates whether a pull request has met all the conditions specified in its associated
approval rules.

# Arguments
- `pull_request_id`: The system-generated ID of the pull request you want to evaluate.
- `revision_id`: The system-generated ID for the pull request revision. To retrieve the
  most recent revision ID for a pull request, use GetPullRequest.

"""
function evaluate_pull_request_approval_rules(pullRequestId, revisionId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("EvaluatePullRequestApprovalRules", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("pullRequestId"=>pullRequestId, "revisionId"=>revisionId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_approval_rule_template(approval_rule_template_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about a specified approval rule template.

# Arguments
- `approval_rule_template_name`: The name of the approval rule template for which you want
  to get information.

"""
function get_approval_rule_template(approvalRuleTemplateName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("GetApprovalRuleTemplate", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("approvalRuleTemplateName"=>approvalRuleTemplateName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_blob(blob_id, repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns the base-64 encoded content of an individual blob in a repository.

# Arguments
- `blob_id`: The ID of the blob, which is its SHA-1 pointer.
- `repository_name`: The name of the repository that contains the blob.

"""
function get_blob(blobId, repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("GetBlob", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("blobId"=>blobId, "repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_branch(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about a repository branch, including its name and the last commit ID.

# Keyword Parameters
- `branch_name`: The name of the branch for which you want to retrieve information.
- `repository_name`: The name of the repository that contains the branch for which you want
  to retrieve information.
"""
function get_branch(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("GetBranch", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_comment(comment_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns the content of a comment made on a change, file, or commit in a repository.
Reaction counts might include numbers from user identities who were deleted after the
reaction was made. For a count of reactions from active identities, use
GetCommentReactions.

# Arguments
- `comment_id`: The unique, system-generated ID of the comment. To get this ID, use
  GetCommentsForComparedCommit or GetCommentsForPullRequest.

"""
function get_comment(commentId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("GetComment", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("commentId"=>commentId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_comment_reactions(comment_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about reactions to a specified comment ID. Reactions from users who
have been deleted will not be included in the count.

# Arguments
- `comment_id`: The ID of the comment for which you want to get reactions information.

# Keyword Parameters
- `max_results`: A non-zero, non-negative integer used to limit the number of returned
  results. The default is the same as the allowed maximum, 1,000.
- `next_token`: An enumeration token that, when provided in a request, returns the next
  batch of the results.
- `reaction_user_arn`: Optional. The Amazon Resource Name (ARN) of the user or identity for
  which you want to get reaction information.
"""
function get_comment_reactions(commentId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("GetCommentReactions", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("commentId"=>commentId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_comments_for_compared_commit(after_commit_id, repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about comments made on the comparison between two commits.  Reaction
counts might include numbers from user identities who were deleted after the reaction was
made. For a count of reactions from active identities, use GetCommentReactions.

# Arguments
- `after_commit_id`: To establish the directionality of the comparison, the full commit ID
  of the after commit.
- `repository_name`: The name of the repository where you want to compare commits.

# Keyword Parameters
- `before_commit_id`: To establish the directionality of the comparison, the full commit ID
  of the before commit.
- `max_results`: A non-zero, non-negative integer used to limit the number of returned
  results. The default is 100 comments, but you can configure up to 500.
- `next_token`: An enumeration token that when provided in a request, returns the next
  batch of the results.
"""
function get_comments_for_compared_commit(afterCommitId, repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("GetCommentsForComparedCommit", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("afterCommitId"=>afterCommitId, "repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_comments_for_pull_request(pull_request_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns comments made on a pull request.  Reaction counts might include numbers from user
identities who were deleted after the reaction was made. For a count of reactions from
active identities, use GetCommentReactions.

# Arguments
- `pull_request_id`: The system-generated ID of the pull request. To get this ID, use
  ListPullRequests.

# Keyword Parameters
- `after_commit_id`: The full commit ID of the commit in the source branch that was the tip
  of the branch at the time the comment was made.
- `before_commit_id`: The full commit ID of the commit in the destination branch that was
  the tip of the branch at the time the pull request was created.
- `max_results`: A non-zero, non-negative integer used to limit the number of returned
  results. The default is 100 comments. You can return up to 500 comments with a single
  request.
- `next_token`: An enumeration token that, when provided in a request, returns the next
  batch of the results.
- `repository_name`: The name of the repository that contains the pull request.
"""
function get_comments_for_pull_request(pullRequestId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("GetCommentsForPullRequest", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("pullRequestId"=>pullRequestId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_commit(commit_id, repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about a commit, including commit message and committer information.

# Arguments
- `commit_id`: The commit ID. Commit IDs are the full SHA ID of the commit.
- `repository_name`: The name of the repository to which the commit was made.

"""
function get_commit(commitId, repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("GetCommit", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("commitId"=>commitId, "repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_differences(after_commit_specifier, repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about the differences in a valid commit specifier (such as a branch,
tag, HEAD, commit ID, or other fully qualified reference). Results can be limited to a
specified path.

# Arguments
- `after_commit_specifier`: The branch, tag, HEAD, or other fully qualified reference used
  to identify a commit.
- `repository_name`: The name of the repository where you want to get differences.

# Keyword Parameters
- `after_path`: The file path in which to check differences. Limits the results to this
  path. Can also be used to specify the changed name of a directory or folder, if it has
  changed. If not specified, differences are shown for all paths.
- `before_commit_specifier`: The branch, tag, HEAD, or other fully qualified reference used
  to identify a commit (for example, the full commit ID). Optional. If not specified, all
  changes before the afterCommitSpecifier value are shown. If you do not use
  beforeCommitSpecifier in your request, consider limiting the results with maxResults.
- `before_path`: The file path in which to check for differences. Limits the results to
  this path. Can also be used to specify the previous name of a directory or folder. If
  beforePath and afterPath are not specified, differences are shown for all paths.
- `max_results`: A non-zero, non-negative integer used to limit the number of returned
  results.
- `next_token`: An enumeration token that, when provided in a request, returns the next
  batch of the results.
"""
function get_differences(afterCommitSpecifier, repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("GetDifferences", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("afterCommitSpecifier"=>afterCommitSpecifier, "repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_file(file_path, repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns the base-64 encoded contents of a specified file and its metadata.

# Arguments
- `file_path`: The fully qualified path to the file, including the full name and extension
  of the file. For example, /examples/file.md is the fully qualified path to a file named
  file.md in a folder named examples.
- `repository_name`: The name of the repository that contains the file.

# Keyword Parameters
- `commit_specifier`: The fully quaified reference that identifies the commit that contains
  the file. For example, you can specify a full commit ID, a tag, a branch name, or a
  reference such as refs/heads/master. If none is provided, the head commit is used.
"""
function get_file(filePath, repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("GetFile", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("filePath"=>filePath, "repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_folder(folder_path, repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns the contents of a specified folder in a repository.

# Arguments
- `folder_path`: The fully qualified path to the folder whose contents are returned,
  including the folder name. For example, /examples is a fully-qualified path to a folder
  named examples that was created off of the root directory (/) of a repository.
- `repository_name`: The name of the repository.

# Keyword Parameters
- `commit_specifier`: A fully qualified reference used to identify a commit that contains
  the version of the folder's content to return. A fully qualified reference can be a commit
  ID, branch name, tag, or reference such as HEAD. If no specifier is provided, the folder
  content is returned as it exists in the HEAD commit.
"""
function get_folder(folderPath, repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("GetFolder", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("folderPath"=>folderPath, "repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_merge_commit(destination_commit_specifier, repository_name, source_commit_specifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about a specified merge commit.

# Arguments
- `destination_commit_specifier`: The branch, tag, HEAD, or other fully qualified reference
  used to identify a commit (for example, a branch name or a full commit ID).
- `repository_name`: The name of the repository that contains the merge commit about which
  you want to get information.
- `source_commit_specifier`: The branch, tag, HEAD, or other fully qualified reference used
  to identify a commit (for example, a branch name or a full commit ID).

# Keyword Parameters
- `conflict_detail_level`: The level of conflict detail to use. If unspecified, the default
  FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences
  in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the
  same file in both branches has differences on the same line.
- `conflict_resolution_strategy`: Specifies which branch to use when resolving conflicts,
  or whether to attempt automatically merging two versions of a file. The default is NONE,
  which requires any conflicts to be resolved manually before the merge operation is
  successful.
"""
function get_merge_commit(destinationCommitSpecifier, repositoryName, sourceCommitSpecifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("GetMergeCommit", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("destinationCommitSpecifier"=>destinationCommitSpecifier, "repositoryName"=>repositoryName, "sourceCommitSpecifier"=>sourceCommitSpecifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_merge_conflicts(destination_commit_specifier, merge_option, repository_name, source_commit_specifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about merge conflicts between the before and after commit IDs for a
pull request in a repository.

# Arguments
- `destination_commit_specifier`: The branch, tag, HEAD, or other fully qualified reference
  used to identify a commit (for example, a branch name or a full commit ID).
- `merge_option`: The merge option or strategy you want to use to merge the code.
- `repository_name`: The name of the repository where the pull request was created.
- `source_commit_specifier`: The branch, tag, HEAD, or other fully qualified reference used
  to identify a commit (for example, a branch name or a full commit ID).

# Keyword Parameters
- `conflict_detail_level`: The level of conflict detail to use. If unspecified, the default
  FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences
  in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the
  same file in both branches has differences on the same line.
- `conflict_resolution_strategy`: Specifies which branch to use when resolving conflicts,
  or whether to attempt automatically merging two versions of a file. The default is NONE,
  which requires any conflicts to be resolved manually before the merge operation is
  successful.
- `max_conflict_files`: The maximum number of files to include in the output.
- `next_token`: An enumeration token that, when provided in a request, returns the next
  batch of the results.
"""
function get_merge_conflicts(destinationCommitSpecifier, mergeOption, repositoryName, sourceCommitSpecifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("GetMergeConflicts", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("destinationCommitSpecifier"=>destinationCommitSpecifier, "mergeOption"=>mergeOption, "repositoryName"=>repositoryName, "sourceCommitSpecifier"=>sourceCommitSpecifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_merge_options(destination_commit_specifier, repository_name, source_commit_specifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about the merge options available for merging two specified branches.
For details about why a merge option is not available, use GetMergeConflicts or
DescribeMergeConflicts.

# Arguments
- `destination_commit_specifier`: The branch, tag, HEAD, or other fully qualified reference
  used to identify a commit (for example, a branch name or a full commit ID).
- `repository_name`: The name of the repository that contains the commits about which you
  want to get merge options.
- `source_commit_specifier`: The branch, tag, HEAD, or other fully qualified reference used
  to identify a commit (for example, a branch name or a full commit ID).

# Keyword Parameters
- `conflict_detail_level`: The level of conflict detail to use. If unspecified, the default
  FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences
  in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the
  same file in both branches has differences on the same line.
- `conflict_resolution_strategy`: Specifies which branch to use when resolving conflicts,
  or whether to attempt automatically merging two versions of a file. The default is NONE,
  which requires any conflicts to be resolved manually before the merge operation is
  successful.
"""
function get_merge_options(destinationCommitSpecifier, repositoryName, sourceCommitSpecifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("GetMergeOptions", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("destinationCommitSpecifier"=>destinationCommitSpecifier, "repositoryName"=>repositoryName, "sourceCommitSpecifier"=>sourceCommitSpecifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_pull_request(pull_request_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about a pull request in a specified repository.

# Arguments
- `pull_request_id`: The system-generated ID of the pull request. To get this ID, use
  ListPullRequests.

"""
function get_pull_request(pullRequestId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("GetPullRequest", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("pullRequestId"=>pullRequestId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_pull_request_approval_states(pull_request_id, revision_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about the approval states for a specified pull request. Approval states
only apply to pull requests that have one or more approval rules applied to them.

# Arguments
- `pull_request_id`: The system-generated ID for the pull request.
- `revision_id`: The system-generated ID for the pull request revision.

"""
function get_pull_request_approval_states(pullRequestId, revisionId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("GetPullRequestApprovalStates", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("pullRequestId"=>pullRequestId, "revisionId"=>revisionId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_pull_request_override_state(pull_request_id, revision_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about whether approval rules have been set aside (overridden) for a
pull request, and if so, the Amazon Resource Name (ARN) of the user or identity that
overrode the rules and their requirements for the pull request.

# Arguments
- `pull_request_id`: The ID of the pull request for which you want to get information about
  whether approval rules have been set aside (overridden).
- `revision_id`: The system-generated ID of the revision for the pull request. To retrieve
  the most recent revision ID, use GetPullRequest.

"""
function get_pull_request_override_state(pullRequestId, revisionId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("GetPullRequestOverrideState", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("pullRequestId"=>pullRequestId, "revisionId"=>revisionId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_repository(repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about a repository.  The description field for a repository accepts all
HTML characters and all valid Unicode characters. Applications that do not HTML-encode the
description and display it in a webpage can expose users to potentially malicious code.
Make sure that you HTML-encode the description field in any application that uses this API
to display the repository description on a webpage.

# Arguments
- `repository_name`: The name of the repository to get information about.

"""
function get_repository(repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("GetRepository", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_repository_triggers(repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about triggers configured for a repository.

# Arguments
- `repository_name`: The name of the repository for which the trigger is configured.

"""
function get_repository_triggers(repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("GetRepositoryTriggers", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_approval_rule_templates(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists all approval rule templates in the specified AWS Region in your AWS account. If an
AWS Region is not specified, the AWS Region where you are signed in is used.

# Keyword Parameters
- `max_results`: A non-zero, non-negative integer used to limit the number of returned
  results.
- `next_token`: An enumeration token that, when provided in a request, returns the next
  batch of the results.
"""
function list_approval_rule_templates(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("ListApprovalRuleTemplates", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_associated_approval_rule_templates_for_repository(repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists all approval rule templates that are associated with a specified repository.

# Arguments
- `repository_name`: The name of the repository for which you want to list all associated
  approval rule templates.

# Keyword Parameters
- `max_results`: A non-zero, non-negative integer used to limit the number of returned
  results.
- `next_token`: An enumeration token that, when provided in a request, returns the next
  batch of the results.
"""
function list_associated_approval_rule_templates_for_repository(repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("ListAssociatedApprovalRuleTemplatesForRepository", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_branches(repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about one or more branches in a repository.

# Arguments
- `repository_name`: The name of the repository that contains the branches.

# Keyword Parameters
- `next_token`: An enumeration token that allows the operation to batch the results.
"""
function list_branches(repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("ListBranches", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_pull_requests(repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of pull requests for a specified repository. The return list can be refined
by pull request status or pull request author ARN.

# Arguments
- `repository_name`: The name of the repository for which you want to list pull requests.

# Keyword Parameters
- `author_arn`: Optional. The Amazon Resource Name (ARN) of the user who created the pull
  request. If used, this filters the results to pull requests created by that user.
- `max_results`: A non-zero, non-negative integer used to limit the number of returned
  results.
- `next_token`: An enumeration token that, when provided in a request, returns the next
  batch of the results.
- `pull_request_status`: Optional. The status of the pull request. If used, this refines
  the results to the pull requests that match the specified status.
"""
function list_pull_requests(repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("ListPullRequests", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_repositories(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about one or more repositories.

# Keyword Parameters
- `next_token`: An enumeration token that allows the operation to batch the results of the
  operation. Batch sizes are 1,000 for list repository operations. When the client sends the
  token back to AWS CodeCommit, another page of 1,000 records is retrieved.
- `order`: The order in which to sort the results of a list repositories operation.
- `sort_by`: The criteria used to sort the results of a list repositories operation.
"""
function list_repositories(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("ListRepositories", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_repositories_for_approval_rule_template(approval_rule_template_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists all repositories associated with the specified approval rule template.

# Arguments
- `approval_rule_template_name`: The name of the approval rule template for which you want
  to list repositories that are associated with that template.

# Keyword Parameters
- `max_results`: A non-zero, non-negative integer used to limit the number of returned
  results.
- `next_token`: An enumeration token that, when provided in a request, returns the next
  batch of the results.
"""
function list_repositories_for_approval_rule_template(approvalRuleTemplateName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("ListRepositoriesForApprovalRuleTemplate", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("approvalRuleTemplateName"=>approvalRuleTemplateName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_tags_for_resource(resource_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS
CodeCommit. For a list of valid resources in AWS CodeCommit, see CodeCommit Resources and
Operations in the AWS CodeCommit User Guide.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource for which you want to get
  information about tags, if any.

# Keyword Parameters
- `next_token`: An enumeration token that, when provided in a request, returns the next
  batch of the results.
"""
function list_tags_for_resource(resourceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("ListTagsForResource", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("resourceArn"=>resourceArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    merge_branches_by_fast_forward(destination_commit_specifier, repository_name, source_commit_specifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Merges two branches using the fast-forward merge strategy.

# Arguments
- `destination_commit_specifier`: The branch, tag, HEAD, or other fully qualified reference
  used to identify a commit (for example, a branch name or a full commit ID).
- `repository_name`: The name of the repository where you want to merge two branches.
- `source_commit_specifier`: The branch, tag, HEAD, or other fully qualified reference used
  to identify a commit (for example, a branch name or a full commit ID).

# Keyword Parameters
- `target_branch`: The branch where the merge is applied.
"""
function merge_branches_by_fast_forward(destinationCommitSpecifier, repositoryName, sourceCommitSpecifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("MergeBranchesByFastForward", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("destinationCommitSpecifier"=>destinationCommitSpecifier, "repositoryName"=>repositoryName, "sourceCommitSpecifier"=>sourceCommitSpecifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    merge_branches_by_squash(destination_commit_specifier, repository_name, source_commit_specifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Merges two branches using the squash merge strategy.

# Arguments
- `destination_commit_specifier`: The branch, tag, HEAD, or other fully qualified reference
  used to identify a commit (for example, a branch name or a full commit ID).
- `repository_name`: The name of the repository where you want to merge two branches.
- `source_commit_specifier`: The branch, tag, HEAD, or other fully qualified reference used
  to identify a commit (for example, a branch name or a full commit ID).

# Keyword Parameters
- `author_name`: The name of the author who created the commit. This information is used as
  both the author and committer for the commit.
- `commit_message`: The commit message for the merge.
- `conflict_detail_level`: The level of conflict detail to use. If unspecified, the default
  FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences
  in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the
  same file in both branches has differences on the same line.
- `conflict_resolution`: If AUTOMERGE is the conflict resolution strategy, a list of inputs
  to use when resolving conflicts during a merge.
- `conflict_resolution_strategy`: Specifies which branch to use when resolving conflicts,
  or whether to attempt automatically merging two versions of a file. The default is NONE,
  which requires any conflicts to be resolved manually before the merge operation is
  successful.
- `email`: The email address of the person merging the branches. This information is used
  in the commit information for the merge.
- `keep_empty_folders`: If the commit contains deletions, whether to keep a folder or
  folder structure if the changes leave the folders empty. If this is specified as true, a
  .gitkeep file is created for empty folders. The default is false.
- `target_branch`: The branch where the merge is applied.
"""
function merge_branches_by_squash(destinationCommitSpecifier, repositoryName, sourceCommitSpecifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("MergeBranchesBySquash", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("destinationCommitSpecifier"=>destinationCommitSpecifier, "repositoryName"=>repositoryName, "sourceCommitSpecifier"=>sourceCommitSpecifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    merge_branches_by_three_way(destination_commit_specifier, repository_name, source_commit_specifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Merges two specified branches using the three-way merge strategy.

# Arguments
- `destination_commit_specifier`: The branch, tag, HEAD, or other fully qualified reference
  used to identify a commit (for example, a branch name or a full commit ID).
- `repository_name`: The name of the repository where you want to merge two branches.
- `source_commit_specifier`: The branch, tag, HEAD, or other fully qualified reference used
  to identify a commit (for example, a branch name or a full commit ID).

# Keyword Parameters
- `author_name`: The name of the author who created the commit. This information is used as
  both the author and committer for the commit.
- `commit_message`: The commit message to include in the commit information for the merge.
- `conflict_detail_level`: The level of conflict detail to use. If unspecified, the default
  FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences
  in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the
  same file in both branches has differences on the same line.
- `conflict_resolution`: If AUTOMERGE is the conflict resolution strategy, a list of inputs
  to use when resolving conflicts during a merge.
- `conflict_resolution_strategy`: Specifies which branch to use when resolving conflicts,
  or whether to attempt automatically merging two versions of a file. The default is NONE,
  which requires any conflicts to be resolved manually before the merge operation is
  successful.
- `email`: The email address of the person merging the branches. This information is used
  in the commit information for the merge.
- `keep_empty_folders`: If the commit contains deletions, whether to keep a folder or
  folder structure if the changes leave the folders empty. If true, a .gitkeep file is
  created for empty folders. The default is false.
- `target_branch`: The branch where the merge is applied.
"""
function merge_branches_by_three_way(destinationCommitSpecifier, repositoryName, sourceCommitSpecifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("MergeBranchesByThreeWay", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("destinationCommitSpecifier"=>destinationCommitSpecifier, "repositoryName"=>repositoryName, "sourceCommitSpecifier"=>sourceCommitSpecifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    merge_pull_request_by_fast_forward(pull_request_id, repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Attempts to merge the source commit of a pull request into the specified destination branch
for that pull request at the specified commit using the fast-forward merge strategy. If the
merge is successful, it closes the pull request.

# Arguments
- `pull_request_id`: The system-generated ID of the pull request. To get this ID, use
  ListPullRequests.
- `repository_name`: The name of the repository where the pull request was created.

# Keyword Parameters
- `source_commit_id`: The full commit ID of the original or updated commit in the pull
  request source branch. Pass this value if you want an exception thrown if the current
  commit ID of the tip of the source branch does not match this commit ID.
"""
function merge_pull_request_by_fast_forward(pullRequestId, repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("MergePullRequestByFastForward", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("pullRequestId"=>pullRequestId, "repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    merge_pull_request_by_squash(pull_request_id, repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Attempts to merge the source commit of a pull request into the specified destination branch
for that pull request at the specified commit using the squash merge strategy. If the merge
is successful, it closes the pull request.

# Arguments
- `pull_request_id`: The system-generated ID of the pull request. To get this ID, use
  ListPullRequests.
- `repository_name`: The name of the repository where the pull request was created.

# Keyword Parameters
- `author_name`: The name of the author who created the commit. This information is used as
  both the author and committer for the commit.
- `commit_message`: The commit message to include in the commit information for the merge.
- `conflict_detail_level`: The level of conflict detail to use. If unspecified, the default
  FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences
  in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the
  same file in both branches has differences on the same line.
- `conflict_resolution`: If AUTOMERGE is the conflict resolution strategy, a list of inputs
  to use when resolving conflicts during a merge.
- `conflict_resolution_strategy`: Specifies which branch to use when resolving conflicts,
  or whether to attempt automatically merging two versions of a file. The default is NONE,
  which requires any conflicts to be resolved manually before the merge operation is
  successful.
- `email`: The email address of the person merging the branches. This information is used
  in the commit information for the merge.
- `keep_empty_folders`: If the commit contains deletions, whether to keep a folder or
  folder structure if the changes leave the folders empty. If true, a .gitkeep file is
  created for empty folders. The default is false.
- `source_commit_id`: The full commit ID of the original or updated commit in the pull
  request source branch. Pass this value if you want an exception thrown if the current
  commit ID of the tip of the source branch does not match this commit ID.
"""
function merge_pull_request_by_squash(pullRequestId, repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("MergePullRequestBySquash", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("pullRequestId"=>pullRequestId, "repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    merge_pull_request_by_three_way(pull_request_id, repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Attempts to merge the source commit of a pull request into the specified destination branch
for that pull request at the specified commit using the three-way merge strategy. If the
merge is successful, it closes the pull request.

# Arguments
- `pull_request_id`: The system-generated ID of the pull request. To get this ID, use
  ListPullRequests.
- `repository_name`: The name of the repository where the pull request was created.

# Keyword Parameters
- `author_name`: The name of the author who created the commit. This information is used as
  both the author and committer for the commit.
- `commit_message`: The commit message to include in the commit information for the merge.
- `conflict_detail_level`: The level of conflict detail to use. If unspecified, the default
  FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences
  in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the
  same file in both branches has differences on the same line.
- `conflict_resolution`: If AUTOMERGE is the conflict resolution strategy, a list of inputs
  to use when resolving conflicts during a merge.
- `conflict_resolution_strategy`: Specifies which branch to use when resolving conflicts,
  or whether to attempt automatically merging two versions of a file. The default is NONE,
  which requires any conflicts to be resolved manually before the merge operation is
  successful.
- `email`: The email address of the person merging the branches. This information is used
  in the commit information for the merge.
- `keep_empty_folders`: If the commit contains deletions, whether to keep a folder or
  folder structure if the changes leave the folders empty. If true, a .gitkeep file is
  created for empty folders. The default is false.
- `source_commit_id`: The full commit ID of the original or updated commit in the pull
  request source branch. Pass this value if you want an exception thrown if the current
  commit ID of the tip of the source branch does not match this commit ID.
"""
function merge_pull_request_by_three_way(pullRequestId, repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("MergePullRequestByThreeWay", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("pullRequestId"=>pullRequestId, "repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    override_pull_request_approval_rules(override_status, pull_request_id, revision_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Sets aside (overrides) all approval rule requirements for a specified pull request.

# Arguments
- `override_status`: Whether you want to set aside approval rule requirements for the pull
  request (OVERRIDE) or revoke a previous override and apply approval rule requirements
  (REVOKE). REVOKE status is not stored.
- `pull_request_id`: The system-generated ID of the pull request for which you want to
  override all approval rule requirements. To get this information, use GetPullRequest.
- `revision_id`: The system-generated ID of the most recent revision of the pull request.
  You cannot override approval rules for anything but the most recent revision of a pull
  request. To get the revision ID, use GetPullRequest.

"""
function override_pull_request_approval_rules(overrideStatus, pullRequestId, revisionId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("OverridePullRequestApprovalRules", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("overrideStatus"=>overrideStatus, "pullRequestId"=>pullRequestId, "revisionId"=>revisionId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    post_comment_for_compared_commit(after_commit_id, content, repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Posts a comment on the comparison between two commits.

# Arguments
- `after_commit_id`: To establish the directionality of the comparison, the full commit ID
  of the after commit.
- `content`: The content of the comment you want to make.
- `repository_name`: The name of the repository where you want to post a comment on the
  comparison between commits.

# Keyword Parameters
- `before_commit_id`: To establish the directionality of the comparison, the full commit ID
  of the before commit. Required for commenting on any commit unless that commit is the
  initial commit.
- `client_request_token`: A unique, client-generated idempotency token that, when provided
  in a request, ensures the request cannot be repeated with a changed parameter. If a request
  is received with the same parameters and a token is included, the request returns
  information about the initial request that used that token.
- `location`: The location of the comparison where you want to comment.
"""
function post_comment_for_compared_commit(afterCommitId, content, repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("PostCommentForComparedCommit", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("afterCommitId"=>afterCommitId, "content"=>content, "repositoryName"=>repositoryName, "client_request_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    post_comment_for_pull_request(after_commit_id, before_commit_id, content, pull_request_id, repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Posts a comment on a pull request.

# Arguments
- `after_commit_id`: The full commit ID of the commit in the source branch that is the
  current tip of the branch for the pull request when you post the comment.
- `before_commit_id`: The full commit ID of the commit in the destination branch that was
  the tip of the branch at the time the pull request was created.
- `content`: The content of your comment on the change.
- `pull_request_id`: The system-generated ID of the pull request. To get this ID, use
  ListPullRequests.
- `repository_name`: The name of the repository where you want to post a comment on a pull
  request.

# Keyword Parameters
- `client_request_token`: A unique, client-generated idempotency token that, when provided
  in a request, ensures the request cannot be repeated with a changed parameter. If a request
  is received with the same parameters and a token is included, the request returns
  information about the initial request that used that token.
- `location`: The location of the change where you want to post your comment. If no
  location is provided, the comment is posted as a general comment on the pull request
  difference between the before commit ID and the after commit ID.
"""
function post_comment_for_pull_request(afterCommitId, beforeCommitId, content, pullRequestId, repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("PostCommentForPullRequest", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("afterCommitId"=>afterCommitId, "beforeCommitId"=>beforeCommitId, "content"=>content, "pullRequestId"=>pullRequestId, "repositoryName"=>repositoryName, "client_request_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    post_comment_reply(content, in_reply_to; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Posts a comment in reply to an existing comment on a comparison between commits or a pull
request.

# Arguments
- `content`: The contents of your reply to a comment.
- `in_reply_to`: The system-generated ID of the comment to which you want to reply. To get
  this ID, use GetCommentsForComparedCommit or GetCommentsForPullRequest.

# Keyword Parameters
- `client_request_token`: A unique, client-generated idempotency token that, when provided
  in a request, ensures the request cannot be repeated with a changed parameter. If a request
  is received with the same parameters and a token is included, the request returns
  information about the initial request that used that token.
"""
function post_comment_reply(content, inReplyTo; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("PostCommentReply", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("content"=>content, "inReplyTo"=>inReplyTo, "client_request_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    put_comment_reaction(comment_id, reaction_value; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds or updates a reaction to a specified comment for the user whose identity is used to
make the request. You can only add or update a reaction for yourself. You cannot add,
modify, or delete a reaction for another user.

# Arguments
- `comment_id`: The ID of the comment to which you want to add or update a reaction.
- `reaction_value`: The emoji reaction you want to add or update. To remove a reaction,
  provide a value of blank or null. You can also provide the value of none. For information
  about emoji reaction values supported in AWS CodeCommit, see the AWS CodeCommit User Guide.

"""
function put_comment_reaction(commentId, reactionValue; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("PutCommentReaction", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("commentId"=>commentId, "reactionValue"=>reactionValue), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    put_file(branch_name, file_content, file_path, repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds or updates a file in a branch in an AWS CodeCommit repository, and generates a commit
for the addition in the specified branch.

# Arguments
- `branch_name`: The name of the branch where you want to add or update the file. If this
  is an empty repository, this branch is created.
- `file_content`: The content of the file, in binary object format.
- `file_path`: The name of the file you want to add or update, including the relative path
  to the file in the repository.  If the path does not currently exist in the repository, the
  path is created as part of adding the file.
- `repository_name`: The name of the repository where you want to add or update the file.

# Keyword Parameters
- `commit_message`: A message about why this file was added or updated. Although it is
  optional, a message makes the commit history for your repository more useful.
- `email`: An email address for the person adding or updating the file.
- `file_mode`: The file mode permissions of the blob. Valid file mode permissions are
  listed here.
- `name`: The name of the person adding or updating the file. Although it is optional, a
  name makes the commit history for your repository more useful.
- `parent_commit_id`: The full commit ID of the head commit in the branch where you want to
  add or update the file. If this is an empty repository, no commit ID is required. If this
  is not an empty repository, a commit ID is required.  The commit ID must match the ID of
  the head commit at the time of the operation. Otherwise, an error occurs, and the file is
  not added or updated.
"""
function put_file(branchName, fileContent, filePath, repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("PutFile", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("branchName"=>branchName, "fileContent"=>fileContent, "filePath"=>filePath, "repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    put_repository_triggers(repository_name, triggers; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Replaces all triggers for a repository. Used to create or delete triggers.

# Arguments
- `repository_name`: The name of the repository where you want to create or update the
  trigger.
- `triggers`: The JSON block of configuration information for each trigger.

"""
function put_repository_triggers(repositoryName, triggers; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("PutRepositoryTriggers", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("repositoryName"=>repositoryName, "triggers"=>triggers), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    tag_resource(resource_arn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds or updates tags for a resource in AWS CodeCommit. For a list of valid resources in AWS
CodeCommit, see CodeCommit Resources and Operations in the AWS CodeCommit User Guide.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource to which you want to add
  or update tags.
- `tags`: The key-value pair to use when tagging this repository.

"""
function tag_resource(resourceArn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("TagResource", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("resourceArn"=>resourceArn, "tags"=>tags), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    test_repository_triggers(repository_name, triggers; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Tests the functionality of repository triggers by sending information to the trigger
target. If real data is available in the repository, the test sends data from the last
commit. If no data is available, sample data is generated.

# Arguments
- `repository_name`: The name of the repository in which to test the triggers.
- `triggers`: The list of triggers to test.

"""
function test_repository_triggers(repositoryName, triggers; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("TestRepositoryTriggers", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("repositoryName"=>repositoryName, "triggers"=>triggers), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    untag_resource(resource_arn, tag_keys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes tags for a resource in AWS CodeCommit. For a list of valid resources in AWS
CodeCommit, see CodeCommit Resources and Operations in the AWS CodeCommit User Guide.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource to which you want to
  remove tags.
- `tag_keys`: The tag key for each tag that you want to remove from the resource.

"""
function untag_resource(resourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("UntagResource", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("resourceArn"=>resourceArn, "tagKeys"=>tagKeys), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_approval_rule_template_content(approval_rule_template_name, new_rule_content; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the content of an approval rule template. You can change the number of required
approvals, the membership of the approval rule, and whether an approval pool is defined.

# Arguments
- `approval_rule_template_name`: The name of the approval rule template where you want to
  update the content of the rule.
- `new_rule_content`: The content that replaces the existing content of the rule. Content
  statements must be complete. You cannot provide only the changes.

# Keyword Parameters
- `existing_rule_content_sha256`: The SHA-256 hash signature for the content of the
  approval rule. You can retrieve this information by using GetPullRequest.
"""
function update_approval_rule_template_content(approvalRuleTemplateName, newRuleContent; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("UpdateApprovalRuleTemplateContent", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("approvalRuleTemplateName"=>approvalRuleTemplateName, "newRuleContent"=>newRuleContent), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_approval_rule_template_description(approval_rule_template_description, approval_rule_template_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the description for a specified approval rule template.

# Arguments
- `approval_rule_template_description`: The updated description of the approval rule
  template.
- `approval_rule_template_name`: The name of the template for which you want to update the
  description.

"""
function update_approval_rule_template_description(approvalRuleTemplateDescription, approvalRuleTemplateName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("UpdateApprovalRuleTemplateDescription", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("approvalRuleTemplateDescription"=>approvalRuleTemplateDescription, "approvalRuleTemplateName"=>approvalRuleTemplateName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_approval_rule_template_name(new_approval_rule_template_name, old_approval_rule_template_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the name of a specified approval rule template.

# Arguments
- `new_approval_rule_template_name`: The new name you want to apply to the approval rule
  template.
- `old_approval_rule_template_name`: The current name of the approval rule template.

"""
function update_approval_rule_template_name(newApprovalRuleTemplateName, oldApprovalRuleTemplateName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("UpdateApprovalRuleTemplateName", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("newApprovalRuleTemplateName"=>newApprovalRuleTemplateName, "oldApprovalRuleTemplateName"=>oldApprovalRuleTemplateName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_comment(comment_id, content; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Replaces the contents of a comment.

# Arguments
- `comment_id`: The system-generated ID of the comment you want to update. To get this ID,
  use GetCommentsForComparedCommit or GetCommentsForPullRequest.
- `content`: The updated content to replace the existing content of the comment.

"""
function update_comment(commentId, content; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("UpdateComment", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("commentId"=>commentId, "content"=>content), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_default_branch(default_branch_name, repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Sets or changes the default branch name for the specified repository.  If you use this
operation to change the default branch name to the current default branch name, a success
message is returned even though the default branch did not change.

# Arguments
- `default_branch_name`: The name of the branch to set as the default.
- `repository_name`: The name of the repository to set or change the default branch for.

"""
function update_default_branch(defaultBranchName, repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("UpdateDefaultBranch", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("defaultBranchName"=>defaultBranchName, "repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_pull_request_approval_rule_content(approval_rule_name, new_rule_content, pull_request_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the structure of an approval rule created specifically for a pull request. For
example, you can change the number of required approvers and the approval pool for
approvers.

# Arguments
- `approval_rule_name`: The name of the approval rule you want to update.
- `new_rule_content`: The updated content for the approval rule.  When you update the
  content of the approval rule, you can specify approvers in an approval pool in one of two
  ways:    CodeCommitApprovers: This option only requires an AWS account and a resource. It
  can be used for both IAM users and federated access users whose name matches the provided
  resource name. This is a very powerful option that offers a great deal of flexibility. For
  example, if you specify the AWS account 123456789012 and Mary_Major, all of the following
  are counted as approvals coming from that user:   An IAM user in the account
  (arn:aws:iam::123456789012:user/Mary_Major)   A federated user identified in IAM as
  Mary_Major (arn:aws:sts::123456789012:federated-user/Mary_Major)   This option does not
  recognize an active session of someone assuming the role of CodeCommitReview with a role
  session name of Mary_Major
  (arn:aws:sts::123456789012:assumed-role/CodeCommitReview/Mary_Major) unless you include a
  wildcard (*Mary_Major).    Fully qualified ARN: This option allows you to specify the fully
  qualified Amazon Resource Name (ARN) of the IAM user or role.    For more information about
  IAM ARNs, wildcards, and formats, see IAM Identifiers in the IAM User Guide.
- `pull_request_id`: The system-generated ID of the pull request.

# Keyword Parameters
- `existing_rule_content_sha256`: The SHA-256 hash signature for the content of the
  approval rule. You can retrieve this information by using GetPullRequest.
"""
function update_pull_request_approval_rule_content(approvalRuleName, newRuleContent, pullRequestId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("UpdatePullRequestApprovalRuleContent", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("approvalRuleName"=>approvalRuleName, "newRuleContent"=>newRuleContent, "pullRequestId"=>pullRequestId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_pull_request_approval_state(approval_state, pull_request_id, revision_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the state of a user's approval on a pull request. The user is derived from the
signed-in account when the request is made.

# Arguments
- `approval_state`: The approval state to associate with the user on the pull request.
- `pull_request_id`: The system-generated ID of the pull request.
- `revision_id`: The system-generated ID of the revision.

"""
function update_pull_request_approval_state(approvalState, pullRequestId, revisionId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("UpdatePullRequestApprovalState", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("approvalState"=>approvalState, "pullRequestId"=>pullRequestId, "revisionId"=>revisionId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_pull_request_description(description, pull_request_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Replaces the contents of the description of a pull request.

# Arguments
- `description`: The updated content of the description for the pull request. This content
  replaces the existing description.
- `pull_request_id`: The system-generated ID of the pull request. To get this ID, use
  ListPullRequests.

"""
function update_pull_request_description(description, pullRequestId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("UpdatePullRequestDescription", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("description"=>description, "pullRequestId"=>pullRequestId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_pull_request_status(pull_request_id, pull_request_status; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the status of a pull request.

# Arguments
- `pull_request_id`: The system-generated ID of the pull request. To get this ID, use
  ListPullRequests.
- `pull_request_status`: The status of the pull request. The only valid operations are to
  update the status from OPEN to OPEN, OPEN to CLOSED or from CLOSED to CLOSED.

"""
function update_pull_request_status(pullRequestId, pullRequestStatus; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("UpdatePullRequestStatus", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("pullRequestId"=>pullRequestId, "pullRequestStatus"=>pullRequestStatus), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_pull_request_title(pull_request_id, title; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Replaces the title of a pull request.

# Arguments
- `pull_request_id`: The system-generated ID of the pull request. To get this ID, use
  ListPullRequests.
- `title`: The updated title of the pull request. This replaces the existing title.

"""
function update_pull_request_title(pullRequestId, title; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("UpdatePullRequestTitle", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("pullRequestId"=>pullRequestId, "title"=>title), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_repository_description(repository_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Sets or changes the comment or description for a repository.  The description field for a
repository accepts all HTML characters and all valid Unicode characters. Applications that
do not HTML-encode the description and display it in a webpage can expose users to
potentially malicious code. Make sure that you HTML-encode the description field in any
application that uses this API to display the repository description on a webpage.

# Arguments
- `repository_name`: The name of the repository to set or change the comment or description
  for.

# Keyword Parameters
- `repository_description`: The new comment or description for the specified repository.
  Repository descriptions are limited to 1,000 characters.
"""
function update_repository_description(repositoryName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("UpdateRepositoryDescription", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("repositoryName"=>repositoryName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_repository_name(new_name, old_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Renames a repository. The repository name must be unique across the calling AWS account.
Repository names are limited to 100 alphanumeric, dash, and underscore characters, and
cannot include certain characters. The suffix .git is prohibited. For more information
about the limits on repository names, see Limits in the AWS CodeCommit User Guide.

# Arguments
- `new_name`: The new name for the repository.
- `old_name`: The current name of the repository.

"""
function update_repository_name(newName, oldName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return codecommit("UpdateRepositoryName", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("newName"=>newName, "oldName"=>oldName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
