# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: nimble
using AWS.Compat
using AWS.UUIDs

# Julia syntax for service-level optional parameters to the AWS request syntax
const SERVICE_PARAMETER_MAP = OrderedCollections.LittleDict("client_token" => "X-Amz-Client-Token", "tags" => "tags", "max_results" => "maxResults", "next_token" => "nextToken", "principal_id" => "principalId", "states" => "states", "description" => "description", "name" => "name", "configuration" => "configuration", "ec2_security_group_ids" => "ec2SecurityGroupIds", "initialization_scripts" => "initializationScripts", "script_parameters" => "scriptParameters", "subtype" => "subtype", "eula_ids" => "eulaIds", "expiration_in_seconds" => "expirationInSeconds", "launch_profile_protocol_versions" => "launchProfileProtocolVersions", "stream_configuration" => "streamConfiguration", "studio_component_ids" => "studioComponentIds", "studio_encryption_configuration" => "studioEncryptionConfiguration", "admin_role_arn" => "adminRoleArn", "display_name" => "displayName", "user_role_arn" => "userRoleArn", "types" => "types", "created_by" => "createdBy", "owned_by" => "ownedBy", "session_ids" => "sessionIds", "owner" => "owner", "type" => "type", "ec2_instance_type" => "ec2InstanceType", "launch_profile_id" => "launchProfileId", "streaming_image_id" => "streamingImageId")

"""
    accept_eulas(studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Accept EULAs.

# Arguments
- `studio_id`: A collection of EULA IDs.

# Keyword Parameters
- `client_token`: Unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. If you don’t specify a client token, the AWS SDK
  automatically generates a client token and uses it for the request to ensure idempotency.
- `eula_ids`: The EULA ID.
"""
function accept_eulas(studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("POST", "/2020-08-01/studios/$(studioId)/eula-acceptances", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_launch_profile(ec2_subnet_ids, launch_profile_protocol_versions, name, stream_configuration, studio_component_ids, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Create a launch profile.

# Arguments
- `ec2_subnet_ids`: Specifies the IDs of the EC2 subnets where streaming sessions will be
  accessible from. These subnets must support the specified instance types.
- `launch_profile_protocol_versions`: The version number of the protocol that is used by
  the launch profile. The only valid version is \"2021-03-31\".
- `name`: The name for the launch profile.
- `stream_configuration`: A configuration for a streaming session.
- `studio_component_ids`: Unique identifiers for a collection of studio components that can
  be used with this launch profile.
- `studio_id`: The studio ID.

# Keyword Parameters
- `client_token`: Unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. If you don’t specify a client token, the AWS SDK
  automatically generates a client token and uses it for the request to ensure idempotency.
- `description`: The description.
- `tags`: A collection of labels, in the form of key:value pairs, that apply to this
  resource.
"""
function create_launch_profile(ec2SubnetIds, launchProfileProtocolVersions, name, streamConfiguration, studioComponentIds, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("POST", "/2020-08-01/studios/$(studioId)/launch-profiles", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ec2SubnetIds"=>ec2SubnetIds, "launchProfileProtocolVersions"=>launchProfileProtocolVersions, "name"=>name, "streamConfiguration"=>streamConfiguration, "studioComponentIds"=>studioComponentIds, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_streaming_image(ec2_image_id, name, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a streaming image resource in a studio.

# Arguments
- `ec2_image_id`: The ID of an EC2 machine image with which to create this streaming image.
- `name`: A friendly name for a streaming image resource.
- `studio_id`: The studio ID.

# Keyword Parameters
- `client_token`: Unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. If you don’t specify a client token, the AWS SDK
  automatically generates a client token and uses it for the request to ensure idempotency.
- `description`: A human-readable description of the streaming image.
- `tags`: A collection of labels, in the form of key:value pairs, that apply to this
  resource.
"""
function create_streaming_image(ec2ImageId, name, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("POST", "/2020-08-01/studios/$(studioId)/streaming-images", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ec2ImageId"=>ec2ImageId, "name"=>name, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_streaming_session(studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a streaming session in a studio. After invoking this operation, you must poll
GetStreamingSession until the streaming session is in state READY.

# Arguments
- `studio_id`: The studio ID.

# Keyword Parameters
- `client_token`: Unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. If you don’t specify a client token, the AWS SDK
  automatically generates a client token and uses it for the request to ensure idempotency.
- `ec2_instance_type`: The EC2 Instance type used for the streaming session.
- `launch_profile_id`: The launch profile ID.
- `owned_by`: The user ID of the user that owns the streaming session.
- `streaming_image_id`: The ID of the streaming image.
- `tags`: A collection of labels, in the form of key:value pairs, that apply to this
  resource.
"""
function create_streaming_session(studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("POST", "/2020-08-01/studios/$(studioId)/streaming-sessions", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_streaming_session_stream(session_id, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a streaming session stream for a streaming session. After invoking this API, invoke
GetStreamingSessionStream with the returned streamId to poll the resource until it is in
state READY.

# Arguments
- `session_id`: The streaming session ID.
- `studio_id`: The studio ID.

# Keyword Parameters
- `client_token`: Unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. If you don’t specify a client token, the AWS SDK
  automatically generates a client token and uses it for the request to ensure idempotency.
- `expiration_in_seconds`: The expiration time in seconds.
"""
function create_streaming_session_stream(sessionId, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("POST", "/2020-08-01/studios/$(studioId)/streaming-sessions/$(sessionId)/streams", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_studio(admin_role_arn, display_name, studio_name, user_role_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Create a new Studio. When creating a Studio, two IAM roles must be provided: the admin role
and the user Role. These roles are assumed by your users when they log in to the Nimble
Studio portal. The user role must have the AmazonNimbleStudio-StudioUser managed policy
attached for the portal to function properly. The Admin Role must have the
AmazonNimbleStudio-StudioAdmin managed policy attached for the portal to function properly.
You may optionally specify a KMS key in the StudioEncryptionConfiguration. In Nimble
Studio, resource names, descriptions, initialization scripts, and other data you provide
are always encrypted at rest using an KMS key. By default, this key is owned by Amazon Web
Services and managed on your behalf. You may provide your own KMS key when calling
CreateStudio to encrypt this data using a key you own and manage. When providing an KMS key
during studio creation, Nimble Studio creates KMS grants in your account to provide your
studio user and admin roles access to these KMS keys. If you delete this grant, the studio
will no longer be accessible to your portal users. If you delete the studio KMS key, your
studio will no longer be accessible.

# Arguments
- `admin_role_arn`: The IAM role that Studio Admins will assume when logging in to the
  Nimble Studio portal.
- `display_name`: A friendly name for the studio.
- `studio_name`: The studio name that is used in the URL of the Nimble Studio portal when
  accessed by Nimble Studio users.
- `user_role_arn`: The IAM role that Studio Users will assume when logging in to the Nimble
  Studio portal.

# Keyword Parameters
- `client_token`: Unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. If you don’t specify a client token, the AWS SDK
  automatically generates a client token and uses it for the request to ensure idempotency.
- `studio_encryption_configuration`: The studio encryption configuration.
- `tags`: A collection of labels, in the form of key:value pairs, that apply to this
  resource.
"""
function create_studio(adminRoleArn, displayName, studioName, userRoleArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("POST", "/2020-08-01/studios", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("adminRoleArn"=>adminRoleArn, "displayName"=>displayName, "studioName"=>studioName, "userRoleArn"=>userRoleArn, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_studio_component(name, studio_id, type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a studio component resource.

# Arguments
- `name`: The name for the studio component.
- `studio_id`: The studio ID.
- `type`: The type of the studio component.

# Keyword Parameters
- `client_token`: Unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. If you don’t specify a client token, the AWS SDK
  automatically generates a client token and uses it for the request to ensure idempotency.
- `configuration`: The configuration of the studio component, based on component type.
- `description`: The description.
- `ec2_security_group_ids`: The EC2 security groups that control access to the studio
  component.
- `initialization_scripts`: Initialization scripts for studio components.
- `script_parameters`: Parameters for the studio component scripts.
- `subtype`: The specific subtype of a studio component.
- `tags`: A collection of labels, in the form of key:value pairs, that apply to this
  resource.
"""
function create_studio_component(name, studioId, type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("POST", "/2020-08-01/studios/$(studioId)/studio-components", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("name"=>name, "type"=>type, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_launch_profile(launch_profile_id, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Permanently delete a launch profile.

# Arguments
- `launch_profile_id`: The Launch Profile ID.
- `studio_id`: The studio ID.

# Keyword Parameters
- `client_token`: Unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. If you don’t specify a client token, the AWS SDK
  automatically generates a client token and uses it for the request to ensure idempotency.
"""
function delete_launch_profile(launchProfileId, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("DELETE", "/2020-08-01/studios/$(studioId)/launch-profiles/$(launchProfileId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_launch_profile_member(launch_profile_id, principal_id, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Delete a user from launch profile membership.

# Arguments
- `launch_profile_id`: The Launch Profile ID.
- `principal_id`: The principal ID. This currently supports a Amazon Web Services SSO
  UserId.
- `studio_id`: The studio ID.

# Keyword Parameters
- `client_token`: Unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. If you don’t specify a client token, the AWS SDK
  automatically generates a client token and uses it for the request to ensure idempotency.
"""
function delete_launch_profile_member(launchProfileId, principalId, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("DELETE", "/2020-08-01/studios/$(studioId)/launch-profiles/$(launchProfileId)/membership/$(principalId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_streaming_image(streaming_image_id, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Delete streaming image.

# Arguments
- `streaming_image_id`: The streaming image ID.
- `studio_id`: The studio ID.

# Keyword Parameters
- `client_token`: Unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. If you don’t specify a client token, the AWS SDK
  automatically generates a client token and uses it for the request to ensure idempotency.
"""
function delete_streaming_image(streamingImageId, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("DELETE", "/2020-08-01/studios/$(studioId)/streaming-images/$(streamingImageId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_streaming_session(session_id, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes streaming session resource. After invoking this operation, use GetStreamingSession
to poll the resource until it transitions to a DELETED state. A streaming session will
count against your streaming session quota until it is marked DELETED.

# Arguments
- `session_id`: The streaming session ID.
- `studio_id`: The studio ID.

# Keyword Parameters
- `client_token`: Unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. If you don’t specify a client token, the AWS SDK
  automatically generates a client token and uses it for the request to ensure idempotency.
"""
function delete_streaming_session(sessionId, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("DELETE", "/2020-08-01/studios/$(studioId)/streaming-sessions/$(sessionId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_studio(studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Delete a studio resource.

# Arguments
- `studio_id`: The studio ID.

# Keyword Parameters
- `client_token`: Unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. If you don’t specify a client token, the AWS SDK
  automatically generates a client token and uses it for the request to ensure idempotency.
"""
function delete_studio(studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("DELETE", "/2020-08-01/studios/$(studioId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_studio_component(studio_component_id, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a studio component resource.

# Arguments
- `studio_component_id`: The studio component ID.
- `studio_id`: The studio ID.

# Keyword Parameters
- `client_token`: Unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. If you don’t specify a client token, the AWS SDK
  automatically generates a client token and uses it for the request to ensure idempotency.
"""
function delete_studio_component(studioComponentId, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("DELETE", "/2020-08-01/studios/$(studioId)/studio-components/$(studioComponentId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_studio_member(principal_id, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Delete a user from studio membership.

# Arguments
- `principal_id`: The principal ID. This currently supports a Amazon Web Services SSO
  UserId.
- `studio_id`: The studio ID.

# Keyword Parameters
- `client_token`: Unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. If you don’t specify a client token, the AWS SDK
  automatically generates a client token and uses it for the request to ensure idempotency.
"""
function delete_studio_member(principalId, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("DELETE", "/2020-08-01/studios/$(studioId)/membership/$(principalId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_eula(eula_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Get Eula.

# Arguments
- `eula_id`: The EULA ID.

"""
function get_eula(eulaId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("GET", "/2020-08-01/eulas/$(eulaId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_launch_profile(launch_profile_id, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Get a launch profile.

# Arguments
- `launch_profile_id`: The Launch Profile ID.
- `studio_id`: The studio ID.

"""
function get_launch_profile(launchProfileId, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("GET", "/2020-08-01/studios/$(studioId)/launch-profiles/$(launchProfileId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_launch_profile_details(launch_profile_id, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Launch profile details include the launch profile resource and summary information of
resources that are used by, or available to, the launch profile. This includes the name and
description of all studio components used by the launch profiles, and the name and
description of streaming images that can be used with this launch profile.

# Arguments
- `launch_profile_id`: The Launch Profile ID.
- `studio_id`: The studio ID.

"""
function get_launch_profile_details(launchProfileId, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("GET", "/2020-08-01/studios/$(studioId)/launch-profiles/$(launchProfileId)/details", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_launch_profile_initialization(launch_profile_id, launch_profile_protocol_versions, launch_purpose, platform, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Get a launch profile initialization.

# Arguments
- `launch_profile_id`: The Launch Profile ID.
- `launch_profile_protocol_versions`: The launch profile protocol versions supported by the
  client.
- `launch_purpose`: The launch purpose.
- `platform`: The platform where this Launch Profile will be used, either WINDOWS or LINUX.
- `studio_id`: The studio ID.

"""
function get_launch_profile_initialization(launchProfileId, launchProfileProtocolVersions, launchPurpose, platform, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("GET", "/2020-08-01/studios/$(studioId)/launch-profiles/$(launchProfileId)/init", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("launchProfileProtocolVersions"=>launchProfileProtocolVersions, "launchPurpose"=>launchPurpose, "platform"=>platform), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_launch_profile_member(launch_profile_id, principal_id, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Get a user persona in launch profile membership.

# Arguments
- `launch_profile_id`: The Launch Profile ID.
- `principal_id`: The principal ID. This currently supports a Amazon Web Services SSO
  UserId.
- `studio_id`: The studio ID.

"""
function get_launch_profile_member(launchProfileId, principalId, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("GET", "/2020-08-01/studios/$(studioId)/launch-profiles/$(launchProfileId)/membership/$(principalId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_streaming_image(streaming_image_id, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Get streaming image.

# Arguments
- `streaming_image_id`: The streaming image ID.
- `studio_id`: The studio ID.

"""
function get_streaming_image(streamingImageId, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("GET", "/2020-08-01/studios/$(studioId)/streaming-images/$(streamingImageId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_streaming_session(session_id, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets StreamingSession resource. anvoke this operation to poll for a streaming session state
while creating or deleting a session.

# Arguments
- `session_id`: The streaming session ID.
- `studio_id`: The studio ID.

"""
function get_streaming_session(sessionId, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("GET", "/2020-08-01/studios/$(studioId)/streaming-sessions/$(sessionId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_streaming_session_stream(session_id, stream_id, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets a StreamingSessionStream for a streaming session. Invoke this operation to poll the
resource after invoking CreateStreamingSessionStream. After the StreamingSessionStream
changes to the state READY, the url property will contain a stream to be used with the DCV
streaming client.

# Arguments
- `session_id`: The streaming session ID.
- `stream_id`: The streaming session stream ID.
- `studio_id`: The studio ID.

"""
function get_streaming_session_stream(sessionId, streamId, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("GET", "/2020-08-01/studios/$(studioId)/streaming-sessions/$(sessionId)/streams/$(streamId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_studio(studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Get a Studio resource.

# Arguments
- `studio_id`: The studio ID.

"""
function get_studio(studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("GET", "/2020-08-01/studios/$(studioId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_studio_component(studio_component_id, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets a studio component resource.

# Arguments
- `studio_component_id`: The studio component ID.
- `studio_id`: The studio ID.

"""
function get_studio_component(studioComponentId, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("GET", "/2020-08-01/studios/$(studioId)/studio-components/$(studioComponentId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_studio_member(principal_id, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Get a user's membership in a studio.

# Arguments
- `principal_id`: The principal ID. This currently supports a Amazon Web Services SSO
  UserId.
- `studio_id`: The studio ID.

"""
function get_studio_member(principalId, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("GET", "/2020-08-01/studios/$(studioId)/membership/$(principalId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_eula_acceptances(studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

List Eula Acceptances.

# Arguments
- `studio_id`: The studio ID.

# Keyword Parameters
- `eula_ids`: The list of EULA IDs that have been previously accepted.
- `next_token`: The token to request the next page of results.
"""
function list_eula_acceptances(studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("GET", "/2020-08-01/studios/$(studioId)/eula-acceptances", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_eulas(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

List Eulas.

# Keyword Parameters
- `eula_ids`: The list of EULA IDs that should be returned
- `next_token`: The token to request the next page of results.
"""
function list_eulas(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("GET", "/2020-08-01/eulas", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_launch_profile_members(launch_profile_id, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Get all users in a given launch profile membership.

# Arguments
- `launch_profile_id`: The Launch Profile ID.
- `studio_id`: The studio ID.

# Keyword Parameters
- `max_results`: The max number of results to return in the response.
- `next_token`: The token to request the next page of results.
"""
function list_launch_profile_members(launchProfileId, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("GET", "/2020-08-01/studios/$(studioId)/launch-profiles/$(launchProfileId)/membership", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_launch_profiles(studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

List all the launch profiles a studio.

# Arguments
- `studio_id`: The studio ID.

# Keyword Parameters
- `max_results`: The max number of results to return in the response.
- `next_token`: The token to request the next page of results.
- `principal_id`: The principal ID. This currently supports a Amazon Web Services SSO
  UserId.
- `states`: Filter this request to launch profiles in any of the given states.
"""
function list_launch_profiles(studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("GET", "/2020-08-01/studios/$(studioId)/launch-profiles", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_streaming_images(studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

List the streaming image resources available to this studio. This list will contain both
images provided by Amazon Web Services, as well as streaming images that you have created
in your studio.

# Arguments
- `studio_id`: The studio ID.

# Keyword Parameters
- `next_token`: The token to request the next page of results.
- `owner`: Filter this request to streaming images with the given owner
"""
function list_streaming_images(studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("GET", "/2020-08-01/studios/$(studioId)/streaming-images", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_streaming_sessions(studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the streaming image resources in a studio.

# Arguments
- `studio_id`: The studio ID.

# Keyword Parameters
- `created_by`: Filters the request to streaming sessions created by the given user.
- `next_token`: The token to request the next page of results.
- `owned_by`: Filters the request to streaming session owned by the given user
- `session_ids`: Filters the request to only the provided session IDs.
"""
function list_streaming_sessions(studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("GET", "/2020-08-01/studios/$(studioId)/streaming-sessions", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_studio_components(studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the StudioComponents in a studio.

# Arguments
- `studio_id`: The studio ID.

# Keyword Parameters
- `max_results`: The max number of results to return in the response.
- `next_token`: The token to request the next page of results.
- `states`: Filters the request to studio components that are in one of the given states.
- `types`: Filters the request to studio components that are of one of the given types.
"""
function list_studio_components(studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("GET", "/2020-08-01/studios/$(studioId)/studio-components", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_studio_members(studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Get all users in a given studio membership.

# Arguments
- `studio_id`: The studio ID.

# Keyword Parameters
- `max_results`: The max number of results to return in the response.
- `next_token`: The token to request the next page of results.
"""
function list_studio_members(studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("GET", "/2020-08-01/studios/$(studioId)/membership", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_studios(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

List studios in your Amazon Web Services account in the requested Amazon Web Services
Region.

# Keyword Parameters
- `next_token`: The token to request the next page of results.
"""
function list_studios(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("GET", "/2020-08-01/studios", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_tags_for_resource(resource_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets the tags for a resource, given its Amazon Resource Names (ARN). This operation
supports ARNs for all resource types in Nimble Studio that support tags, including studio,
studio component, launch profile, streaming image, and streaming session. All resources
that can be tagged will contain an ARN property, so you do not have to create this ARN
yourself.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource for which you want to list
  tags.

"""
function list_tags_for_resource(resourceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("GET", "/2020-08-01/tags/$(resourceArn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    put_launch_profile_members(identity_store_id, launch_profile_id, members, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Add/update users with given persona to launch profile membership.

# Arguments
- `identity_store_id`: The ID of the identity store.
- `launch_profile_id`: The Launch Profile ID.
- `members`: A list of members.
- `studio_id`: The studio ID.

# Keyword Parameters
- `client_token`: Unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. If you don’t specify a client token, the AWS SDK
  automatically generates a client token and uses it for the request to ensure idempotency.
"""
function put_launch_profile_members(identityStoreId, launchProfileId, members, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("POST", "/2020-08-01/studios/$(studioId)/launch-profiles/$(launchProfileId)/membership", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("identityStoreId"=>identityStoreId, "members"=>members, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    put_studio_members(identity_store_id, members, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Add/update users with given persona to studio membership.

# Arguments
- `identity_store_id`: The ID of the identity store.
- `members`: A list of members.
- `studio_id`: The studio ID.

# Keyword Parameters
- `client_token`: Unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. If you don’t specify a client token, the AWS SDK
  automatically generates a client token and uses it for the request to ensure idempotency.
"""
function put_studio_members(identityStoreId, members, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("POST", "/2020-08-01/studios/$(studioId)/membership", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("identityStoreId"=>identityStoreId, "members"=>members, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    start_streaming_session(session_id, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Transitions sessions from the STOPPED state into the READY state. The START_IN_PROGRESS
state is the intermediate state between the STOPPED and READY states.

# Arguments
- `session_id`: The streaming session ID for the StartStreamingSessionRequest.
- `studio_id`: The studio ID for the StartStreamingSessionRequest.

# Keyword Parameters
- `client_token`: Unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. If you don’t specify a client token, the AWS SDK
  automatically generates a client token and uses it for the request to ensure idempotency.
"""
function start_streaming_session(sessionId, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("POST", "/2020-08-01/studios/$(studioId)/streaming-sessions/$(sessionId)/start", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    start_studio_ssoconfiguration_repair(studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Repairs the Amazon Web Services SSO configuration for a given studio. If the studio has a
valid Amazon Web Services SSO configuration currently associated with it, this operation
will fail with a validation error. If the studio does not have a valid Amazon Web Services
SSO configuration currently associated with it, then a new Amazon Web Services SSO
application is created for the studio and the studio is changed to the READY state. After
the Amazon Web Services SSO application is repaired, you must use the Amazon Nimble Studio
console to add administrators and users to your studio.

# Arguments
- `studio_id`: The studio ID.

# Keyword Parameters
- `client_token`: Unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. If you don’t specify a client token, the AWS SDK
  automatically generates a client token and uses it for the request to ensure idempotency.
"""
function start_studio_ssoconfiguration_repair(studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("PUT", "/2020-08-01/studios/$(studioId)/sso-configuration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    stop_streaming_session(session_id, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Transitions sessions from the READY state into the STOPPED state. The STOP_IN_PROGRESS
state is the intermediate state between the READY and STOPPED states.

# Arguments
- `session_id`: The streaming session ID for the StopStreamingSessionRequest.
- `studio_id`: The studioId for the StopStreamingSessionRequest.

# Keyword Parameters
- `client_token`: Unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. If you don’t specify a client token, the AWS SDK
  automatically generates a client token and uses it for the request to ensure idempotency.
"""
function stop_streaming_session(sessionId, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("POST", "/2020-08-01/studios/$(studioId)/streaming-sessions/$(sessionId)/stop", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    tag_resource(resource_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates tags for a resource, given its ARN.

# Arguments
- `resource_arn`:  The Amazon Resource Name (ARN) of the resource you want to add tags to.

# Keyword Parameters
- `tags`: A collection of labels, in the form of key:value pairs, that apply to this
  resource.
"""
function tag_resource(resourceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("POST", "/2020-08-01/tags/$(resourceArn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    untag_resource(resource_arn, tag_keys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the tags for a resource.

# Arguments
- `resource_arn`: Identifies the Amazon Resource Name(ARN) key from which you are removing
  tags.
- `tag_keys`: One or more tag keys. Specify only the tag keys, not the tag values.

"""
function untag_resource(resourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("DELETE", "/2020-08-01/tags/$(resourceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tagKeys"=>tagKeys), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_launch_profile(launch_profile_id, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Update a launch profile.

# Arguments
- `launch_profile_id`: The Launch Profile ID.
- `studio_id`: The studio ID.

# Keyword Parameters
- `client_token`: Unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. If you don’t specify a client token, the AWS SDK
  automatically generates a client token and uses it for the request to ensure idempotency.
- `description`: The description.
- `launch_profile_protocol_versions`: The version number of the protocol that is used by
  the launch profile. The only valid version is \"2021-03-31\".
- `name`: The name for the launch profile.
- `stream_configuration`: A configuration for a streaming session.
- `studio_component_ids`: Unique identifiers for a collection of studio components that can
  be used with this launch profile.
"""
function update_launch_profile(launchProfileId, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("PATCH", "/2020-08-01/studios/$(studioId)/launch-profiles/$(launchProfileId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_launch_profile_member(launch_profile_id, persona, principal_id, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Update a user persona in launch profile membership.

# Arguments
- `launch_profile_id`: The Launch Profile ID.
- `persona`: The persona.
- `principal_id`: The principal ID. This currently supports a Amazon Web Services SSO
  UserId.
- `studio_id`: The studio ID.

# Keyword Parameters
- `client_token`: Unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. If you don’t specify a client token, the AWS SDK
  automatically generates a client token and uses it for the request to ensure idempotency.
"""
function update_launch_profile_member(launchProfileId, persona, principalId, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("PATCH", "/2020-08-01/studios/$(studioId)/launch-profiles/$(launchProfileId)/membership/$(principalId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("persona"=>persona, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_streaming_image(streaming_image_id, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Update streaming image.

# Arguments
- `streaming_image_id`: The streaming image ID.
- `studio_id`: The studio ID.

# Keyword Parameters
- `client_token`: Unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. If you don’t specify a client token, the AWS SDK
  automatically generates a client token and uses it for the request to ensure idempotency.
- `description`: The description.
- `name`: The name for the streaming image.
"""
function update_streaming_image(streamingImageId, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("PATCH", "/2020-08-01/studios/$(studioId)/streaming-images/$(streamingImageId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_studio(studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Update a Studio resource. Currently, this operation only supports updating the displayName
of your studio.

# Arguments
- `studio_id`: The studio ID.

# Keyword Parameters
- `admin_role_arn`: The IAM role that Studio Admins will assume when logging in to the
  Nimble Studio portal.
- `client_token`: Unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. If you don’t specify a client token, the AWS SDK
  automatically generates a client token and uses it for the request to ensure idempotency.
- `display_name`: A friendly name for the studio.
- `user_role_arn`: The IAM role that Studio Users will assume when logging in to the Nimble
  Studio portal.
"""
function update_studio(studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("PATCH", "/2020-08-01/studios/$(studioId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_studio_component(studio_component_id, studio_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates a studio component resource.

# Arguments
- `studio_component_id`: The studio component ID.
- `studio_id`: The studio ID.

# Keyword Parameters
- `client_token`: Unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. If you don’t specify a client token, the AWS SDK
  automatically generates a client token and uses it for the request to ensure idempotency.
- `configuration`: The configuration of the studio component, based on component type.
- `description`: The description.
- `ec2_security_group_ids`: The EC2 security groups that control access to the studio
  component.
- `initialization_scripts`: Initialization scripts for studio components.
- `name`: The name for the studio component.
- `script_parameters`: Parameters for the studio component scripts.
- `subtype`: The specific subtype of a studio component.
- `type`: The type of the studio component.
"""
function update_studio_component(studioComponentId, studioId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return nimble("PATCH", "/2020-08-01/studios/$(studioId)/studio-components/$(studioComponentId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
