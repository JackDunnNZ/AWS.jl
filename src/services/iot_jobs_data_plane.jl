# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: iot_jobs_data_plane
using AWS.Compat
using AWS.UUIDs

# Julia syntax for service-level optional parameters to the AWS request syntax
const SERVICE_PARAMETER_MAP = AWS.LittleDict("execution_number" => "executionNumber", "expected_version" => "expectedVersion", "include_job_document" => "includeJobDocument", "include_job_execution_state" => "includeJobExecutionState", "status_details" => "statusDetails", "step_timeout_in_minutes" => "stepTimeoutInMinutes")

"""
    describe_job_execution(job_id, thing_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets details of a job execution.

# Arguments
- `job_id`: The unique identifier assigned to this job when it was created.
- `thing_name`: The thing name associated with the device the job execution is running on.

# Keyword Parameters
- `execution_number`: Optional. A number that identifies a particular job execution on a
  particular device. If not specified, the latest job execution is returned.
- `include_job_document`: Optional. When set to true, the response contains the job
  document. The default is false.
"""
function describe_job_execution(jobId, thingName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iot_jobs_data_plane("GET", "/things/$(thingName)/jobs/$(jobId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_pending_job_executions(thing_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets the list of all jobs for a thing that are not in a terminal status.

# Arguments
- `thing_name`: The name of the thing that is executing the job.

"""
function get_pending_job_executions(thingName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iot_jobs_data_plane("GET", "/things/$(thingName)/jobs", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    start_next_pending_job_execution(thing_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets and starts the next pending (status IN_PROGRESS or QUEUED) job execution for a thing.

# Arguments
- `thing_name`: The name of the thing associated with the device.

# Keyword Parameters
- `status_details`: A collection of name/value pairs that describe the status of the job
  execution. If not specified, the statusDetails are unchanged.
- `step_timeout_in_minutes`: Specifies the amount of time this device has to finish
  execution of this job. If the job execution status is not set to a terminal state before
  this timer expires, or before the timer is reset (by calling UpdateJobExecution, setting
  the status to IN_PROGRESS and specifying a new timeout value in field stepTimeoutInMinutes)
  the job execution status will be automatically set to TIMED_OUT. Note that setting this
  timeout has no effect on that job execution timeout which may have been specified when the
  job was created (CreateJob using field timeoutConfig).
"""
function start_next_pending_job_execution(thingName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iot_jobs_data_plane("PUT", "/things/$(thingName)/jobs/$next", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_job_execution(job_id, status, thing_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the status of a job execution.

# Arguments
- `job_id`: The unique identifier assigned to this job when it was created.
- `status`: The new status for the job execution (IN_PROGRESS, FAILED, SUCCESS, or
  REJECTED). This must be specified on every update.
- `thing_name`: The name of the thing associated with the device.

# Keyword Parameters
- `execution_number`: Optional. A number that identifies a particular job execution on a
  particular device.
- `expected_version`: Optional. The expected current version of the job execution. Each
  time you update the job execution, its version is incremented. If the version of the job
  execution stored in Jobs does not match, the update is rejected with a VersionMismatch
  error, and an ErrorResponse that contains the current job execution status data is
  returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in
  order to obtain the job execution status data.)
- `include_job_document`: Optional. When set to true, the response contains the job
  document. The default is false.
- `include_job_execution_state`: Optional. When included and set to true, the response
  contains the JobExecutionState data. The default is false.
- `status_details`:  Optional. A collection of name/value pairs that describe the status of
  the job execution. If not specified, the statusDetails are unchanged.
- `step_timeout_in_minutes`: Specifies the amount of time this device has to finish
  execution of this job. If the job execution status is not set to a terminal state before
  this timer expires, or before the timer is reset (by again calling UpdateJobExecution,
  setting the status to IN_PROGRESS and specifying a new timeout value in this field) the job
  execution status will be automatically set to TIMED_OUT. Note that setting or resetting
  this timeout has no effect on that job execution timeout which may have been specified when
  the job was created (CreateJob using field timeoutConfig).
"""
function update_job_execution(jobId, status, thingName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iot_jobs_data_plane("POST", "/things/$(thingName)/jobs/$(jobId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("status"=>status), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
