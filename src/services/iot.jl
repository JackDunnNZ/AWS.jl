# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: iot
using AWS.Compat
using AWS.UUIDs

# Julia syntax for service-level optional parameters to the AWS request syntax
const SERVICE_PARAMETER_MAP = OrderedCollections.LittleDict("execution_number" => "executionNumber", "verification_state_description" => "verificationStateDescription", "expected_version" => "expectedVersion", "marker" => "marker", "page_size" => "pageSize", "max_results" => "maxResults", "next_token" => "nextToken", "thing_type_name" => "thingTypeName", "transfer_message" => "transferMessage", "set_as_active" => "setAsActive", "rule_disabled" => "ruleDisabled", "topic" => "topic", "http_context" => "httpContext", "mqtt_context" => "mqttContext", "tls_context" => "tlsContext", "token" => "token", "token_signature" => "tokenSignature", "ascending_order" => "isAscendingOrder", "status" => "status", "description" => "description", "enabled" => "enabled", "pre_provisioning_hook" => "preProvisioningHook", "tags" => "tags", "name_prefix_filter" => "namePrefixFilter", "credential_duration_seconds" => "credentialDurationSeconds", "billing_group_properties" => "billingGroupProperties", "force" => "force", "namespace_id" => "namespaceId", "reject_reason" => "rejectReason", "billing_group_arn" => "billingGroupArn", "billing_group_name" => "billingGroupName", "thing_arn" => "thingArn", "thing_name" => "thingName", "recursive" => "recursive", "index_name" => "indexName", "query_version" => "queryVersion", "thing_group_properties" => "thingGroupProperties", "allow_auto_registration" => "allowAutoRegistration", "registration_config" => "registrationConfig", "role_arn" => "roleArn", "expiration_date" => "expirationDate", "suppress_indefinitely" => "suppressIndefinitely", "client_id" => "clientId", "cognito_identity_pool_id" => "cognitoIdentityPoolId", "policy_names_to_add" => "policyNamesToAdd", "policy_names_to_skip" => "policyNamesToSkip", "principal" => "principal", "override_dynamic_groups" => "overrideDynamicGroups", "thing_group_arn" => "thingGroupArn", "thing_group_name" => "thingGroupName", "day_of_month" => "dayOfMonth", "day_of_week" => "dayOfWeek", "frequency" => "frequency", "target_check_names" => "targetCheckNames", "authorizer_function_arn" => "authorizerFunctionArn", "token_key_name" => "tokenKeyName", "token_signing_public_keys" => "tokenSigningPublicKeys", "aggregation_field" => "aggregationField", "unit" => "unit", "audit_check_configurations" => "auditCheckConfigurations", "audit_notification_target_configurations" => "auditNotificationTargetConfigurations", "additional_metrics_to_retain" => "additionalMetricsToRetain", "additional_metrics_to_retain_v2" => "additionalMetricsToRetainV2", "alert_targets" => "alertTargets", "behaviors" => "behaviors", "delete_additional_metrics_to_retain" => "deleteAdditionalMetricsToRetain", "delete_alert_targets" => "deleteAlertTargets", "delete_behaviors" => "deleteBehaviors", "security_profile_description" => "securityProfileDescription", "attribute_name" => "attributeName", "attribute_value" => "attributeValue", "use_prefix_attribute_value" => "usePrefixAttributeValue", "behavior_criteria_type" => "behaviorCriteriaType", "list_suppressed_alerts" => "listSuppressedAlerts", "security_profile_name" => "securityProfileName", "verification_state" => "verificationState", "abort_config" => "abortConfig", "document" => "document", "document_source" => "documentSource", "job_executions_rollout_config" => "jobExecutionsRolloutConfig", "job_template_arn" => "jobTemplateArn", "presigned_url_config" => "presignedUrlConfig", "target_selection" => "targetSelection", "timeout_config" => "timeoutConfig", "target_type" => "targetType", "end_time" => "endTime", "start_time" => "startTime", "task_id" => "taskId", "violation_id" => "violationId", "comment" => "comment", "reason_code" => "reasonCode", "parent_group_name" => "parentGroupName", "include_only_active_violations" => "includeOnlyActiveViolations", "include_suppressed_alerts" => "includeSuppressedAlerts", "violation_event_occurrence_range" => "violationEventOccurrenceRange", "thing_group_id" => "thingGroupId", "task_status" => "taskStatus", "task_type" => "taskType", "job_arn" => "jobArn", "files" => "files", "set_as_default" => "setAsDefault", "parameters" => "parameters", "authorizer_config" => "authorizerConfig", "domain_name" => "domainName", "server_certificate_arns" => "serverCertificateArns", "service_type" => "serviceType", "validation_certificate_arn" => "validationCertificateArn", "ota_update_status" => "otaUpdateStatus", "action_params" => "actionParams", "delete_scheduled_audits" => "deleteScheduledAudits", "thing_type_properties" => "thingTypeProperties", "action_status" => "actionStatus", "attribute_payload" => "attributePayload", "check_name" => "checkName", "list_suppressed_findings" => "listSuppressedFindings", "resource_identifier" => "resourceIdentifier", "status_details" => "statusDetails", "delete_stream" => "deleteStream", "force_delete_awsjob" => "forceDeleteAWSJob", "signing_disabled" => "signingDisabled", "action_type" => "actionType", "thing_groups_to_add" => "thingGroupsToAdd", "thing_groups_to_remove" => "thingGroupsToRemove", "ca_certificate_pem" => "caCertificatePem", "percents" => "percents", "event_configurations" => "eventConfigurations", "domain_configuration_status" => "domainConfigurationStatus", "remove_authorizer_config" => "removeAuthorizerConfig", "remove_thing_type" => "removeThingType", "endpoint_type" => "endpointType", "display_name" => "displayName", "additional_parameters" => "additionalParameters", "aws_job_abort_config" => "awsJobAbortConfig", "aws_job_executions_rollout_config" => "awsJobExecutionsRolloutConfig", "aws_job_presigned_url_config" => "awsJobPresignedUrlConfig", "aws_job_timeout_config" => "awsJobTimeoutConfig", "protocols" => "protocols", "default_version_id" => "defaultVersionId", "provisioning_role_arn" => "provisioningRoleArn", "remove_pre_provisioning_hook" => "removePreProvisioningHook", "default_log_level" => "defaultLogLevel", "disable_all_logs" => "disableAllLogs", "undo_deprecate" => "undoDeprecate", "query_string" => "queryString", "dimension_name" => "dimensionName", "metric_name" => "metricName", "audit_task_id" => "auditTaskId", "finding_id" => "findingId", "force_delete" => "forceDelete", "new_auto_registration_status" => "newAutoRegistrationStatus", "new_status" => "newStatus", "remove_auto_registration" => "removeAutoRegistration", "thing_group_indexing_configuration" => "thingGroupIndexingConfiguration", "thing_indexing_configuration" => "thingIndexingConfiguration", "parent_group" => "parentGroup", "aggregation_type" => "aggregationType", "period" => "period")

"""
    accept_certificate_transfer(certificate_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Accepts a pending certificate transfer. The default state of the certificate is INACTIVE.
To check for pending certificate transfers, call ListCertificates to enumerate your
certificates. Requires permission to access the AcceptCertificateTransfer action.

# Arguments
- `certificate_id`: The ID of the certificate. (The last part of the certificate ARN
  contains the certificate ID.)

# Keyword Parameters
- `set_as_active`: Specifies whether the certificate is active.
"""
function accept_certificate_transfer(certificateId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PATCH", "/accept-certificate-transfer/$(certificateId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    add_thing_to_billing_group(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds a thing to a billing group. Requires permission to access the AddThingToBillingGroup
action.

# Keyword Parameters
- `billing_group_arn`: The ARN of the billing group.
- `billing_group_name`: The name of the billing group.
- `thing_arn`: The ARN of the thing to be added to the billing group.
- `thing_name`: The name of the thing to be added to the billing group.
"""
function add_thing_to_billing_group(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PUT", "/billing-groups/addThingToBillingGroup", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    add_thing_to_thing_group(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds a thing to a thing group. Requires permission to access the AddThingToThingGroup
action.

# Keyword Parameters
- `override_dynamic_groups`: Override dynamic thing groups with static thing groups when
  10-group limit is reached. If a thing belongs to 10 thing groups, and one or more of those
  groups are dynamic thing groups, adding a thing to a static group removes the thing from
  the last dynamic group.
- `thing_arn`: The ARN of the thing to add to a group.
- `thing_group_arn`: The ARN of the group to which you are adding a thing.
- `thing_group_name`: The name of the group to which you are adding a thing.
- `thing_name`: The name of the thing to add to a group.
"""
function add_thing_to_thing_group(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PUT", "/thing-groups/addThingToThingGroup", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    associate_targets_with_job(job_id, targets; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Associates a group with a continuous job. The following criteria must be met:    The job
must have been created with the targetSelection field set to \"CONTINUOUS\".   The job
status must currently be \"IN_PROGRESS\".   The total number of targets associated with a
job must not exceed 100.   Requires permission to access the AssociateTargetsWithJob action.

# Arguments
- `job_id`: The unique identifier you assigned to this job when it was created.
- `targets`: A list of thing group ARNs that define the targets of the job.

# Keyword Parameters
- `comment`: An optional comment string describing why the job was associated with the
  targets.
- `namespace_id`: The namespace used to indicate that a job is a customer-managed job. When
  you specify a value for this parameter, Amazon Web Services IoT Core sends jobs
  notifications to MQTT topics that contain the value in the following format.
  aws/things/THING_NAME/jobs/JOB_ID/notify-namespace-NAMESPACE_ID/   The namespaceId feature
  is in public preview.
"""
function associate_targets_with_job(jobId, targets; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/jobs/$(jobId)/targets", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("targets"=>targets), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    attach_policy(policy_name, target; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Attaches the specified policy to the specified principal (certificate or other credential).
Requires permission to access the AttachPolicy action.

# Arguments
- `policy_name`: The name of the policy to attach.
- `target`: The identity to which the policy is attached. For example, a thing group or a
  certificate.

"""
function attach_policy(policyName, target; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PUT", "/target-policies/$(policyName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("target"=>target), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    attach_principal_policy(policy_name, x-amzn-iot-principal; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Attaches the specified policy to the specified principal (certificate or other credential).
 Note: This action is deprecated. Please use AttachPolicy instead. Requires permission to
access the AttachPrincipalPolicy action.

# Arguments
- `policy_name`: The policy name.
- `x-amzn-iot-principal`: The principal, which can be a certificate ARN (as returned from
  the CreateCertificate operation) or an Amazon Cognito ID.

"""
function attach_principal_policy(policyName, x_amzn_iot_principal; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PUT", "/principal-policies/$(policyName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("headers"=>Dict{String, Any}("x-amzn-iot-principal"=>x_amzn_iot_principal)), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    attach_security_profile(security_profile_name, security_profile_target_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Associates a Device Defender security profile with a thing group or this account. Each
thing group or account can have up to five security profiles associated with it. Requires
permission to access the AttachSecurityProfile action.

# Arguments
- `security_profile_name`: The security profile that is attached.
- `security_profile_target_arn`: The ARN of the target (thing group) to which the security
  profile is attached.

"""
function attach_security_profile(securityProfileName, securityProfileTargetArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PUT", "/security-profiles/$(securityProfileName)/targets", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("securityProfileTargetArn"=>securityProfileTargetArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    attach_thing_principal(thing_name, x-amzn-principal; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Attaches the specified principal to the specified thing. A principal can be X.509
certificates, IAM users, groups, and roles, Amazon Cognito identities or federated
identities. Requires permission to access the AttachThingPrincipal action.

# Arguments
- `thing_name`: The name of the thing.
- `x-amzn-principal`: The principal, which can be a certificate ARN (as returned from the
  CreateCertificate operation) or an Amazon Cognito ID.

"""
function attach_thing_principal(thingName, x_amzn_principal; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PUT", "/things/$(thingName)/principals", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("headers"=>Dict{String, Any}("x-amzn-principal"=>x_amzn_principal)), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    cancel_audit_mitigation_actions_task(task_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Cancels a mitigation action task that is in progress. If the task is not in progress, an
InvalidRequestException occurs. Requires permission to access the
CancelAuditMitigationActionsTask action.

# Arguments
- `task_id`: The unique identifier for the task that you want to cancel.

"""
function cancel_audit_mitigation_actions_task(taskId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PUT", "/audit/mitigationactions/tasks/$(taskId)/cancel", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    cancel_audit_task(task_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Cancels an audit that is in progress. The audit can be either scheduled or on demand. If
the audit isn't in progress, an \"InvalidRequestException\" occurs. Requires permission to
access the CancelAuditTask action.

# Arguments
- `task_id`: The ID of the audit you want to cancel. You can only cancel an audit that is
  \"IN_PROGRESS\".

"""
function cancel_audit_task(taskId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PUT", "/audit/tasks/$(taskId)/cancel", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    cancel_certificate_transfer(certificate_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Cancels a pending transfer for the specified certificate.  Note Only the transfer source
account can use this operation to cancel a transfer. (Transfer destinations can use
RejectCertificateTransfer instead.) After transfer, IoT returns the certificate to the
source account in the INACTIVE state. After the destination account has accepted the
transfer, the transfer cannot be cancelled. After a certificate transfer is cancelled, the
status of the certificate changes from PENDING_TRANSFER to INACTIVE. Requires permission to
access the CancelCertificateTransfer action.

# Arguments
- `certificate_id`: The ID of the certificate. (The last part of the certificate ARN
  contains the certificate ID.)

"""
function cancel_certificate_transfer(certificateId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PATCH", "/cancel-certificate-transfer/$(certificateId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    cancel_detect_mitigation_actions_task(task_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Cancels a Device Defender ML Detect mitigation action.  Requires permission to access the
CancelDetectMitigationActionsTask action.

# Arguments
- `task_id`:  The unique identifier of the task.

"""
function cancel_detect_mitigation_actions_task(taskId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PUT", "/detect/mitigationactions/tasks/$(taskId)/cancel", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    cancel_job(job_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Cancels a job. Requires permission to access the CancelJob action.

# Arguments
- `job_id`: The unique identifier you assigned to this job when it was created.

# Keyword Parameters
- `comment`: An optional comment string describing why the job was canceled.
- `force`: (Optional) If true job executions with status \"IN_PROGRESS\" and \"QUEUED\" are
  canceled, otherwise only job executions with status \"QUEUED\" are canceled. The default is
  false. Canceling a job which is \"IN_PROGRESS\", will cause a device which is executing the
  job to be unable to update the job execution status. Use caution and ensure that each
  device executing a job which is canceled is able to recover to a valid state.
- `reason_code`: (Optional)A reason code string that explains why the job was canceled.
"""
function cancel_job(jobId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PUT", "/jobs/$(jobId)/cancel", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    cancel_job_execution(job_id, thing_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Cancels the execution of a job for a given thing. Requires permission to access the
CancelJobExecution action.

# Arguments
- `job_id`: The ID of the job to be canceled.
- `thing_name`: The name of the thing whose execution of the job will be canceled.

# Keyword Parameters
- `expected_version`: (Optional) The expected current version of the job execution. Each
  time you update the job execution, its version is incremented. If the version of the job
  execution stored in Jobs does not match, the update is rejected with a VersionMismatch
  error, and an ErrorResponse that contains the current job execution status data is
  returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in
  order to obtain the job execution status data.)
- `force`: (Optional) If true the job execution will be canceled if it has status
  IN_PROGRESS or QUEUED, otherwise the job execution will be canceled only if it has status
  QUEUED. If you attempt to cancel a job execution that is IN_PROGRESS, and you do not set
  force to true, then an InvalidStateTransitionException will be thrown. The default is
  false. Canceling a job execution which is \"IN_PROGRESS\", will cause the device to be
  unable to update the job execution status. Use caution and ensure that the device is able
  to recover to a valid state.
- `status_details`: A collection of name/value pairs that describe the status of the job
  execution. If not specified, the statusDetails are unchanged. You can specify at most 10
  name/value pairs.
"""
function cancel_job_execution(jobId, thingName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PUT", "/things/$(thingName)/jobs/$(jobId)/cancel", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    clear_default_authorizer(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Clears the default authorizer. Requires permission to access the ClearDefaultAuthorizer
action.

"""
function clear_default_authorizer(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/default-authorizer", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    confirm_topic_rule_destination(confirmation_token; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Confirms a topic rule destination. When you create a rule requiring a destination, IoT
sends a confirmation message to the endpoint or base address you specify. The message
includes a token which you pass back when calling ConfirmTopicRuleDestination to confirm
that you own or have access to the endpoint. Requires permission to access the
ConfirmTopicRuleDestination action.

# Arguments
- `confirmation_token`: The token used to confirm ownership or access to the topic rule
  confirmation URL.

"""
function confirm_topic_rule_destination(confirmationToken; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/confirmdestination/$(confirmationToken)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_audit_suppression(check_name, client_request_token, resource_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Creates a Device Defender audit suppression.  Requires permission to access the
CreateAuditSuppression action.

# Arguments
- `check_name`:
- `client_request_token`:  Each audit supression must have a unique client request token.
  If you try to create a new audit suppression with the same token as one that already
  exists, an exception occurs. If you omit this value, Amazon Web Services SDKs will
  automatically generate a unique client request.
- `resource_identifier`:

# Keyword Parameters
- `description`:  The description of the audit suppression.
- `expiration_date`:  The epoch timestamp in seconds at which this suppression expires.
- `suppress_indefinitely`:  Indicates whether a suppression should exist indefinitely or
  not.
"""
function create_audit_suppression(checkName, clientRequestToken, resourceIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/audit/suppressions/create", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("checkName"=>checkName, "clientRequestToken"=>clientRequestToken, "resourceIdentifier"=>resourceIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_authorizer(authorizer_function_arn, authorizer_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an authorizer. Requires permission to access the CreateAuthorizer action.

# Arguments
- `authorizer_function_arn`: The ARN of the authorizer's Lambda function.
- `authorizer_name`: The authorizer name.

# Keyword Parameters
- `signing_disabled`: Specifies whether IoT validates the token signature in an
  authorization request.
- `status`: The status of the create authorizer request.
- `tags`: Metadata which can be used to manage the custom authorizer.  For URI Request
  parameters use format: ...key1=value1&amp;key2=value2... For the CLI command-line parameter
  use format: &amp;&amp;tags \"key1=value1&amp;key2=value2...\" For the cli-input-json file
  use format: \"tags\": \"key1=value1&amp;key2=value2...\"
- `token_key_name`: The name of the token key used to extract the token from the HTTP
  headers.
- `token_signing_public_keys`: The public keys used to verify the digital signature
  returned by your custom authentication service.
"""
function create_authorizer(authorizerFunctionArn, authorizerName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/authorizer/$(authorizerName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("authorizerFunctionArn"=>authorizerFunctionArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_billing_group(billing_group_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a billing group. Requires permission to access the CreateBillingGroup action.

# Arguments
- `billing_group_name`: The name you wish to give to the billing group.

# Keyword Parameters
- `billing_group_properties`: The properties of the billing group.
- `tags`: Metadata which can be used to manage the billing group.
"""
function create_billing_group(billingGroupName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/billing-groups/$(billingGroupName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_certificate_from_csr(certificate_signing_request; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an X.509 certificate using the specified certificate signing request.  Note: The
CSR must include a public key that is either an RSA key with a length of at least 2048 bits
or an ECC key from NIST P-256 or NIST P-384 curves.   Note: Reusing the same certificate
signing request (CSR) results in a distinct certificate. Requires permission to access the
CreateCertificateFromCsr action. You can create multiple certificates in a batch by
creating a directory, copying multiple .csr files into that directory, and then specifying
that directory on the command line. The following commands show how to create a batch of
certificates given a batch of CSRs. Assuming a set of CSRs are located inside of the
directory my-csr-directory: On Linux and OS X, the command is:  ls my-csr-directory/ |
xargs -I {} aws iot create-certificate-from-csr --certificate-signing-request
file://my-csr-directory/{} This command lists all of the CSRs in my-csr-directory and pipes
each CSR file name to the aws iot create-certificate-from-csr Amazon Web Services CLI
command to create a certificate for the corresponding CSR. The aws iot
create-certificate-from-csr part of the command can also be run in parallel to speed up the
certificate creation process:  ls my-csr-directory/ | xargs -P 10 -I {} aws iot
create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{} On
Windows PowerShell, the command to create certificates for all CSRs in my-csr-directory is:
&gt; ls -Name my-csr-directory | %{aws iot create-certificate-from-csr
--certificate-signing-request file://my-csr-directory/_} On a Windows command prompt, the
command to create certificates for all CSRs in my-csr-directory is: &gt; forfiles /p
my-csr-directory /c \"cmd /c aws iot create-certificate-from-csr
--certificate-signing-request file://@path\"

# Arguments
- `certificate_signing_request`: The certificate signing request (CSR).

# Keyword Parameters
- `set_as_active`: Specifies whether the certificate is active.
"""
function create_certificate_from_csr(certificateSigningRequest; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/certificates", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("certificateSigningRequest"=>certificateSigningRequest), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_custom_metric(client_request_token, metric_name, metric_type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Use this API to define a Custom Metric published by your devices to Device Defender.
Requires permission to access the CreateCustomMetric action.

# Arguments
- `client_request_token`: Each custom metric must have a unique client request token. If
  you try to create a new custom metric that already exists with a different token, an
  exception occurs. If you omit this value, Amazon Web Services SDKs will automatically
  generate a unique client request.
- `metric_name`:  The name of the custom metric. This will be used in the metric report
  submitted from the device/thing. Shouldn't begin with aws:. Cannot be updated once defined.
- `metric_type`:  The type of the custom metric. Types include string-list,
  ip-address-list, number-list, and number.

# Keyword Parameters
- `display_name`:  Field represents a friendly name in the console for the custom metric;
  it doesn't have to be unique. Don't use this name as the metric identifier in the device
  metric report. Can be updated once defined.
- `tags`:  Metadata that can be used to manage the custom metric.
"""
function create_custom_metric(clientRequestToken, metricName, metricType; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/custom-metric/$(metricName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("clientRequestToken"=>clientRequestToken, "metricType"=>metricType), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_dimension(client_request_token, name, string_values, type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Create a dimension that you can use to limit the scope of a metric used in a security
profile for IoT Device Defender. For example, using a TOPIC_FILTER dimension, you can
narrow down the scope of the metric only to MQTT topics whose name match the pattern
specified in the dimension. Requires permission to access the CreateDimension action.

# Arguments
- `client_request_token`: Each dimension must have a unique client request token. If you
  try to create a new dimension with the same token as a dimension that already exists, an
  exception occurs. If you omit this value, Amazon Web Services SDKs will automatically
  generate a unique client request.
- `name`: A unique identifier for the dimension. Choose something that describes the type
  and value to make it easy to remember what it does.
- `string_values`: Specifies the value or list of values for the dimension. For
  TOPIC_FILTER dimensions, this is a pattern used to match the MQTT topic (for example,
  \"admin/#\").
- `type`: Specifies the type of dimension. Supported types: TOPIC_FILTER.

# Keyword Parameters
- `tags`: Metadata that can be used to manage the dimension.
"""
function create_dimension(clientRequestToken, name, stringValues, type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/dimensions/$(name)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("clientRequestToken"=>clientRequestToken, "stringValues"=>stringValues, "type"=>type), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_domain_configuration(domain_configuration_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a domain configuration. Requires permission to access the CreateDomainConfiguration
action.

# Arguments
- `domain_configuration_name`: The name of the domain configuration. This value must be
  unique to a region.

# Keyword Parameters
- `authorizer_config`: An object that specifies the authorization service for a domain.
- `domain_name`: The name of the domain.
- `server_certificate_arns`: The ARNs of the certificates that IoT passes to the device
  during the TLS handshake. Currently you can specify only one certificate ARN. This value is
  not required for Amazon Web Services-managed domains.
- `service_type`: The type of service delivered by the endpoint.  Amazon Web Services IoT
  Core currently supports only the DATA service type.
- `tags`: Metadata which can be used to manage the domain configuration.  For URI Request
  parameters use format: ...key1=value1&amp;key2=value2... For the CLI command-line parameter
  use format: &amp;&amp;tags \"key1=value1&amp;key2=value2...\" For the cli-input-json file
  use format: \"tags\": \"key1=value1&amp;key2=value2...\"
- `validation_certificate_arn`: The certificate used to validate the server certificate and
  prove domain name ownership. This certificate must be signed by a public certificate
  authority. This value is not required for Amazon Web Services-managed domains.
"""
function create_domain_configuration(domainConfigurationName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/domainConfigurations/$(domainConfigurationName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_dynamic_thing_group(query_string, thing_group_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a dynamic thing group. Requires permission to access the CreateDynamicThingGroup
action.

# Arguments
- `query_string`: The dynamic thing group search query string. See Query Syntax for
  information about query string syntax.
- `thing_group_name`: The dynamic thing group name to create.

# Keyword Parameters
- `index_name`: The dynamic thing group index name.  Currently one index is supported:
  AWS_Things.
- `query_version`: The dynamic thing group query version.  Currently one query version is
  supported: \"2017-09-30\". If not specified, the query version defaults to this value.
- `tags`: Metadata which can be used to manage the dynamic thing group.
- `thing_group_properties`: The dynamic thing group properties.
"""
function create_dynamic_thing_group(queryString, thingGroupName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/dynamic-thing-groups/$(thingGroupName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("queryString"=>queryString), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_fleet_metric(aggregation_field, aggregation_type, metric_name, period, query_string; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a fleet metric. Requires permission to access the CreateFleetMetric action.

# Arguments
- `aggregation_field`: The field to aggregate.
- `aggregation_type`: The type of the aggregation query.
- `metric_name`: The name of the fleet metric to create.
- `period`: The time in seconds between fleet metric emissions. Range [60(1 min), 86400(1
  day)] and must be multiple of 60.
- `query_string`: The search query string.

# Keyword Parameters
- `description`: The fleet metric description.
- `index_name`: The name of the index to search.
- `query_version`: The query version.
- `tags`: Metadata, which can be used to manage the fleet metric.
- `unit`: Used to support unit transformation such as milliseconds to seconds. The unit
  must be supported by CW metric. Default to null.
"""
function create_fleet_metric(aggregationField, aggregationType, metricName, period, queryString; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PUT", "/fleet-metric/$(metricName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("aggregationField"=>aggregationField, "aggregationType"=>aggregationType, "period"=>period, "queryString"=>queryString), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_job(job_id, targets; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a job. Requires permission to access the CreateJob action.

# Arguments
- `job_id`: A job identifier which must be unique for your Amazon Web Services account. We
  recommend using a UUID. Alpha-numeric characters, \"-\" and \"_\" are valid for use here.
- `targets`: A list of things and thing groups to which the job should be sent.

# Keyword Parameters
- `abort_config`: Allows you to create criteria to abort a job.
- `description`: A short text description of the job.
- `document`: The job document. Required if you don't specify a value for documentSource.
- `document_source`: An S3 link to the job document. Required if you don't specify a value
  for document.  If the job document resides in an S3 bucket, you must use a placeholder link
  when specifying the document. The placeholder link is of the following form:
  {aws:iot:s3-presigned-url:https://s3.amazonaws.com/bucket/key}  where bucket is your bucket
  name and key is the object in the bucket to which you are linking.
- `job_executions_rollout_config`: Allows you to create a staged rollout of the job.
- `job_template_arn`: The ARN of the job template used to create the job.
- `namespace_id`: The namespace used to indicate that a job is a customer-managed job. When
  you specify a value for this parameter, Amazon Web Services IoT Core sends jobs
  notifications to MQTT topics that contain the value in the following format.
  aws/things/THING_NAME/jobs/JOB_ID/notify-namespace-NAMESPACE_ID/   The namespaceId feature
  is in public preview.
- `presigned_url_config`: Configuration information for pre-signed S3 URLs.
- `tags`: Metadata which can be used to manage the job.
- `target_selection`: Specifies whether the job will continue to run (CONTINUOUS), or will
  be complete after all those things specified as targets have completed the job (SNAPSHOT).
  If continuous, the job may also be run on a thing when a change is detected in a target.
  For example, a job will run on a thing when the thing is added to a target group, even
  after the job was completed by all things originally in the group.
- `timeout_config`: Specifies the amount of time each device has to finish its execution of
  the job. The timer is started when the job execution status is set to IN_PROGRESS. If the
  job execution status is not set to another terminal state before the time expires, it will
  be automatically set to TIMED_OUT.
"""
function create_job(jobId, targets; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PUT", "/jobs/$(jobId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("targets"=>targets), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_job_template(description, job_template_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a job template. Requires permission to access the CreateJobTemplate action.

# Arguments
- `description`: A description of the job document.
- `job_template_id`: A unique identifier for the job template. We recommend using a UUID.
  Alpha-numeric characters, \"-\", and \"_\" are valid for use here.

# Keyword Parameters
- `abort_config`:
- `document`: The job document. Required if you don't specify a value for documentSource.
- `document_source`: An S3 link to the job document to use in the template. Required if you
  don't specify a value for document.  If the job document resides in an S3 bucket, you must
  use a placeholder link when specifying the document. The placeholder link is of the
  following form:  {aws:iot:s3-presigned-url:https://s3.amazonaws.com/bucket/key}  where
  bucket is your bucket name and key is the object in the bucket to which you are linking.
- `job_arn`: The ARN of the job to use as the basis for the job template.
- `job_executions_rollout_config`:
- `presigned_url_config`:
- `tags`: Metadata that can be used to manage the job template.
- `timeout_config`:
"""
function create_job_template(description, jobTemplateId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PUT", "/job-templates/$(jobTemplateId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("description"=>description), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_keys_and_certificate(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a 2048-bit RSA key pair and issues an X.509 certificate using the issued public
key. You can also call CreateKeysAndCertificate over MQTT from a device, for more
information, see Provisioning MQTT API.  Note This is the only time IoT issues the private
key for this certificate, so it is important to keep it in a secure location. Requires
permission to access the CreateKeysAndCertificate action.

# Keyword Parameters
- `set_as_active`: Specifies whether the certificate is active.
"""
function create_keys_and_certificate(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/keys-and-certificate", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_mitigation_action(action_name, action_params, role_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Defines an action that can be applied to audit findings by using
StartAuditMitigationActionsTask. Only certain types of mitigation actions can be applied to
specific check names. For more information, see Mitigation actions. Each mitigation action
can apply only one type of change. Requires permission to access the CreateMitigationAction
action.

# Arguments
- `action_name`: A friendly name for the action. Choose a friendly name that accurately
  describes the action (for example, EnableLoggingAction).
- `action_params`: Defines the type of action and the parameters for that action.
- `role_arn`: The ARN of the IAM role that is used to apply the mitigation action.

# Keyword Parameters
- `tags`: Metadata that can be used to manage the mitigation action.
"""
function create_mitigation_action(actionName, actionParams, roleArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/mitigationactions/actions/$(actionName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("actionParams"=>actionParams, "roleArn"=>roleArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_otaupdate(files, ota_update_id, role_arn, targets; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an IoT OTA update on a target group of things or groups. Requires permission to
access the CreateOTAUpdate action.

# Arguments
- `files`: The files to be streamed by the OTA update.
- `ota_update_id`: The ID of the OTA update to be created.
- `role_arn`: The IAM role that grants Amazon Web Services IoT Core access to the Amazon
  S3, IoT jobs and Amazon Web Services Code Signing resources to create an OTA update job.
- `targets`: The devices targeted to receive OTA updates.

# Keyword Parameters
- `additional_parameters`: A list of additional OTA update parameters which are name-value
  pairs.
- `aws_job_abort_config`: The criteria that determine when and how a job abort takes place.
- `aws_job_executions_rollout_config`: Configuration for the rollout of OTA updates.
- `aws_job_presigned_url_config`: Configuration information for pre-signed URLs.
- `aws_job_timeout_config`: Specifies the amount of time each device has to finish its
  execution of the job. A timer is started when the job execution status is set to
  IN_PROGRESS. If the job execution status is not set to another terminal state before the
  timer expires, it will be automatically set to TIMED_OUT.
- `description`: The description of the OTA update.
- `protocols`: The protocol used to transfer the OTA update image. Valid values are [HTTP],
  [MQTT], [HTTP, MQTT]. When both HTTP and MQTT are specified, the target device can choose
  the protocol.
- `tags`: Metadata which can be used to manage updates.
- `target_selection`: Specifies whether the update will continue to run (CONTINUOUS), or
  will be complete after all the things specified as targets have completed the update
  (SNAPSHOT). If continuous, the update may also be run on a thing when a change is detected
  in a target. For example, an update will run on a thing when the thing is added to a target
  group, even after the update was completed by all things originally in the group. Valid
  values: CONTINUOUS | SNAPSHOT.
"""
function create_otaupdate(files, otaUpdateId, roleArn, targets; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/otaUpdates/$(otaUpdateId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("files"=>files, "roleArn"=>roleArn, "targets"=>targets), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_policy(policy_document, policy_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an IoT policy. The created policy is the default version for the policy. This
operation creates a policy version with a version identifier of 1 and sets 1 as the
policy's default version. Requires permission to access the CreatePolicy action.

# Arguments
- `policy_document`: The JSON document that describes the policy. policyDocument must have
  a minimum length of 1, with a maximum length of 2048, excluding whitespace.
- `policy_name`: The policy name.

# Keyword Parameters
- `tags`: Metadata which can be used to manage the policy.  For URI Request parameters use
  format: ...key1=value1&amp;key2=value2... For the CLI command-line parameter use format:
  &amp;&amp;tags \"key1=value1&amp;key2=value2...\" For the cli-input-json file use format:
  \"tags\": \"key1=value1&amp;key2=value2...\"
"""
function create_policy(policyDocument, policyName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/policies/$(policyName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("policyDocument"=>policyDocument), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_policy_version(policy_document, policy_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a new version of the specified IoT policy. To update a policy, create a new policy
version. A managed policy can have up to five versions. If the policy has five versions,
you must use DeletePolicyVersion to delete an existing version before you create a new one.
Optionally, you can set the new version as the policy's default version. The default
version is the operative version (that is, the version that is in effect for the
certificates to which the policy is attached). Requires permission to access the
CreatePolicyVersion action.

# Arguments
- `policy_document`: The JSON document that describes the policy. Minimum length of 1.
  Maximum length of 2048, excluding whitespace.
- `policy_name`: The policy name.

# Keyword Parameters
- `set_as_default`: Specifies whether the policy version is set as the default. When this
  parameter is true, the new policy version becomes the operative version (that is, the
  version that is in effect for the certificates to which the policy is attached).
"""
function create_policy_version(policyDocument, policyName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/policies/$(policyName)/version", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("policyDocument"=>policyDocument), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_provisioning_claim(template_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a provisioning claim. Requires permission to access the CreateProvisioningClaim
action.

# Arguments
- `template_name`: The name of the provisioning template to use.

"""
function create_provisioning_claim(templateName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/provisioning-templates/$(templateName)/provisioning-claim", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_provisioning_template(provisioning_role_arn, template_body, template_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a fleet provisioning template. Requires permission to access the
CreateProvisioningTemplate action.

# Arguments
- `provisioning_role_arn`: The role ARN for the role associated with the fleet provisioning
  template. This IoT role grants permission to provision a device.
- `template_body`: The JSON formatted contents of the fleet provisioning template.
- `template_name`: The name of the fleet provisioning template.

# Keyword Parameters
- `description`: The description of the fleet provisioning template.
- `enabled`: True to enable the fleet provisioning template, otherwise false.
- `pre_provisioning_hook`: Creates a pre-provisioning hook template.
- `tags`: Metadata which can be used to manage the fleet provisioning template.  For URI
  Request parameters use format: ...key1=value1&amp;key2=value2... For the CLI command-line
  parameter use format: &amp;&amp;tags \"key1=value1&amp;key2=value2...\" For the
  cli-input-json file use format: \"tags\": \"key1=value1&amp;key2=value2...\"
"""
function create_provisioning_template(provisioningRoleArn, templateBody, templateName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/provisioning-templates", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("provisioningRoleArn"=>provisioningRoleArn, "templateBody"=>templateBody, "templateName"=>templateName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_provisioning_template_version(template_body, template_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a new version of a fleet provisioning template. Requires permission to access the
CreateProvisioningTemplateVersion action.

# Arguments
- `template_body`: The JSON formatted contents of the fleet provisioning template.
- `template_name`: The name of the fleet provisioning template.

# Keyword Parameters
- `set_as_default`: Sets a fleet provision template version as the default version.
"""
function create_provisioning_template_version(templateBody, templateName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/provisioning-templates/$(templateName)/versions", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("templateBody"=>templateBody), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_role_alias(role_alias, role_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a role alias. Requires permission to access the CreateRoleAlias action.

# Arguments
- `role_alias`: The role alias that points to a role ARN. This allows you to change the
  role without having to update the device.
- `role_arn`: The role ARN.

# Keyword Parameters
- `credential_duration_seconds`: How long (in seconds) the credentials will be valid. The
  default value is 3,600 seconds.
- `tags`: Metadata which can be used to manage the role alias.  For URI Request parameters
  use format: ...key1=value1&amp;key2=value2... For the CLI command-line parameter use
  format: &amp;&amp;tags \"key1=value1&amp;key2=value2...\" For the cli-input-json file use
  format: \"tags\": \"key1=value1&amp;key2=value2...\"
"""
function create_role_alias(roleAlias, roleArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/role-aliases/$(roleAlias)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("roleArn"=>roleArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_scheduled_audit(frequency, scheduled_audit_name, target_check_names; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a scheduled audit that is run at a specified time interval. Requires permission to
access the CreateScheduledAudit action.

# Arguments
- `frequency`: How often the scheduled audit takes place, either DAILY, WEEKLY, BIWEEKLY or
  MONTHLY. The start time of each audit is determined by the system.
- `scheduled_audit_name`: The name you want to give to the scheduled audit. (Max. 128 chars)
- `target_check_names`: Which checks are performed during the scheduled audit. Checks must
  be enabled for your account. (Use DescribeAccountAuditConfiguration to see the list of all
  checks, including those that are enabled or use UpdateAccountAuditConfiguration to select
  which checks are enabled.)

# Keyword Parameters
- `day_of_month`: The day of the month on which the scheduled audit takes place. This can
  be \"1\" through \"31\" or \"LAST\". This field is required if the \"frequency\" parameter
  is set to MONTHLY. If days 29 to 31 are specified, and the month doesn't have that many
  days, the audit takes place on the LAST day of the month.
- `day_of_week`: The day of the week on which the scheduled audit takes place, either SUN,
  MON, TUE, WED, THU, FRI, or SAT. This field is required if the frequency parameter is set
  to WEEKLY or BIWEEKLY.
- `tags`: Metadata that can be used to manage the scheduled audit.
"""
function create_scheduled_audit(frequency, scheduledAuditName, targetCheckNames; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/audit/scheduledaudits/$(scheduledAuditName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("frequency"=>frequency, "targetCheckNames"=>targetCheckNames), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_security_profile(security_profile_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a Device Defender security profile. Requires permission to access the
CreateSecurityProfile action.

# Arguments
- `security_profile_name`: The name you are giving to the security profile.

# Keyword Parameters
- `additional_metrics_to_retain`:  Please use
  CreateSecurityProfileRequestadditionalMetricsToRetainV2 instead.  A list of metrics whose
  data is retained (stored). By default, data is retained for any metric used in the
  profile's behaviors, but it is also retained for any metric specified here. Can be used
  with custom metrics; cannot be used with dimensions.
- `additional_metrics_to_retain_v2`: A list of metrics whose data is retained (stored). By
  default, data is retained for any metric used in the profile's behaviors, but it is also
  retained for any metric specified here. Can be used with custom metrics; cannot be used
  with dimensions.
- `alert_targets`: Specifies the destinations to which alerts are sent. (Alerts are always
  sent to the console.) Alerts are generated when a device (thing) violates a behavior.
- `behaviors`: Specifies the behaviors that, when violated by a device (thing), cause an
  alert.
- `security_profile_description`: A description of the security profile.
- `tags`: Metadata that can be used to manage the security profile.
"""
function create_security_profile(securityProfileName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/security-profiles/$(securityProfileName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_stream(files, role_arn, stream_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a stream for delivering one or more large files in chunks over MQTT. A stream
transports data bytes in chunks or blocks packaged as MQTT messages from a source like S3.
You can have one or more files associated with a stream. Requires permission to access the
CreateStream action.

# Arguments
- `files`: The files to stream.
- `role_arn`: An IAM role that allows the IoT service principal assumes to access your S3
  files.
- `stream_id`: The stream ID.

# Keyword Parameters
- `description`: A description of the stream.
- `tags`: Metadata which can be used to manage streams.
"""
function create_stream(files, roleArn, streamId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/streams/$(streamId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("files"=>files, "roleArn"=>roleArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_thing(thing_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a thing record in the registry. If this call is made multiple times using the same
thing name and configuration, the call will succeed. If this call is made with the same
thing name but different configuration a ResourceAlreadyExistsException is thrown.  This is
a control plane operation. See Authorization for information about authorizing control
plane actions.  Requires permission to access the CreateThing action.

# Arguments
- `thing_name`: The name of the thing to create. You can't change a thing's name after you
  create it. To change a thing's name, you must create a new thing, give it the new name, and
  then delete the old thing.

# Keyword Parameters
- `attribute_payload`: The attribute payload, which consists of up to three name/value
  pairs in a JSON document. For example:  {\"attributes\":{\"string1\":\"string2\"}}
- `billing_group_name`: The name of the billing group the thing will be added to.
- `thing_type_name`: The name of the thing type associated with the new thing.
"""
function create_thing(thingName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/things/$(thingName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_thing_group(thing_group_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Create a thing group.  This is a control plane operation. See Authorization for information
about authorizing control plane actions.  Requires permission to access the
CreateThingGroup action.

# Arguments
- `thing_group_name`: The thing group name to create.

# Keyword Parameters
- `parent_group_name`: The name of the parent thing group.
- `tags`: Metadata which can be used to manage the thing group.
- `thing_group_properties`: The thing group properties.
"""
function create_thing_group(thingGroupName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/thing-groups/$(thingGroupName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_thing_type(thing_type_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a new thing type. Requires permission to access the CreateThingType action.

# Arguments
- `thing_type_name`: The name of the thing type.

# Keyword Parameters
- `tags`: Metadata which can be used to manage the thing type.
- `thing_type_properties`: The ThingTypeProperties for the thing type to create. It
  contains information about the new thing type including a description, and a list of
  searchable thing attribute names.
"""
function create_thing_type(thingTypeName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/thing-types/$(thingTypeName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_topic_rule(rule_name, topic_rule_payload; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a rule. Creating rules is an administrator-level action. Any user who has
permission to create rules will be able to access data processed by the rule. Requires
permission to access the CreateTopicRule action.

# Arguments
- `rule_name`: The name of the rule.
- `topic_rule_payload`: The rule payload.

# Keyword Parameters
- `tags`: Metadata which can be used to manage the topic rule.  For URI Request parameters
  use format: ...key1=value1&amp;key2=value2... For the CLI command-line parameter use
  format: --tags \"key1=value1&amp;key2=value2...\" For the cli-input-json file use format:
  \"tags\": \"key1=value1&amp;key2=value2...\"
"""
function create_topic_rule(ruleName, topicRulePayload; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/rules/$(ruleName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("topicRulePayload"=>topicRulePayload), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_topic_rule_destination(destination_configuration; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a topic rule destination. The destination must be confirmed prior to use. Requires
permission to access the CreateTopicRuleDestination action.

# Arguments
- `destination_configuration`: The topic rule destination configuration.

"""
function create_topic_rule_destination(destinationConfiguration; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/destinations", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("destinationConfiguration"=>destinationConfiguration), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_account_audit_configuration(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Restores the default settings for Device Defender audits for this account. Any
configuration data you entered is deleted and all audit checks are reset to disabled.
Requires permission to access the DeleteAccountAuditConfiguration action.

# Keyword Parameters
- `delete_scheduled_audits`: If true, all scheduled audits are deleted.
"""
function delete_account_audit_configuration(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/audit/configuration", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_audit_suppression(check_name, resource_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Deletes a Device Defender audit suppression.  Requires permission to access the
DeleteAuditSuppression action.

# Arguments
- `check_name`:
- `resource_identifier`:

"""
function delete_audit_suppression(checkName, resourceIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/audit/suppressions/delete", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("checkName"=>checkName, "resourceIdentifier"=>resourceIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_authorizer(authorizer_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes an authorizer. Requires permission to access the DeleteAuthorizer action.

# Arguments
- `authorizer_name`: The name of the authorizer to delete.

"""
function delete_authorizer(authorizerName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/authorizer/$(authorizerName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_billing_group(billing_group_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the billing group. Requires permission to access the DeleteBillingGroup action.

# Arguments
- `billing_group_name`: The name of the billing group.

# Keyword Parameters
- `expected_version`: The expected version of the billing group. If the version of the
  billing group does not match the expected version specified in the request, the
  DeleteBillingGroup request is rejected with a VersionConflictException.
"""
function delete_billing_group(billingGroupName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/billing-groups/$(billingGroupName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_cacertificate(ca_certificate_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a registered CA certificate. Requires permission to access the DeleteCACertificate
action.

# Arguments
- `ca_certificate_id`: The ID of the certificate to delete. (The last part of the
  certificate ARN contains the certificate ID.)

"""
function delete_cacertificate(caCertificateId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/cacertificate/$(caCertificateId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_certificate(certificate_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the specified certificate. A certificate cannot be deleted if it has a policy or
IoT thing attached to it or if its status is set to ACTIVE. To delete a certificate, first
use the DetachPolicy action to detach all policies. Next, use the UpdateCertificate action
to set the certificate to the INACTIVE status. Requires permission to access the
DeleteCertificate action.

# Arguments
- `certificate_id`: The ID of the certificate. (The last part of the certificate ARN
  contains the certificate ID.)

# Keyword Parameters
- `force_delete`: Forces the deletion of a certificate if it is inactive and is not
  attached to an IoT thing.
"""
function delete_certificate(certificateId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/certificates/$(certificateId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_custom_metric(metric_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Deletes a Device Defender detect custom metric.  Requires permission to access the
DeleteCustomMetric action.  Before you can delete a custom metric, you must first remove
the custom metric from all security profiles it's a part of. The security profile
associated with the custom metric can be found using the ListSecurityProfiles API with
metricName set to your custom metric name.

# Arguments
- `metric_name`:  The name of the custom metric.

"""
function delete_custom_metric(metricName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/custom-metric/$(metricName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_dimension(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes the specified dimension from your Amazon Web Services accounts. Requires permission
to access the DeleteDimension action.

# Arguments
- `name`: The unique identifier for the dimension that you want to delete.

"""
function delete_dimension(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/dimensions/$(name)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_domain_configuration(domain_configuration_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the specified domain configuration. Requires permission to access the
DeleteDomainConfiguration action.

# Arguments
- `domain_configuration_name`: The name of the domain configuration to be deleted.

"""
function delete_domain_configuration(domainConfigurationName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/domainConfigurations/$(domainConfigurationName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_dynamic_thing_group(thing_group_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a dynamic thing group. Requires permission to access the DeleteDynamicThingGroup
action.

# Arguments
- `thing_group_name`: The name of the dynamic thing group to delete.

# Keyword Parameters
- `expected_version`: The expected version of the dynamic thing group to delete.
"""
function delete_dynamic_thing_group(thingGroupName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/dynamic-thing-groups/$(thingGroupName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_fleet_metric(metric_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the specified fleet metric. Returns successfully with no error if the deletion is
successful or you specify a fleet metric that doesn't exist. Requires permission to access
the DeleteFleetMetric action.

# Arguments
- `metric_name`: The name of the fleet metric to delete.

# Keyword Parameters
- `expected_version`: The expected version of the fleet metric to delete.
"""
function delete_fleet_metric(metricName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/fleet-metric/$(metricName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_job(job_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a job and its related job executions. Deleting a job may take time, depending on
the number of job executions created for the job and various other factors. While the job
is being deleted, the status of the job will be shown as \"DELETION_IN_PROGRESS\".
Attempting to delete or cancel a job whose status is already \"DELETION_IN_PROGRESS\" will
result in an error. Only 10 jobs may have status \"DELETION_IN_PROGRESS\" at the same time,
or a LimitExceededException will occur. Requires permission to access the DeleteJob action.

# Arguments
- `job_id`: The ID of the job to be deleted. After a job deletion is completed, you may
  reuse this jobId when you create a new job. However, this is not recommended, and you must
  ensure that your devices are not using the jobId to refer to the deleted job.

# Keyword Parameters
- `force`: (Optional) When true, you can delete a job which is \"IN_PROGRESS\". Otherwise,
  you can only delete a job which is in a terminal state (\"COMPLETED\" or \"CANCELED\") or
  an exception will occur. The default is false.  Deleting a job which is \"IN_PROGRESS\",
  will cause a device which is executing the job to be unable to access job information or
  update the job execution status. Use caution and ensure that each device executing a job
  which is deleted is able to recover to a valid state.
- `namespace_id`: The namespace used to indicate that a job is a customer-managed job. When
  you specify a value for this parameter, Amazon Web Services IoT Core sends jobs
  notifications to MQTT topics that contain the value in the following format.
  aws/things/THING_NAME/jobs/JOB_ID/notify-namespace-NAMESPACE_ID/   The namespaceId feature
  is in public preview.
"""
function delete_job(jobId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/jobs/$(jobId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_job_execution(execution_number, job_id, thing_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a job execution. Requires permission to access the DeleteJobExecution action.

# Arguments
- `execution_number`: The ID of the job execution to be deleted. The executionNumber refers
  to the execution of a particular job on a particular device. Note that once a job execution
  is deleted, the executionNumber may be reused by IoT, so be sure you get and use the
  correct value here.
- `job_id`: The ID of the job whose execution on a particular device will be deleted.
- `thing_name`: The name of the thing whose job execution will be deleted.

# Keyword Parameters
- `force`: (Optional) When true, you can delete a job execution which is \"IN_PROGRESS\".
  Otherwise, you can only delete a job execution which is in a terminal state (\"SUCCEEDED\",
  \"FAILED\", \"REJECTED\", \"REMOVED\" or \"CANCELED\") or an exception will occur. The
  default is false.  Deleting a job execution which is \"IN_PROGRESS\", will cause the device
  to be unable to access job information or update the job execution status. Use caution and
  ensure that the device is able to recover to a valid state.
- `namespace_id`: The namespace used to indicate that a job is a customer-managed job. When
  you specify a value for this parameter, Amazon Web Services IoT Core sends jobs
  notifications to MQTT topics that contain the value in the following format.
  aws/things/THING_NAME/jobs/JOB_ID/notify-namespace-NAMESPACE_ID/   The namespaceId feature
  is in public preview.
"""
function delete_job_execution(executionNumber, jobId, thingName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/things/$(thingName)/jobs/$(jobId)/executionNumber/$(executionNumber)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_job_template(job_template_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the specified job template.

# Arguments
- `job_template_id`: The unique identifier of the job template to delete.

"""
function delete_job_template(jobTemplateId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/job-templates/$(jobTemplateId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_mitigation_action(action_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a defined mitigation action from your Amazon Web Services accounts. Requires
permission to access the DeleteMitigationAction action.

# Arguments
- `action_name`: The name of the mitigation action that you want to delete.

"""
function delete_mitigation_action(actionName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/mitigationactions/actions/$(actionName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_otaupdate(ota_update_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Delete an OTA update. Requires permission to access the DeleteOTAUpdate action.

# Arguments
- `ota_update_id`: The ID of the OTA update to delete.

# Keyword Parameters
- `delete_stream`: When true, the stream created by the OTAUpdate process is deleted when
  the OTA update is deleted. Ignored if the stream specified in the OTAUpdate is supplied by
  the user.
- `force_delete_awsjob`: When true, deletes the IoT job created by the OTAUpdate process
  even if it is \"IN_PROGRESS\". Otherwise, if the job is not in a terminal state
  (\"COMPLETED\" or \"CANCELED\") an exception will occur. The default is false.
"""
function delete_otaupdate(otaUpdateId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/otaUpdates/$(otaUpdateId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_policy(policy_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the specified policy. A policy cannot be deleted if it has non-default versions or
it is attached to any certificate. To delete a policy, use the DeletePolicyVersion action
to delete all non-default versions of the policy; use the DetachPolicy action to detach the
policy from any certificate; and then use the DeletePolicy action to delete the policy.
When a policy is deleted using DeletePolicy, its default version is deleted with it.
Because of the distributed nature of Amazon Web Services, it can take up to five minutes
after a policy is detached before it's ready to be deleted.  Requires permission to access
the DeletePolicy action.

# Arguments
- `policy_name`: The name of the policy to delete.

"""
function delete_policy(policyName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/policies/$(policyName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_policy_version(policy_name, policy_version_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the specified version of the specified policy. You cannot delete the default
version of a policy using this action. To delete the default version of a policy, use
DeletePolicy. To find out which version of a policy is marked as the default version, use
ListPolicyVersions. Requires permission to access the DeletePolicyVersion action.

# Arguments
- `policy_name`: The name of the policy.
- `policy_version_id`: The policy version ID.

"""
function delete_policy_version(policyName, policyVersionId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/policies/$(policyName)/version/$(policyVersionId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_provisioning_template(template_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a fleet provisioning template. Requires permission to access the
DeleteProvisioningTemplate action.

# Arguments
- `template_name`: The name of the fleet provision template to delete.

"""
function delete_provisioning_template(templateName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/provisioning-templates/$(templateName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_provisioning_template_version(template_name, version_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a fleet provisioning template version. Requires permission to access the
DeleteProvisioningTemplateVersion action.

# Arguments
- `template_name`: The name of the fleet provisioning template version to delete.
- `version_id`: The fleet provisioning template version ID to delete.

"""
function delete_provisioning_template_version(templateName, versionId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/provisioning-templates/$(templateName)/versions/$(versionId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_registration_code(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a CA certificate registration code. Requires permission to access the
DeleteRegistrationCode action.

"""
function delete_registration_code(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/registrationcode", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_role_alias(role_alias; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a role alias Requires permission to access the DeleteRoleAlias action.

# Arguments
- `role_alias`: The role alias to delete.

"""
function delete_role_alias(roleAlias; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/role-aliases/$(roleAlias)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_scheduled_audit(scheduled_audit_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a scheduled audit. Requires permission to access the DeleteScheduledAudit action.

# Arguments
- `scheduled_audit_name`: The name of the scheduled audit you want to delete.

"""
function delete_scheduled_audit(scheduledAuditName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/audit/scheduledaudits/$(scheduledAuditName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_security_profile(security_profile_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a Device Defender security profile. Requires permission to access the
DeleteSecurityProfile action.

# Arguments
- `security_profile_name`: The name of the security profile to be deleted.

# Keyword Parameters
- `expected_version`: The expected version of the security profile. A new version is
  generated whenever the security profile is updated. If you specify a value that is
  different from the actual version, a VersionConflictException is thrown.
"""
function delete_security_profile(securityProfileName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/security-profiles/$(securityProfileName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_stream(stream_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a stream. Requires permission to access the DeleteStream action.

# Arguments
- `stream_id`: The stream ID.

"""
function delete_stream(streamId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/streams/$(streamId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_thing(thing_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the specified thing. Returns successfully with no error if the deletion is
successful or you specify a thing that doesn't exist. Requires permission to access the
DeleteThing action.

# Arguments
- `thing_name`: The name of the thing to delete.

# Keyword Parameters
- `expected_version`: The expected version of the thing record in the registry. If the
  version of the record in the registry does not match the expected version specified in the
  request, the DeleteThing request is rejected with a VersionConflictException.
"""
function delete_thing(thingName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/things/$(thingName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_thing_group(thing_group_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a thing group. Requires permission to access the DeleteThingGroup action.

# Arguments
- `thing_group_name`: The name of the thing group to delete.

# Keyword Parameters
- `expected_version`: The expected version of the thing group to delete.
"""
function delete_thing_group(thingGroupName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/thing-groups/$(thingGroupName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_thing_type(thing_type_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the specified thing type. You cannot delete a thing type if it has things
associated with it. To delete a thing type, first mark it as deprecated by calling
DeprecateThingType, then remove any associated things by calling UpdateThing to change the
thing type on any associated thing, and finally use DeleteThingType to delete the thing
type. Requires permission to access the DeleteThingType action.

# Arguments
- `thing_type_name`: The name of the thing type.

"""
function delete_thing_type(thingTypeName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/thing-types/$(thingTypeName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_topic_rule(rule_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the rule. Requires permission to access the DeleteTopicRule action.

# Arguments
- `rule_name`: The name of the rule.

"""
function delete_topic_rule(ruleName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/rules/$(ruleName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_topic_rule_destination(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a topic rule destination. Requires permission to access the
DeleteTopicRuleDestination action.

# Arguments
- `arn`: The ARN of the topic rule destination to delete.

"""
function delete_topic_rule_destination(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/destinations/$(arn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_v2_logging_level(target_name, target_type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a logging level. Requires permission to access the DeleteV2LoggingLevel action.

# Arguments
- `target_name`: The name of the resource for which you are configuring logging.
- `target_type`: The type of resource for which you are configuring logging. Must be
  THING_Group.

"""
function delete_v2_logging_level(targetName, targetType; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/v2LoggingLevel", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("targetName"=>targetName, "targetType"=>targetType), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    deprecate_thing_type(thing_type_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deprecates a thing type. You can not associate new things with deprecated thing type.
Requires permission to access the DeprecateThingType action.

# Arguments
- `thing_type_name`: The name of the thing type to deprecate.

# Keyword Parameters
- `undo_deprecate`: Whether to undeprecate a deprecated thing type. If true, the thing type
  will not be deprecated anymore and you can associate it with things.
"""
function deprecate_thing_type(thingTypeName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/thing-types/$(thingTypeName)/deprecate", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_account_audit_configuration(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about the Device Defender audit settings for this account. Settings
include how audit notifications are sent and which audit checks are enabled or disabled.
Requires permission to access the DescribeAccountAuditConfiguration action.

"""
function describe_account_audit_configuration(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/audit/configuration", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_audit_finding(finding_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about a single audit finding. Properties include the reason for
noncompliance, the severity of the issue, and the start time when the audit that returned
the finding. Requires permission to access the DescribeAuditFinding action.

# Arguments
- `finding_id`: A unique identifier for a single audit finding. You can use this identifier
  to apply mitigation actions to the finding.

"""
function describe_audit_finding(findingId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/audit/findings/$(findingId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_audit_mitigation_actions_task(task_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about an audit mitigation task that is used to apply mitigation actions to
a set of audit findings. Properties include the actions being applied, the audit checks to
which they're being applied, the task status, and aggregated task statistics.

# Arguments
- `task_id`: The unique identifier for the audit mitigation task.

"""
function describe_audit_mitigation_actions_task(taskId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/audit/mitigationactions/tasks/$(taskId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_audit_suppression(check_name, resource_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Gets information about a Device Defender audit suppression.

# Arguments
- `check_name`:
- `resource_identifier`:

"""
function describe_audit_suppression(checkName, resourceIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/audit/suppressions/describe", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("checkName"=>checkName, "resourceIdentifier"=>resourceIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_audit_task(task_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about a Device Defender audit. Requires permission to access the
DescribeAuditTask action.

# Arguments
- `task_id`: The ID of the audit whose information you want to get.

"""
function describe_audit_task(taskId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/audit/tasks/$(taskId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_authorizer(authorizer_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Describes an authorizer. Requires permission to access the DescribeAuthorizer action.

# Arguments
- `authorizer_name`: The name of the authorizer to describe.

"""
function describe_authorizer(authorizerName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/authorizer/$(authorizerName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_billing_group(billing_group_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about a billing group. Requires permission to access the
DescribeBillingGroup action.

# Arguments
- `billing_group_name`: The name of the billing group.

"""
function describe_billing_group(billingGroupName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/billing-groups/$(billingGroupName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_cacertificate(ca_certificate_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Describes a registered CA certificate. Requires permission to access the
DescribeCACertificate action.

# Arguments
- `ca_certificate_id`: The CA certificate identifier.

"""
function describe_cacertificate(caCertificateId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/cacertificate/$(caCertificateId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_certificate(certificate_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about the specified certificate. Requires permission to access the
DescribeCertificate action.

# Arguments
- `certificate_id`: The ID of the certificate. (The last part of the certificate ARN
  contains the certificate ID.)

"""
function describe_certificate(certificateId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/certificates/$(certificateId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_custom_metric(metric_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Gets information about a Device Defender detect custom metric.  Requires permission to
access the DescribeCustomMetric action.

# Arguments
- `metric_name`:  The name of the custom metric.

"""
function describe_custom_metric(metricName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/custom-metric/$(metricName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_default_authorizer(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Describes the default authorizer. Requires permission to access the
DescribeDefaultAuthorizer action.

"""
function describe_default_authorizer(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/default-authorizer", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_detect_mitigation_actions_task(task_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Gets information about a Device Defender ML Detect mitigation action.  Requires permission
to access the DescribeDetectMitigationActionsTask action.

# Arguments
- `task_id`:  The unique identifier of the task.

"""
function describe_detect_mitigation_actions_task(taskId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/detect/mitigationactions/tasks/$(taskId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_dimension(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Provides details about a dimension that is defined in your Amazon Web Services accounts.
Requires permission to access the DescribeDimension action.

# Arguments
- `name`: The unique identifier for the dimension.

"""
function describe_dimension(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/dimensions/$(name)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_domain_configuration(domain_configuration_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets summary information about a domain configuration. Requires permission to access the
DescribeDomainConfiguration action.

# Arguments
- `domain_configuration_name`: The name of the domain configuration.

"""
function describe_domain_configuration(domainConfigurationName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/domainConfigurations/$(domainConfigurationName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_endpoint(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a unique endpoint specific to the Amazon Web Services account making the call.
Requires permission to access the DescribeEndpoint action.

# Keyword Parameters
- `endpoint_type`: The endpoint type. Valid endpoint types include:    iot:Data - Returns a
  VeriSign signed data endpoint.      iot:Data-ATS - Returns an ATS signed data endpoint.
   iot:CredentialProvider - Returns an IoT credentials provider API endpoint.      iot:Jobs -
  Returns an IoT device management Jobs API endpoint.   We strongly recommend that customers
  use the newer iot:Data-ATS endpoint type to avoid issues related to the widespread distrust
  of Symantec certificate authorities.
"""
function describe_endpoint(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/endpoint", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_event_configurations(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Describes event configurations. Requires permission to access the
DescribeEventConfigurations action.

"""
function describe_event_configurations(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/event-configurations", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_fleet_metric(metric_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about the specified fleet metric. Requires permission to access the
DescribeFleetMetric action.

# Arguments
- `metric_name`: The name of the fleet metric to describe.

"""
function describe_fleet_metric(metricName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/fleet-metric/$(metricName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_index(index_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Describes a search index. Requires permission to access the DescribeIndex action.

# Arguments
- `index_name`: The index name.

"""
function describe_index(indexName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/indices/$(indexName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_job(job_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Describes a job. Requires permission to access the DescribeJob action.

# Arguments
- `job_id`: The unique identifier you assigned to this job when it was created.

"""
function describe_job(jobId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/jobs/$(jobId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_job_execution(job_id, thing_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Describes a job execution. Requires permission to access the DescribeJobExecution action.

# Arguments
- `job_id`: The unique identifier you assigned to this job when it was created.
- `thing_name`: The name of the thing on which the job execution is running.

# Keyword Parameters
- `execution_number`: A string (consisting of the digits \"0\" through \"9\" which is used
  to specify a particular job execution on a particular device.
"""
function describe_job_execution(jobId, thingName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/things/$(thingName)/jobs/$(jobId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_job_template(job_template_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about a job template.

# Arguments
- `job_template_id`: The unique identifier of the job template.

"""
function describe_job_template(jobTemplateId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/job-templates/$(jobTemplateId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_mitigation_action(action_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about a mitigation action. Requires permission to access the
DescribeMitigationAction action.

# Arguments
- `action_name`: The friendly name that uniquely identifies the mitigation action.

"""
function describe_mitigation_action(actionName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/mitigationactions/actions/$(actionName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_provisioning_template(template_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about a fleet provisioning template. Requires permission to access the
DescribeProvisioningTemplate action.

# Arguments
- `template_name`: The name of the fleet provisioning template.

"""
function describe_provisioning_template(templateName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/provisioning-templates/$(templateName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_provisioning_template_version(template_name, version_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about a fleet provisioning template version. Requires permission to
access the DescribeProvisioningTemplateVersion action.

# Arguments
- `template_name`: The template name.
- `version_id`: The fleet provisioning template version ID.

"""
function describe_provisioning_template_version(templateName, versionId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/provisioning-templates/$(templateName)/versions/$(versionId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_role_alias(role_alias; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Describes a role alias. Requires permission to access the DescribeRoleAlias action.

# Arguments
- `role_alias`: The role alias to describe.

"""
function describe_role_alias(roleAlias; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/role-aliases/$(roleAlias)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_scheduled_audit(scheduled_audit_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about a scheduled audit. Requires permission to access the
DescribeScheduledAudit action.

# Arguments
- `scheduled_audit_name`: The name of the scheduled audit whose information you want to get.

"""
function describe_scheduled_audit(scheduledAuditName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/audit/scheduledaudits/$(scheduledAuditName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_security_profile(security_profile_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about a Device Defender security profile. Requires permission to access
the DescribeSecurityProfile action.

# Arguments
- `security_profile_name`: The name of the security profile whose information you want to
  get.

"""
function describe_security_profile(securityProfileName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/security-profiles/$(securityProfileName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_stream(stream_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about a stream. Requires permission to access the DescribeStream action.

# Arguments
- `stream_id`: The stream ID.

"""
function describe_stream(streamId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/streams/$(streamId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_thing(thing_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about the specified thing. Requires permission to access the DescribeThing
action.

# Arguments
- `thing_name`: The name of the thing.

"""
function describe_thing(thingName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/things/$(thingName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_thing_group(thing_group_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Describe a thing group. Requires permission to access the DescribeThingGroup action.

# Arguments
- `thing_group_name`: The name of the thing group.

"""
function describe_thing_group(thingGroupName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/thing-groups/$(thingGroupName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_thing_registration_task(task_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Describes a bulk thing provisioning task. Requires permission to access the
DescribeThingRegistrationTask action.

# Arguments
- `task_id`: The task ID.

"""
function describe_thing_registration_task(taskId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/thing-registration-tasks/$(taskId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_thing_type(thing_type_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about the specified thing type. Requires permission to access the
DescribeThingType action.

# Arguments
- `thing_type_name`: The name of the thing type.

"""
function describe_thing_type(thingTypeName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/thing-types/$(thingTypeName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    detach_policy(policy_name, target; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Detaches a policy from the specified target.  Because of the distributed nature of Amazon
Web Services, it can take up to five minutes after a policy is detached before it's ready
to be deleted.  Requires permission to access the DetachPolicy action.

# Arguments
- `policy_name`: The policy to detach.
- `target`: The target from which the policy will be detached.

"""
function detach_policy(policyName, target; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/target-policies/$(policyName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("target"=>target), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    detach_principal_policy(policy_name, x-amzn-iot-principal; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes the specified policy from the specified certificate.  This action is deprecated.
Please use DetachPolicy instead.  Requires permission to access the DetachPrincipalPolicy
action.

# Arguments
- `policy_name`: The name of the policy to detach.
- `x-amzn-iot-principal`: The principal. Valid principals are CertificateArn
  (arn:aws:iot:region:accountId:cert/certificateId), thingGroupArn
  (arn:aws:iot:region:accountId:thinggroup/groupName) and CognitoId (region:id).

"""
function detach_principal_policy(policyName, x_amzn_iot_principal; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/principal-policies/$(policyName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("headers"=>Dict{String, Any}("x-amzn-iot-principal"=>x_amzn_iot_principal)), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    detach_security_profile(security_profile_name, security_profile_target_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Disassociates a Device Defender security profile from a thing group or from this account.
Requires permission to access the DetachSecurityProfile action.

# Arguments
- `security_profile_name`: The security profile that is detached.
- `security_profile_target_arn`: The ARN of the thing group from which the security profile
  is detached.

"""
function detach_security_profile(securityProfileName, securityProfileTargetArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/security-profiles/$(securityProfileName)/targets", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("securityProfileTargetArn"=>securityProfileTargetArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    detach_thing_principal(thing_name, x-amzn-principal; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Detaches the specified principal from the specified thing. A principal can be X.509
certificates, IAM users, groups, and roles, Amazon Cognito identities or federated
identities.  This call is asynchronous. It might take several seconds for the detachment to
propagate.  Requires permission to access the DetachThingPrincipal action.

# Arguments
- `thing_name`: The name of the thing.
- `x-amzn-principal`: If the principal is a certificate, this value must be ARN of the
  certificate. If the principal is an Amazon Cognito identity, this value must be the ID of
  the Amazon Cognito identity.

"""
function detach_thing_principal(thingName, x_amzn_principal; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("DELETE", "/things/$(thingName)/principals", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("headers"=>Dict{String, Any}("x-amzn-principal"=>x_amzn_principal)), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    disable_topic_rule(rule_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Disables the rule. Requires permission to access the DisableTopicRule action.

# Arguments
- `rule_name`: The name of the rule to disable.

"""
function disable_topic_rule(ruleName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/rules/$(ruleName)/disable", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    enable_topic_rule(rule_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Enables the rule. Requires permission to access the EnableTopicRule action.

# Arguments
- `rule_name`: The name of the topic rule to enable.

"""
function enable_topic_rule(ruleName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/rules/$(ruleName)/enable", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_behavior_model_training_summaries(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Returns a Device Defender's ML Detect Security Profile training model's status.  Requires
permission to access the GetBehaviorModelTrainingSummaries action.

# Keyword Parameters
- `max_results`:  The maximum number of results to return at one time. The default is 25.
- `next_token`:  The token for the next set of results.
- `security_profile_name`:  The name of the security profile.
"""
function get_behavior_model_training_summaries(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/behavior-model-training/summaries", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_buckets_aggregation(aggregation_field, buckets_aggregation_type, query_string; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Aggregates on indexed data with search queries pertaining to particular fields.  Requires
permission to access the GetBucketsAggregation action.

# Arguments
- `aggregation_field`: The aggregation field.
- `buckets_aggregation_type`: The basic control of the response shape and the bucket
  aggregation type to perform.
- `query_string`: The search query string.

# Keyword Parameters
- `index_name`: The name of the index to search.
- `query_version`: The version of the query.
"""
function get_buckets_aggregation(aggregationField, bucketsAggregationType, queryString; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/indices/buckets", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("aggregationField"=>aggregationField, "bucketsAggregationType"=>bucketsAggregationType, "queryString"=>queryString), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_cardinality(query_string; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns the approximate count of unique values that match the query. Requires permission to
access the GetCardinality action.

# Arguments
- `query_string`: The search query string.

# Keyword Parameters
- `aggregation_field`: The field to aggregate.
- `index_name`: The name of the index to search.
- `query_version`: The query version.
"""
function get_cardinality(queryString; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/indices/cardinality", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("queryString"=>queryString), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_effective_policies(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets a list of the policies that have an effect on the authorization behavior of the
specified device when it connects to the IoT device gateway. Requires permission to access
the GetEffectivePolicies action.

# Keyword Parameters
- `cognito_identity_pool_id`: The Cognito identity pool ID.
- `principal`: The principal. Valid principals are CertificateArn
  (arn:aws:iot:region:accountId:cert/certificateId), thingGroupArn
  (arn:aws:iot:region:accountId:thinggroup/groupName) and CognitoId (region:id).
- `thing_name`: The thing name.
"""
function get_effective_policies(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/effective-policies", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_indexing_configuration(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets the indexing configuration. Requires permission to access the GetIndexingConfiguration
action.

"""
function get_indexing_configuration(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/indexing/config", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_job_document(job_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets a job document. Requires permission to access the GetJobDocument action.

# Arguments
- `job_id`: The unique identifier you assigned to this job when it was created.

"""
function get_job_document(jobId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/jobs/$(jobId)/job-document", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_logging_options(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets the logging options. NOTE: use of this command is not recommended. Use
GetV2LoggingOptions instead. Requires permission to access the GetLoggingOptions action.

"""
function get_logging_options(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/loggingOptions", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_otaupdate(ota_update_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets an OTA update. Requires permission to access the GetOTAUpdate action.

# Arguments
- `ota_update_id`: The OTA update ID.

"""
function get_otaupdate(otaUpdateId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/otaUpdates/$(otaUpdateId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_percentiles(query_string; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Groups the aggregated values that match the query into percentile groupings. The default
percentile groupings are: 1,5,25,50,75,95,99, although you can specify your own when you
call GetPercentiles. This function returns a value for each percentile group specified (or
the default percentile groupings). The percentile group \"1\" contains the aggregated field
value that occurs in approximately one percent of the values that match the query. The
percentile group \"5\" contains the aggregated field value that occurs in approximately
five percent of the values that match the query, and so on. The result is an approximation,
the more values that match the query, the more accurate the percentile values. Requires
permission to access the GetPercentiles action.

# Arguments
- `query_string`: The search query string.

# Keyword Parameters
- `aggregation_field`: The field to aggregate.
- `index_name`: The name of the index to search.
- `percents`: The percentile groups returned.
- `query_version`: The query version.
"""
function get_percentiles(queryString; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/indices/percentiles", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("queryString"=>queryString), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_policy(policy_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about the specified policy with the policy document of the default
version. Requires permission to access the GetPolicy action.

# Arguments
- `policy_name`: The name of the policy.

"""
function get_policy(policyName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/policies/$(policyName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_policy_version(policy_name, policy_version_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about the specified policy version. Requires permission to access the
GetPolicyVersion action.

# Arguments
- `policy_name`: The name of the policy.
- `policy_version_id`: The policy version ID.

"""
function get_policy_version(policyName, policyVersionId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/policies/$(policyName)/version/$(policyVersionId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_registration_code(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets a registration code used to register a CA certificate with IoT. Requires permission to
access the GetRegistrationCode action.

"""
function get_registration_code(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/registrationcode", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_statistics(query_string; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns the count, average, sum, minimum, maximum, sum of squares, variance, and standard
deviation for the specified aggregated field. If the aggregation field is of type String,
only the count statistic is returned. Requires permission to access the GetStatistics
action.

# Arguments
- `query_string`: The query used to search. You can specify \"*\" for the query string to
  get the count of all indexed things in your Amazon Web Services account.

# Keyword Parameters
- `aggregation_field`: The aggregation field name.
- `index_name`: The name of the index to search. The default value is AWS_Things.
- `query_version`: The version of the query used to search.
"""
function get_statistics(queryString; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/indices/statistics", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("queryString"=>queryString), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_topic_rule(rule_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about the rule. Requires permission to access the GetTopicRule action.

# Arguments
- `rule_name`: The name of the rule.

"""
function get_topic_rule(ruleName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/rules/$(ruleName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_topic_rule_destination(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about a topic rule destination. Requires permission to access the
GetTopicRuleDestination action.

# Arguments
- `arn`: The ARN of the topic rule destination.

"""
function get_topic_rule_destination(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/destinations/$(arn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_v2_logging_options(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets the fine grained logging options. Requires permission to access the
GetV2LoggingOptions action.

"""
function get_v2_logging_options(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/v2LoggingOptions", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_active_violations(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the active violations for a given Device Defender security profile. Requires
permission to access the ListActiveViolations action.

# Keyword Parameters
- `behavior_criteria_type`:  The criteria for a behavior.
- `list_suppressed_alerts`:  A list of all suppressed alerts.
- `max_results`: The maximum number of results to return at one time.
- `next_token`: The token for the next set of results.
- `security_profile_name`: The name of the Device Defender security profile for which
  violations are listed.
- `thing_name`: The name of the thing whose active violations are listed.
- `verification_state`: The verification state of the violation (detect alarm).
"""
function list_active_violations(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/active-violations", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_attached_policies(target; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the policies attached to the specified thing group. Requires permission to access the
ListAttachedPolicies action.

# Arguments
- `target`: The group or principal for which the policies will be listed. Valid principals
  are CertificateArn (arn:aws:iot:region:accountId:cert/certificateId), thingGroupArn
  (arn:aws:iot:region:accountId:thinggroup/groupName) and CognitoId (region:id).

# Keyword Parameters
- `marker`: The token to retrieve the next set of results.
- `page_size`: The maximum number of results to be returned per request.
- `recursive`: When true, recursively list attached policies.
"""
function list_attached_policies(target; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/attached-policies/$(target)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_audit_findings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the findings (results) of a Device Defender audit or of the audits performed during a
specified time period. (Findings are retained for 90 days.) Requires permission to access
the ListAuditFindings action.

# Keyword Parameters
- `check_name`: A filter to limit results to the findings for the specified audit check.
- `end_time`: A filter to limit results to those found before the specified time. You must
  specify either the startTime and endTime or the taskId, but not both.
- `list_suppressed_findings`:  Boolean flag indicating whether only the suppressed findings
  or the unsuppressed findings should be listed. If this parameter isn't provided, the
  response will list both suppressed and unsuppressed findings.
- `max_results`: The maximum number of results to return at one time. The default is 25.
- `next_token`: The token for the next set of results.
- `resource_identifier`: Information identifying the noncompliant resource.
- `start_time`: A filter to limit results to those found after the specified time. You must
  specify either the startTime and endTime or the taskId, but not both.
- `task_id`: A filter to limit results to the audit with the specified ID. You must specify
  either the taskId or the startTime and endTime, but not both.
"""
function list_audit_findings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/audit/findings", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_audit_mitigation_actions_executions(finding_id, task_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets the status of audit mitigation action tasks that were executed. Requires permission to
access the ListAuditMitigationActionsExecutions action.

# Arguments
- `finding_id`: Specify this filter to limit results to those that were applied to a
  specific audit finding.
- `task_id`: Specify this filter to limit results to actions for a specific audit
  mitigation actions task.

# Keyword Parameters
- `action_status`: Specify this filter to limit results to those with a specific status.
- `max_results`: The maximum number of results to return at one time. The default is 25.
- `next_token`: The token for the next set of results.
"""
function list_audit_mitigation_actions_executions(findingId, taskId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/audit/mitigationactions/executions", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("findingId"=>findingId, "taskId"=>taskId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_audit_mitigation_actions_tasks(end_time, start_time; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets a list of audit mitigation action tasks that match the specified filters. Requires
permission to access the ListAuditMitigationActionsTasks action.

# Arguments
- `end_time`: Specify this filter to limit results to tasks that were completed or canceled
  on or before a specific date and time.
- `start_time`: Specify this filter to limit results to tasks that began on or after a
  specific date and time.

# Keyword Parameters
- `audit_task_id`: Specify this filter to limit results to tasks that were applied to
  results for a specific audit.
- `finding_id`: Specify this filter to limit results to tasks that were applied to a
  specific audit finding.
- `max_results`: The maximum number of results to return at one time. The default is 25.
- `next_token`: The token for the next set of results.
- `task_status`: Specify this filter to limit results to tasks that are in a specific state.
"""
function list_audit_mitigation_actions_tasks(endTime, startTime; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/audit/mitigationactions/tasks", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("endTime"=>endTime, "startTime"=>startTime), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_audit_suppressions(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Lists your Device Defender audit listings.  Requires permission to access the
ListAuditSuppressions action.

# Keyword Parameters
- `ascending_order`:  Determines whether suppressions are listed in ascending order by
  expiration date or not. If parameter isn't provided, ascendingOrder=true.
- `check_name`:
- `max_results`:  The maximum number of results to return at one time. The default is 25.
- `next_token`:  The token for the next set of results.
- `resource_identifier`:
"""
function list_audit_suppressions(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/audit/suppressions/list", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_audit_tasks(end_time, start_time; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the Device Defender audits that have been performed during a given time period.
Requires permission to access the ListAuditTasks action.

# Arguments
- `end_time`: The end of the time period.
- `start_time`: The beginning of the time period. Audit information is retained for a
  limited time (90 days). Requesting a start time prior to what is retained results in an
  \"InvalidRequestException\".

# Keyword Parameters
- `max_results`: The maximum number of results to return at one time. The default is 25.
- `next_token`: The token for the next set of results.
- `task_status`: A filter to limit the output to audits with the specified completion
  status: can be one of \"IN_PROGRESS\", \"COMPLETED\", \"FAILED\", or \"CANCELED\".
- `task_type`: A filter to limit the output to the specified type of audit: can be one of
  \"ON_DEMAND_AUDIT_TASK\" or \"SCHEDULED__AUDIT_TASK\".
"""
function list_audit_tasks(endTime, startTime; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/audit/tasks", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("endTime"=>endTime, "startTime"=>startTime), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_authorizers(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the authorizers registered in your account. Requires permission to access the
ListAuthorizers action.

# Keyword Parameters
- `ascending_order`: Return the list of authorizers in ascending alphabetical order.
- `marker`: A marker used to get the next set of results.
- `page_size`: The maximum number of results to return at one time.
- `status`: The status of the list authorizers request.
"""
function list_authorizers(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/authorizers/", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_billing_groups(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the billing groups you have created. Requires permission to access the
ListBillingGroups action.

# Keyword Parameters
- `max_results`: The maximum number of results to return per request.
- `name_prefix_filter`: Limit the results to billing groups whose names have the given
  prefix.
- `next_token`: To retrieve the next set of results, the nextToken value from a previous
  response; otherwise null to receive the first set of results.
"""
function list_billing_groups(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/billing-groups", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_cacertificates(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the CA certificates registered for your Amazon Web Services account. The results are
paginated with a default page size of 25. You can use the returned marker to retrieve
additional results. Requires permission to access the ListCACertificates action.

# Keyword Parameters
- `ascending_order`: Determines the order of the results.
- `marker`: The marker for the next set of results.
- `page_size`: The result page size.
"""
function list_cacertificates(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/cacertificates", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_certificates(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the certificates registered in your Amazon Web Services account. The results are
paginated with a default page size of 25. You can use the returned marker to retrieve
additional results. Requires permission to access the ListCertificates action.

# Keyword Parameters
- `ascending_order`: Specifies the order for results. If True, the results are returned in
  ascending order, based on the creation date.
- `marker`: The marker for the next set of results.
- `page_size`: The result page size.
"""
function list_certificates(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/certificates", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_certificates_by_ca(ca_certificate_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

List the device certificates signed by the specified CA certificate. Requires permission to
access the ListCertificatesByCA action.

# Arguments
- `ca_certificate_id`: The ID of the CA certificate. This operation will list all
  registered device certificate that were signed by this CA certificate.

# Keyword Parameters
- `ascending_order`: Specifies the order for results. If True, the results are returned in
  ascending order, based on the creation date.
- `marker`: The marker for the next set of results.
- `page_size`: The result page size.
"""
function list_certificates_by_ca(caCertificateId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/certificates-by-ca/$(caCertificateId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_custom_metrics(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Lists your Device Defender detect custom metrics.  Requires permission to access the
ListCustomMetrics action.

# Keyword Parameters
- `max_results`:  The maximum number of results to return at one time. The default is 25.
- `next_token`:  The token for the next set of results.
"""
function list_custom_metrics(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/custom-metrics", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_detect_mitigation_actions_executions(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Lists mitigation actions executions for a Device Defender ML Detect Security Profile.
Requires permission to access the ListDetectMitigationActionsExecutions action.

# Keyword Parameters
- `end_time`:  The end of the time period for which ML Detect mitigation actions executions
  are returned.
- `max_results`:  The maximum number of results to return at one time. The default is 25.
- `next_token`:  The token for the next set of results.
- `start_time`:  A filter to limit results to those found after the specified time. You
  must specify either the startTime and endTime or the taskId, but not both.
- `task_id`:  The unique identifier of the task.
- `thing_name`:  The name of the thing whose mitigation actions are listed.
- `violation_id`:  The unique identifier of the violation.
"""
function list_detect_mitigation_actions_executions(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/detect/mitigationactions/executions", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_detect_mitigation_actions_tasks(end_time, start_time; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 List of Device Defender ML Detect mitigation actions tasks.  Requires permission to access
the ListDetectMitigationActionsTasks action.

# Arguments
- `end_time`:  The end of the time period for which ML Detect mitigation actions tasks are
  returned.
- `start_time`:  A filter to limit results to those found after the specified time. You
  must specify either the startTime and endTime or the taskId, but not both.

# Keyword Parameters
- `max_results`: The maximum number of results to return at one time. The default is 25.
- `next_token`:  The token for the next set of results.
"""
function list_detect_mitigation_actions_tasks(endTime, startTime; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/detect/mitigationactions/tasks", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("endTime"=>endTime, "startTime"=>startTime), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_dimensions(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

List the set of dimensions that are defined for your Amazon Web Services accounts. Requires
permission to access the ListDimensions action.

# Keyword Parameters
- `max_results`: The maximum number of results to retrieve at one time.
- `next_token`: The token for the next set of results.
"""
function list_dimensions(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/dimensions", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_domain_configurations(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets a list of domain configurations for the user. This list is sorted alphabetically by
domain configuration name. Requires permission to access the ListDomainConfigurations
action.

# Keyword Parameters
- `marker`: The marker for the next set of results.
- `page_size`: The result page size.
- `service_type`: The type of service delivered by the endpoint.
"""
function list_domain_configurations(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/domainConfigurations", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_fleet_metrics(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists all your fleet metrics.  Requires permission to access the ListFleetMetrics action.

# Keyword Parameters
- `max_results`: The maximum number of results to return in this operation.
- `next_token`: To retrieve the next set of results, the nextToken value from a previous
  response; otherwise null to receive the first set of results.
"""
function list_fleet_metrics(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/fleet-metrics", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_indices(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the search indices. Requires permission to access the ListIndices action.

# Keyword Parameters
- `max_results`: The maximum number of results to return at one time.
- `next_token`: The token used to get the next set of results, or null if there are no
  additional results.
"""
function list_indices(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/indices", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_job_executions_for_job(job_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the job executions for a job. Requires permission to access the
ListJobExecutionsForJob action.

# Arguments
- `job_id`: The unique identifier you assigned to this job when it was created.

# Keyword Parameters
- `max_results`: The maximum number of results to be returned per request.
- `next_token`: The token to retrieve the next set of results.
- `status`: The status of the job.
"""
function list_job_executions_for_job(jobId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/jobs/$(jobId)/things", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_job_executions_for_thing(thing_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the job executions for the specified thing. Requires permission to access the
ListJobExecutionsForThing action.

# Arguments
- `thing_name`: The thing name.

# Keyword Parameters
- `max_results`: The maximum number of results to be returned per request.
- `namespace_id`: The namespace used to indicate that a job is a customer-managed job. When
  you specify a value for this parameter, Amazon Web Services IoT Core sends jobs
  notifications to MQTT topics that contain the value in the following format.
  aws/things/THING_NAME/jobs/JOB_ID/notify-namespace-NAMESPACE_ID/   The namespaceId feature
  is in public preview.
- `next_token`: The token to retrieve the next set of results.
- `status`: An optional filter that lets you search for jobs that have the specified status.
"""
function list_job_executions_for_thing(thingName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/things/$(thingName)/jobs", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_job_templates(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of job templates. Requires permission to access the ListJobTemplates action.

# Keyword Parameters
- `max_results`: The maximum number of results to return in the list.
- `next_token`: The token to use to return the next set of results in the list.
"""
function list_job_templates(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/job-templates", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_jobs(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists jobs. Requires permission to access the ListJobs action.

# Keyword Parameters
- `max_results`: The maximum number of results to return per request.
- `namespace_id`: The namespace used to indicate that a job is a customer-managed job. When
  you specify a value for this parameter, Amazon Web Services IoT Core sends jobs
  notifications to MQTT topics that contain the value in the following format.
  aws/things/THING_NAME/jobs/JOB_ID/notify-namespace-NAMESPACE_ID/   The namespaceId feature
  is in public preview.
- `next_token`: The token to retrieve the next set of results.
- `status`: An optional filter that lets you search for jobs that have the specified status.
- `target_selection`: Specifies whether the job will continue to run (CONTINUOUS), or will
  be complete after all those things specified as targets have completed the job (SNAPSHOT).
  If continuous, the job may also be run on a thing when a change is detected in a target.
  For example, a job will run on a thing when the thing is added to a target group, even
  after the job was completed by all things originally in the group.
- `thing_group_id`: A filter that limits the returned jobs to those for the specified group.
- `thing_group_name`: A filter that limits the returned jobs to those for the specified
  group.
"""
function list_jobs(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/jobs", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_mitigation_actions(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets a list of all mitigation actions that match the specified filter criteria. Requires
permission to access the ListMitigationActions action.

# Keyword Parameters
- `action_type`: Specify a value to limit the result to mitigation actions with a specific
  action type.
- `max_results`: The maximum number of results to return at one time. The default is 25.
- `next_token`: The token for the next set of results.
"""
function list_mitigation_actions(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/mitigationactions/actions", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_otaupdates(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists OTA updates. Requires permission to access the ListOTAUpdates action.

# Keyword Parameters
- `max_results`: The maximum number of results to return at one time.
- `next_token`: A token used to retrieve the next set of results.
- `ota_update_status`: The OTA update job status.
"""
function list_otaupdates(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/otaUpdates", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_outgoing_certificates(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists certificates that are being transferred but not yet accepted. Requires permission to
access the ListOutgoingCertificates action.

# Keyword Parameters
- `ascending_order`: Specifies the order for results. If True, the results are returned in
  ascending order, based on the creation date.
- `marker`: The marker for the next set of results.
- `page_size`: The result page size.
"""
function list_outgoing_certificates(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/certificates-out-going", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_policies(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists your policies. Requires permission to access the ListPolicies action.

# Keyword Parameters
- `ascending_order`: Specifies the order for results. If true, the results are returned in
  ascending creation order.
- `marker`: The marker for the next set of results.
- `page_size`: The result page size.
"""
function list_policies(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/policies", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_policy_principals(x-amzn-iot-policy; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the principals associated with the specified policy.  Note: This action is
deprecated. Please use ListTargetsForPolicy instead. Requires permission to access the
ListPolicyPrincipals action.

# Arguments
- `x-amzn-iot-policy`: The policy name.

# Keyword Parameters
- `ascending_order`: Specifies the order for results. If true, the results are returned in
  ascending creation order.
- `marker`: The marker for the next set of results.
- `page_size`: The result page size.
"""
function list_policy_principals(x_amzn_iot_policy; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/policy-principals", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("headers"=>Dict{String, Any}("x-amzn-iot-policy"=>x_amzn_iot_policy)), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_policy_versions(policy_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the versions of the specified policy and identifies the default version. Requires
permission to access the ListPolicyVersions action.

# Arguments
- `policy_name`: The policy name.

"""
function list_policy_versions(policyName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/policies/$(policyName)/version", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_principal_policies(x-amzn-iot-principal; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the policies attached to the specified principal. If you use an Cognito identity, the
ID must be in AmazonCognito Identity format.  Note: This action is deprecated. Please use
ListAttachedPolicies instead. Requires permission to access the ListPrincipalPolicies
action.

# Arguments
- `x-amzn-iot-principal`: The principal. Valid principals are CertificateArn
  (arn:aws:iot:region:accountId:cert/certificateId), thingGroupArn
  (arn:aws:iot:region:accountId:thinggroup/groupName) and CognitoId (region:id).

# Keyword Parameters
- `ascending_order`: Specifies the order for results. If true, results are returned in
  ascending creation order.
- `marker`: The marker for the next set of results.
- `page_size`: The result page size.
"""
function list_principal_policies(x_amzn_iot_principal; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/principal-policies", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("headers"=>Dict{String, Any}("x-amzn-iot-principal"=>x_amzn_iot_principal)), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_principal_things(x-amzn-principal; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the things associated with the specified principal. A principal can be X.509
certificates, IAM users, groups, and roles, Amazon Cognito identities or federated
identities.  Requires permission to access the ListPrincipalThings action.

# Arguments
- `x-amzn-principal`: The principal.

# Keyword Parameters
- `max_results`: The maximum number of results to return in this operation.
- `next_token`: To retrieve the next set of results, the nextToken value from a previous
  response; otherwise null to receive the first set of results.
"""
function list_principal_things(x_amzn_principal; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/principals/things", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("headers"=>Dict{String, Any}("x-amzn-principal"=>x_amzn_principal)), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_provisioning_template_versions(template_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

A list of fleet provisioning template versions. Requires permission to access the
ListProvisioningTemplateVersions action.

# Arguments
- `template_name`: The name of the fleet provisioning template.

# Keyword Parameters
- `max_results`: The maximum number of results to return at one time.
- `next_token`: A token to retrieve the next set of results.
"""
function list_provisioning_template_versions(templateName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/provisioning-templates/$(templateName)/versions", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_provisioning_templates(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the fleet provisioning templates in your Amazon Web Services account. Requires
permission to access the ListProvisioningTemplates action.

# Keyword Parameters
- `max_results`: The maximum number of results to return at one time.
- `next_token`: A token to retrieve the next set of results.
"""
function list_provisioning_templates(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/provisioning-templates", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_role_aliases(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the role aliases registered in your account. Requires permission to access the
ListRoleAliases action.

# Keyword Parameters
- `ascending_order`: Return the list of role aliases in ascending alphabetical order.
- `marker`: A marker used to get the next set of results.
- `page_size`: The maximum number of results to return at one time.
"""
function list_role_aliases(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/role-aliases", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_scheduled_audits(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists all of your scheduled audits. Requires permission to access the ListScheduledAudits
action.

# Keyword Parameters
- `max_results`: The maximum number of results to return at one time. The default is 25.
- `next_token`: The token for the next set of results.
"""
function list_scheduled_audits(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/audit/scheduledaudits", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_security_profiles(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the Device Defender security profiles you've created. You can filter security
profiles by dimension or custom metric. Requires permission to access the
ListSecurityProfiles action.   dimensionName and metricName cannot be used in the same
request.

# Keyword Parameters
- `dimension_name`: A filter to limit results to the security profiles that use the defined
  dimension. Cannot be used with metricName
- `max_results`: The maximum number of results to return at one time.
- `metric_name`:  The name of the custom metric. Cannot be used with dimensionName.
- `next_token`: The token for the next set of results.
"""
function list_security_profiles(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/security-profiles", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_security_profiles_for_target(security_profile_target_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the Device Defender security profiles attached to a target (thing group). Requires
permission to access the ListSecurityProfilesForTarget action.

# Arguments
- `security_profile_target_arn`: The ARN of the target (thing group) whose attached
  security profiles you want to get.

# Keyword Parameters
- `max_results`: The maximum number of results to return at one time.
- `next_token`: The token for the next set of results.
- `recursive`: If true, return child groups too.
"""
function list_security_profiles_for_target(securityProfileTargetArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/security-profiles-for-target", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("securityProfileTargetArn"=>securityProfileTargetArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_streams(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists all of the streams in your Amazon Web Services account. Requires permission to access
the ListStreams action.

# Keyword Parameters
- `ascending_order`: Set to true to return the list of streams in ascending order.
- `max_results`: The maximum number of results to return at a time.
- `next_token`: A token used to get the next set of results.
"""
function list_streams(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/streams", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_tags_for_resource(resource_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the tags (metadata) you have assigned to the resource. Requires permission to access
the ListTagsForResource action.

# Arguments
- `resource_arn`: The ARN of the resource.

# Keyword Parameters
- `next_token`: To retrieve the next set of results, the nextToken value from a previous
  response; otherwise null to receive the first set of results.
"""
function list_tags_for_resource(resourceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/tags", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("resourceArn"=>resourceArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_targets_for_policy(policy_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

List targets for the specified policy. Requires permission to access the
ListTargetsForPolicy action.

# Arguments
- `policy_name`: The policy name.

# Keyword Parameters
- `marker`: A marker used to get the next set of results.
- `page_size`: The maximum number of results to return at one time.
"""
function list_targets_for_policy(policyName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/policy-targets/$(policyName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_targets_for_security_profile(security_profile_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the targets (thing groups) associated with a given Device Defender security profile.
Requires permission to access the ListTargetsForSecurityProfile action.

# Arguments
- `security_profile_name`: The security profile.

# Keyword Parameters
- `max_results`: The maximum number of results to return at one time.
- `next_token`: The token for the next set of results.
"""
function list_targets_for_security_profile(securityProfileName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/security-profiles/$(securityProfileName)/targets", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_thing_groups(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

List the thing groups in your account. Requires permission to access the ListThingGroups
action.

# Keyword Parameters
- `max_results`: The maximum number of results to return at one time.
- `name_prefix_filter`: A filter that limits the results to those with the specified name
  prefix.
- `next_token`: To retrieve the next set of results, the nextToken value from a previous
  response; otherwise null to receive the first set of results.
- `parent_group`: A filter that limits the results to those with the specified parent group.
- `recursive`: If true, return child groups as well.
"""
function list_thing_groups(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/thing-groups", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_thing_groups_for_thing(thing_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

List the thing groups to which the specified thing belongs. Requires permission to access
the ListThingGroupsForThing action.

# Arguments
- `thing_name`: The thing name.

# Keyword Parameters
- `max_results`: The maximum number of results to return at one time.
- `next_token`: To retrieve the next set of results, the nextToken value from a previous
  response; otherwise null to receive the first set of results.
"""
function list_thing_groups_for_thing(thingName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/things/$(thingName)/thing-groups", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_thing_principals(thing_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the principals associated with the specified thing. A principal can be X.509
certificates, IAM users, groups, and roles, Amazon Cognito identities or federated
identities. Requires permission to access the ListThingPrincipals action.

# Arguments
- `thing_name`: The name of the thing.

# Keyword Parameters
- `max_results`: The maximum number of results to return in this operation.
- `next_token`: To retrieve the next set of results, the nextToken value from a previous
  response; otherwise null to receive the first set of results.
"""
function list_thing_principals(thingName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/things/$(thingName)/principals", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_thing_registration_task_reports(report_type, task_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Information about the thing registration tasks.

# Arguments
- `report_type`: The type of task report.
- `task_id`: The id of the task.

# Keyword Parameters
- `max_results`: The maximum number of results to return per request.
- `next_token`: To retrieve the next set of results, the nextToken value from a previous
  response; otherwise null to receive the first set of results.
"""
function list_thing_registration_task_reports(reportType, taskId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/thing-registration-tasks/$(taskId)/reports", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("reportType"=>reportType), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_thing_registration_tasks(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

List bulk thing provisioning tasks. Requires permission to access the
ListThingRegistrationTasks action.

# Keyword Parameters
- `max_results`: The maximum number of results to return at one time.
- `next_token`: To retrieve the next set of results, the nextToken value from a previous
  response; otherwise null to receive the first set of results.
- `status`: The status of the bulk thing provisioning task.
"""
function list_thing_registration_tasks(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/thing-registration-tasks", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_thing_types(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the existing thing types. Requires permission to access the ListThingTypes action.

# Keyword Parameters
- `max_results`: The maximum number of results to return in this operation.
- `next_token`: To retrieve the next set of results, the nextToken value from a previous
  response; otherwise null to receive the first set of results.
- `thing_type_name`: The name of the thing type.
"""
function list_thing_types(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/thing-types", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_things(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists your things. Use the attributeName and attributeValue parameters to filter your
things. For example, calling ListThings with attributeName=Color and attributeValue=Red
retrieves all things in the registry that contain an attribute Color with the value Red.
Requires permission to access the ListThings action.  You will not be charged for calling
this API if an Access denied error is returned. You will also not be charged if no
attributes or pagination token was provided in request and no pagination token and no
results were returned.

# Keyword Parameters
- `attribute_name`: The attribute name used to search for things.
- `attribute_value`: The attribute value used to search for things.
- `max_results`: The maximum number of results to return in this operation.
- `next_token`: To retrieve the next set of results, the nextToken value from a previous
  response; otherwise null to receive the first set of results.
- `thing_type_name`: The name of the thing type used to search for things.
- `use_prefix_attribute_value`: When true, the action returns the thing resources with
  attribute values that start with the attributeValue provided. When false, or not present,
  the action returns only the thing resources with attribute values that match the entire
  attributeValue provided.
"""
function list_things(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/things", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_things_in_billing_group(billing_group_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the things you have added to the given billing group. Requires permission to access
the ListThingsInBillingGroup action.

# Arguments
- `billing_group_name`: The name of the billing group.

# Keyword Parameters
- `max_results`: The maximum number of results to return per request.
- `next_token`: To retrieve the next set of results, the nextToken value from a previous
  response; otherwise null to receive the first set of results.
"""
function list_things_in_billing_group(billingGroupName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/billing-groups/$(billingGroupName)/things", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_things_in_thing_group(thing_group_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the things in the specified group. Requires permission to access the
ListThingsInThingGroup action.

# Arguments
- `thing_group_name`: The thing group name.

# Keyword Parameters
- `max_results`: The maximum number of results to return at one time.
- `next_token`: To retrieve the next set of results, the nextToken value from a previous
  response; otherwise null to receive the first set of results.
- `recursive`: When true, list things in this thing group and in all child groups as well.
"""
function list_things_in_thing_group(thingGroupName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/thing-groups/$(thingGroupName)/things", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_topic_rule_destinations(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists all the topic rule destinations in your Amazon Web Services account. Requires
permission to access the ListTopicRuleDestinations action.

# Keyword Parameters
- `max_results`: The maximum number of results to return at one time.
- `next_token`: To retrieve the next set of results, the nextToken value from a previous
  response; otherwise null to receive the first set of results.
"""
function list_topic_rule_destinations(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/destinations", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_topic_rules(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the rules for the specific topic. Requires permission to access the ListTopicRules
action.

# Keyword Parameters
- `max_results`: The maximum number of results to return.
- `next_token`: To retrieve the next set of results, the nextToken value from a previous
  response; otherwise null to receive the first set of results.
- `rule_disabled`: Specifies whether the rule is disabled.
- `topic`: The topic.
"""
function list_topic_rules(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/rules", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_v2_logging_levels(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists logging levels. Requires permission to access the ListV2LoggingLevels action.

# Keyword Parameters
- `max_results`: The maximum number of results to return at one time.
- `next_token`: To retrieve the next set of results, the nextToken value from a previous
  response; otherwise null to receive the first set of results.
- `target_type`: The type of resource for which you are configuring logging. Must be
  THING_Group.
"""
function list_v2_logging_levels(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/v2LoggingLevel", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_violation_events(end_time, start_time; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the Device Defender security profile violations discovered during the given time
period. You can use filters to limit the results to those alerts issued for a particular
security profile, behavior, or thing (device). Requires permission to access the
ListViolationEvents action.

# Arguments
- `end_time`: The end time for the alerts to be listed.
- `start_time`: The start time for the alerts to be listed.

# Keyword Parameters
- `behavior_criteria_type`:  The criteria for a behavior.
- `list_suppressed_alerts`:  A list of all suppressed alerts.
- `max_results`: The maximum number of results to return at one time.
- `next_token`: The token for the next set of results.
- `security_profile_name`: A filter to limit results to those alerts generated by the
  specified security profile.
- `thing_name`: A filter to limit results to those alerts caused by the specified thing.
- `verification_state`: The verification state of the violation (detect alarm).
"""
function list_violation_events(endTime, startTime; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("GET", "/violation-events", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("endTime"=>endTime, "startTime"=>startTime), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    put_verification_state_on_violation(verification_state, violation_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Set a verification state and provide a description of that verification state on a
violation (detect alarm).

# Arguments
- `verification_state`: The verification state of the violation.
- `violation_id`: The violation ID.

# Keyword Parameters
- `verification_state_description`: The description of the verification state of the
  violation (detect alarm).
"""
function put_verification_state_on_violation(verificationState, violationId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/violations/verification-state/$(violationId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("verificationState"=>verificationState), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    register_cacertificate(ca_certificate, verification_certificate; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Registers a CA certificate with IoT. This CA certificate can then be used to sign device
certificates, which can be then registered with IoT. You can register up to 10 CA
certificates per Amazon Web Services account that have the same subject field. This enables
you to have up to 10 certificate authorities sign your device certificates. If you have
more than one CA certificate registered, make sure you pass the CA certificate when you
register your device certificates with the RegisterCertificate action. Requires permission
to access the RegisterCACertificate action.

# Arguments
- `ca_certificate`: The CA certificate.
- `verification_certificate`: The private key verification certificate.

# Keyword Parameters
- `allow_auto_registration`: Allows this CA certificate to be used for auto registration of
  device certificates.
- `registration_config`: Information about the registration configuration.
- `set_as_active`: A boolean value that specifies if the CA certificate is set to active.
- `tags`: Metadata which can be used to manage the CA certificate.  For URI Request
  parameters use format: ...key1=value1&amp;key2=value2... For the CLI command-line parameter
  use format: &amp;&amp;tags \"key1=value1&amp;key2=value2...\" For the cli-input-json file
  use format: \"tags\": \"key1=value1&amp;key2=value2...\"
"""
function register_cacertificate(caCertificate, verificationCertificate; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/cacertificate", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("caCertificate"=>caCertificate, "verificationCertificate"=>verificationCertificate), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    register_certificate(certificate_pem; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Registers a device certificate with IoT. If you have more than one CA certificate that has
the same subject field, you must specify the CA certificate that was used to sign the
device certificate being registered. Requires permission to access the RegisterCertificate
action.

# Arguments
- `certificate_pem`: The certificate data, in PEM format.

# Keyword Parameters
- `ca_certificate_pem`: The CA certificate used to sign the device certificate being
  registered.
- `set_as_active`: A boolean value that specifies if the certificate is set to active.
- `status`: The status of the register certificate request.
"""
function register_certificate(certificatePem; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/certificate/register", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("certificatePem"=>certificatePem), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    register_certificate_without_ca(certificate_pem; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Register a certificate that does not have a certificate authority (CA).

# Arguments
- `certificate_pem`: The certificate data, in PEM format.

# Keyword Parameters
- `status`: The status of the register certificate request.
"""
function register_certificate_without_ca(certificatePem; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/certificate/register-no-ca", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("certificatePem"=>certificatePem), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    register_thing(template_body; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Provisions a thing in the device registry. RegisterThing calls other IoT control plane
APIs. These calls might exceed your account level  IoT Throttling Limits and cause throttle
errors. Please contact Amazon Web Services Customer Support to raise your throttling limits
if necessary. Requires permission to access the RegisterThing action.

# Arguments
- `template_body`: The provisioning template. See Provisioning Devices That Have Device
  Certificates for more information.

# Keyword Parameters
- `parameters`: The parameters for provisioning a thing. See Provisioning Templates for
  more information.
"""
function register_thing(templateBody; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/things", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("templateBody"=>templateBody), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    reject_certificate_transfer(certificate_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Rejects a pending certificate transfer. After IoT rejects a certificate transfer, the
certificate status changes from PENDING_TRANSFER to INACTIVE. To check for pending
certificate transfers, call ListCertificates to enumerate your certificates. This operation
can only be called by the transfer destination. After it is called, the certificate will be
returned to the source's account in the INACTIVE state. Requires permission to access the
RejectCertificateTransfer action.

# Arguments
- `certificate_id`: The ID of the certificate. (The last part of the certificate ARN
  contains the certificate ID.)

# Keyword Parameters
- `reject_reason`: The reason the certificate transfer was rejected.
"""
function reject_certificate_transfer(certificateId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PATCH", "/reject-certificate-transfer/$(certificateId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    remove_thing_from_billing_group(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes the given thing from the billing group. Requires permission to access the
RemoveThingFromBillingGroup action.

# Keyword Parameters
- `billing_group_arn`: The ARN of the billing group.
- `billing_group_name`: The name of the billing group.
- `thing_arn`: The ARN of the thing to be removed from the billing group.
- `thing_name`: The name of the thing to be removed from the billing group.
"""
function remove_thing_from_billing_group(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PUT", "/billing-groups/removeThingFromBillingGroup", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    remove_thing_from_thing_group(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Remove the specified thing from the specified group. You must specify either a
thingGroupArn or a thingGroupName to identify the thing group and either a thingArn or a
thingName to identify the thing to remove from the thing group.  Requires permission to
access the RemoveThingFromThingGroup action.

# Keyword Parameters
- `thing_arn`: The ARN of the thing to remove from the group.
- `thing_group_arn`: The group ARN.
- `thing_group_name`: The group name.
- `thing_name`: The name of the thing to remove from the group.
"""
function remove_thing_from_thing_group(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PUT", "/thing-groups/removeThingFromThingGroup", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    replace_topic_rule(rule_name, topic_rule_payload; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Replaces the rule. You must specify all parameters for the new rule. Creating rules is an
administrator-level action. Any user who has permission to create rules will be able to
access data processed by the rule. Requires permission to access the ReplaceTopicRule
action.

# Arguments
- `rule_name`: The name of the rule.
- `topic_rule_payload`: The rule payload.

"""
function replace_topic_rule(ruleName, topicRulePayload; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PATCH", "/rules/$(ruleName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("topicRulePayload"=>topicRulePayload), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    search_index(query_string; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

The query search index. Requires permission to access the SearchIndex action.

# Arguments
- `query_string`: The search query string.

# Keyword Parameters
- `index_name`: The search index name.
- `max_results`: The maximum number of results to return at one time.
- `next_token`: The token used to get the next set of results, or null if there are no
  additional results.
- `query_version`: The query version.
"""
function search_index(queryString; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/indices/search", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("queryString"=>queryString), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    set_default_authorizer(authorizer_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Sets the default authorizer. This will be used if a websocket connection is made without
specifying an authorizer. Requires permission to access the SetDefaultAuthorizer action.

# Arguments
- `authorizer_name`: The authorizer name.

"""
function set_default_authorizer(authorizerName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/default-authorizer", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("authorizerName"=>authorizerName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    set_default_policy_version(policy_name, policy_version_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Sets the specified version of the specified policy as the policy's default (operative)
version. This action affects all certificates to which the policy is attached. To list the
principals the policy is attached to, use the ListPrincipalPolicies action. Requires
permission to access the SetDefaultPolicyVersion action.

# Arguments
- `policy_name`: The policy name.
- `policy_version_id`: The policy version ID.

"""
function set_default_policy_version(policyName, policyVersionId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PATCH", "/policies/$(policyName)/version/$(policyVersionId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    set_logging_options(logging_options_payload; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Sets the logging options. NOTE: use of this command is not recommended. Use
SetV2LoggingOptions instead. Requires permission to access the SetLoggingOptions action.

# Arguments
- `logging_options_payload`: The logging options payload.

"""
function set_logging_options(loggingOptionsPayload; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/loggingOptions", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("loggingOptionsPayload"=>loggingOptionsPayload), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    set_v2_logging_level(log_level, log_target; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Sets the logging level. Requires permission to access the SetV2LoggingLevel action.

# Arguments
- `log_level`: The log level.
- `log_target`: The log target.

"""
function set_v2_logging_level(logLevel, logTarget; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/v2LoggingLevel", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("logLevel"=>logLevel, "logTarget"=>logTarget), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    set_v2_logging_options(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Sets the logging options for the V2 logging service. Requires permission to access the
SetV2LoggingOptions action.

# Keyword Parameters
- `default_log_level`: The default logging level.
- `disable_all_logs`: If true all logs are disabled. The default is false.
- `role_arn`: The ARN of the role that allows IoT to write to Cloudwatch logs.
"""
function set_v2_logging_options(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/v2LoggingOptions", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    start_audit_mitigation_actions_task(audit_check_to_actions_mapping, client_request_token, target, task_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Starts a task that applies a set of mitigation actions to the specified target. Requires
permission to access the StartAuditMitigationActionsTask action.

# Arguments
- `audit_check_to_actions_mapping`: For an audit check, specifies which mitigation actions
  to apply. Those actions must be defined in your Amazon Web Services accounts.
- `client_request_token`: Each audit mitigation task must have a unique client request
  token. If you try to start a new task with the same token as a task that already exists, an
  exception occurs. If you omit this value, a unique client request token is generated
  automatically.
- `target`: Specifies the audit findings to which the mitigation actions are applied. You
  can apply them to a type of audit check, to all findings from an audit, or to a specific
  set of findings.
- `task_id`: A unique identifier for the task. You can use this identifier to check the
  status of the task or to cancel it.

"""
function start_audit_mitigation_actions_task(auditCheckToActionsMapping, clientRequestToken, target, taskId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/audit/mitigationactions/tasks/$(taskId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("auditCheckToActionsMapping"=>auditCheckToActionsMapping, "clientRequestToken"=>clientRequestToken, "target"=>target), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    start_detect_mitigation_actions_task(actions, client_request_token, target, task_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Starts a Device Defender ML Detect mitigation actions task.  Requires permission to access
the StartDetectMitigationActionsTask action.

# Arguments
- `actions`:  The actions to be performed when a device has unexpected behavior.
- `client_request_token`:  Each mitigation action task must have a unique client request
  token. If you try to create a new task with the same token as a task that already exists,
  an exception occurs. If you omit this value, Amazon Web Services SDKs will automatically
  generate a unique client request.
- `target`:  Specifies the ML Detect findings to which the mitigation actions are applied.
- `task_id`:  The unique identifier of the task.

# Keyword Parameters
- `include_only_active_violations`:  Specifies to list only active violations.
- `include_suppressed_alerts`:  Specifies to include suppressed alerts.
- `violation_event_occurrence_range`:  Specifies the time period of which violation events
  occurred between.
"""
function start_detect_mitigation_actions_task(actions, clientRequestToken, target, taskId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PUT", "/detect/mitigationactions/tasks/$(taskId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("actions"=>actions, "clientRequestToken"=>clientRequestToken, "target"=>target), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    start_on_demand_audit_task(target_check_names; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Starts an on-demand Device Defender audit. Requires permission to access the
StartOnDemandAuditTask action.

# Arguments
- `target_check_names`: Which checks are performed during the audit. The checks you specify
  must be enabled for your account or an exception occurs. Use
  DescribeAccountAuditConfiguration to see the list of all checks, including those that are
  enabled or UpdateAccountAuditConfiguration to select which checks are enabled.

"""
function start_on_demand_audit_task(targetCheckNames; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/audit/tasks", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("targetCheckNames"=>targetCheckNames), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    start_thing_registration_task(input_file_bucket, input_file_key, role_arn, template_body; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a bulk thing provisioning task. Requires permission to access the
StartThingRegistrationTask action.

# Arguments
- `input_file_bucket`: The S3 bucket that contains the input file.
- `input_file_key`: The name of input file within the S3 bucket. This file contains a
  newline delimited JSON file. Each line contains the parameter values to provision one
  device (thing).
- `role_arn`: The IAM role ARN that grants permission the input file.
- `template_body`: The provisioning template.

"""
function start_thing_registration_task(inputFileBucket, inputFileKey, roleArn, templateBody; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/thing-registration-tasks", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("inputFileBucket"=>inputFileBucket, "inputFileKey"=>inputFileKey, "roleArn"=>roleArn, "templateBody"=>templateBody), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    stop_thing_registration_task(task_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Cancels a bulk thing provisioning task. Requires permission to access the
StopThingRegistrationTask action.

# Arguments
- `task_id`: The bulk thing provisioning task ID.

"""
function stop_thing_registration_task(taskId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PUT", "/thing-registration-tasks/$(taskId)/cancel", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    tag_resource(resource_arn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds to or modifies the tags of the given resource. Tags are metadata which can be used to
manage a resource. Requires permission to access the TagResource action.

# Arguments
- `resource_arn`: The ARN of the resource.
- `tags`: The new or modified tags for the resource.

"""
function tag_resource(resourceArn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/tags", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("resourceArn"=>resourceArn, "tags"=>tags), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    test_authorization(auth_infos; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Tests if a specified principal is authorized to perform an IoT action on a specified
resource. Use this to test and debug the authorization behavior of devices that connect to
the IoT device gateway. Requires permission to access the TestAuthorization action.

# Arguments
- `auth_infos`: A list of authorization info objects. Simulating authorization will create
  a response for each authInfo object in the list.

# Keyword Parameters
- `client_id`: The MQTT client ID.
- `cognito_identity_pool_id`: The Cognito identity pool ID.
- `policy_names_to_add`: When testing custom authorization, the policies specified here are
  treated as if they are attached to the principal being authorized.
- `policy_names_to_skip`: When testing custom authorization, the policies specified here
  are treated as if they are not attached to the principal being authorized.
- `principal`: The principal. Valid principals are CertificateArn
  (arn:aws:iot:region:accountId:cert/certificateId), thingGroupArn
  (arn:aws:iot:region:accountId:thinggroup/groupName) and CognitoId (region:id).
"""
function test_authorization(authInfos; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/test-authorization", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("authInfos"=>authInfos), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    test_invoke_authorizer(authorizer_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Tests a custom authorization behavior by invoking a specified custom authorizer. Use this
to test and debug the custom authorization behavior of devices that connect to the IoT
device gateway. Requires permission to access the TestInvokeAuthorizer action.

# Arguments
- `authorizer_name`: The custom authorizer name.

# Keyword Parameters
- `http_context`: Specifies a test HTTP authorization request.
- `mqtt_context`: Specifies a test MQTT authorization request.
- `tls_context`: Specifies a test TLS authorization request.
- `token`: The token returned by your custom authentication service.
- `token_signature`: The signature made with the token and your custom authentication
  service's private key. This value must be Base-64-encoded.
"""
function test_invoke_authorizer(authorizerName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/authorizer/$(authorizerName)/test", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    transfer_certificate(certificate_id, target_aws_account; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Transfers the specified certificate to the specified Amazon Web Services account. Requires
permission to access the TransferCertificate action. You can cancel the transfer until it
is acknowledged by the recipient. No notification is sent to the transfer destination's
account. It is up to the caller to notify the transfer target. The certificate being
transferred must not be in the ACTIVE state. You can use the UpdateCertificate action to
deactivate it. The certificate must not have any policies attached to it. You can use the
DetachPolicy action to detach them.

# Arguments
- `certificate_id`: The ID of the certificate. (The last part of the certificate ARN
  contains the certificate ID.)
- `target_aws_account`: The Amazon Web Services account.

# Keyword Parameters
- `transfer_message`: The transfer message.
"""
function transfer_certificate(certificateId, targetAwsAccount; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PATCH", "/transfer-certificate/$(certificateId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("targetAwsAccount"=>targetAwsAccount), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    untag_resource(resource_arn, tag_keys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes the given tags (metadata) from the resource. Requires permission to access the
UntagResource action.

# Arguments
- `resource_arn`: The ARN of the resource.
- `tag_keys`: A list of the keys of the tags to be removed from the resource.

"""
function untag_resource(resourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/untag", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("resourceArn"=>resourceArn, "tagKeys"=>tagKeys), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_account_audit_configuration(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Configures or reconfigures the Device Defender audit settings for this account. Settings
include how audit notifications are sent and which audit checks are enabled or disabled.
Requires permission to access the UpdateAccountAuditConfiguration action.

# Keyword Parameters
- `audit_check_configurations`: Specifies which audit checks are enabled and disabled for
  this account. Use DescribeAccountAuditConfiguration to see the list of all checks,
  including those that are currently enabled. Some data collection might start immediately
  when certain checks are enabled. When a check is disabled, any data collected so far in
  relation to the check is deleted. You cannot disable a check if it's used by any scheduled
  audit. You must first delete the check from the scheduled audit or delete the scheduled
  audit itself. On the first call to UpdateAccountAuditConfiguration, this parameter is
  required and must specify at least one enabled check.
- `audit_notification_target_configurations`: Information about the targets to which audit
  notifications are sent.
- `role_arn`: The Amazon Resource Name (ARN) of the role that grants permission to IoT to
  access information about your devices, policies, certificates, and other items as required
  when performing an audit.
"""
function update_account_audit_configuration(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PATCH", "/audit/configuration", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_audit_suppression(check_name, resource_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Updates a Device Defender audit suppression.

# Arguments
- `check_name`:
- `resource_identifier`:

# Keyword Parameters
- `description`:  The description of the audit suppression.
- `expiration_date`:  The expiration date (epoch timestamp in seconds) that you want the
  suppression to adhere to.
- `suppress_indefinitely`:  Indicates whether a suppression should exist indefinitely or
  not.
"""
function update_audit_suppression(checkName, resourceIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PATCH", "/audit/suppressions/update", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("checkName"=>checkName, "resourceIdentifier"=>resourceIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_authorizer(authorizer_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates an authorizer. Requires permission to access the UpdateAuthorizer action.

# Arguments
- `authorizer_name`: The authorizer name.

# Keyword Parameters
- `authorizer_function_arn`: The ARN of the authorizer's Lambda function.
- `status`: The status of the update authorizer request.
- `token_key_name`: The key used to extract the token from the HTTP headers.
- `token_signing_public_keys`: The public keys used to verify the token signature.
"""
function update_authorizer(authorizerName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PUT", "/authorizer/$(authorizerName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_billing_group(billing_group_name, billing_group_properties; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates information about the billing group. Requires permission to access the
UpdateBillingGroup action.

# Arguments
- `billing_group_name`: The name of the billing group.
- `billing_group_properties`: The properties of the billing group.

# Keyword Parameters
- `expected_version`: The expected version of the billing group. If the version of the
  billing group does not match the expected version specified in the request, the
  UpdateBillingGroup request is rejected with a VersionConflictException.
"""
function update_billing_group(billingGroupName, billingGroupProperties; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PATCH", "/billing-groups/$(billingGroupName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("billingGroupProperties"=>billingGroupProperties), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_cacertificate(ca_certificate_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates a registered CA certificate. Requires permission to access the UpdateCACertificate
action.

# Arguments
- `ca_certificate_id`: The CA certificate identifier.

# Keyword Parameters
- `new_auto_registration_status`: The new value for the auto registration status. Valid
  values are: \"ENABLE\" or \"DISABLE\".
- `new_status`: The updated status of the CA certificate.  Note: The status value
  REGISTER_INACTIVE is deprecated and should not be used.
- `registration_config`: Information about the registration configuration.
- `remove_auto_registration`: If true, removes auto registration.
"""
function update_cacertificate(caCertificateId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PUT", "/cacertificate/$(caCertificateId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_certificate(certificate_id, new_status; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the status of the specified certificate. This operation is idempotent. Requires
permission to access the UpdateCertificate action. Certificates must be in the ACTIVE state
to authenticate devices that use a certificate to connect to IoT. Within a few minutes of
updating a certificate from the ACTIVE state to any other state, IoT disconnects all
devices that used that certificate to connect. Devices cannot use a certificate that is not
in the ACTIVE state to reconnect.

# Arguments
- `certificate_id`: The ID of the certificate. (The last part of the certificate ARN
  contains the certificate ID.)
- `new_status`: The new status.  Note: Setting the status to PENDING_TRANSFER or
  PENDING_ACTIVATION will result in an exception being thrown. PENDING_TRANSFER and
  PENDING_ACTIVATION are statuses used internally by IoT. They are not intended for developer
  use.  Note: The status value REGISTER_INACTIVE is deprecated and should not be used.

"""
function update_certificate(certificateId, newStatus; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PUT", "/certificates/$(certificateId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("newStatus"=>newStatus), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_custom_metric(display_name, metric_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates a Device Defender detect custom metric.  Requires permission to access the
UpdateCustomMetric action.

# Arguments
- `display_name`:  Field represents a friendly name in the console for the custom metric,
  it doesn't have to be unique. Don't use this name as the metric identifier in the device
  metric report. Can be updated.
- `metric_name`:  The name of the custom metric. Cannot be updated.

"""
function update_custom_metric(displayName, metricName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PATCH", "/custom-metric/$(metricName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("displayName"=>displayName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_dimension(name, string_values; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the definition for a dimension. You cannot change the type of a dimension after it
is created (you can delete it and recreate it). Requires permission to access the
UpdateDimension action.

# Arguments
- `name`: A unique identifier for the dimension. Choose something that describes the type
  and value to make it easy to remember what it does.
- `string_values`: Specifies the value or list of values for the dimension. For
  TOPIC_FILTER dimensions, this is a pattern used to match the MQTT topic (for example,
  \"admin/#\").

"""
function update_dimension(name, stringValues; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PATCH", "/dimensions/$(name)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("stringValues"=>stringValues), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_domain_configuration(domain_configuration_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates values stored in the domain configuration. Domain configurations for default
endpoints can't be updated. Requires permission to access the UpdateDomainConfiguration
action.

# Arguments
- `domain_configuration_name`: The name of the domain configuration to be updated.

# Keyword Parameters
- `authorizer_config`: An object that specifies the authorization service for a domain.
- `domain_configuration_status`: The status to which the domain configuration should be
  updated.
- `remove_authorizer_config`: Removes the authorization configuration from a domain.
"""
function update_domain_configuration(domainConfigurationName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PUT", "/domainConfigurations/$(domainConfigurationName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_dynamic_thing_group(thing_group_name, thing_group_properties; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates a dynamic thing group. Requires permission to access the UpdateDynamicThingGroup
action.

# Arguments
- `thing_group_name`: The name of the dynamic thing group to update.
- `thing_group_properties`: The dynamic thing group properties to update.

# Keyword Parameters
- `expected_version`: The expected version of the dynamic thing group to update.
- `index_name`: The dynamic thing group index to update.  Currently one index is supported:
  AWS_Things.
- `query_string`: The dynamic thing group search query string to update.
- `query_version`: The dynamic thing group query version to update.  Currently one query
  version is supported: \"2017-09-30\". If not specified, the query version defaults to this
  value.
"""
function update_dynamic_thing_group(thingGroupName, thingGroupProperties; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PATCH", "/dynamic-thing-groups/$(thingGroupName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("thingGroupProperties"=>thingGroupProperties), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_event_configurations(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the event configurations. Requires permission to access the
UpdateEventConfigurations action.

# Keyword Parameters
- `event_configurations`: The new event configuration values.
"""
function update_event_configurations(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PATCH", "/event-configurations", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_fleet_metric(index_name, metric_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the data for a fleet metric. Requires permission to access the UpdateFleetMetric
action.

# Arguments
- `index_name`: The name of the index to search.
- `metric_name`: The name of the fleet metric to update.

# Keyword Parameters
- `aggregation_field`: The field to aggregate.
- `aggregation_type`: The type of the aggregation query.
- `description`: The description of the fleet metric.
- `expected_version`: The expected version of the fleet metric record in the registry.
- `period`: The time in seconds between fleet metric emissions. Range [60(1 min), 86400(1
  day)] and must be multiple of 60.
- `query_string`: The search query string.
- `query_version`: The version of the query.
- `unit`: Used to support unit transformation such as milliseconds to seconds. The unit
  must be supported by CW metric.
"""
function update_fleet_metric(indexName, metricName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PATCH", "/fleet-metric/$(metricName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("indexName"=>indexName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_indexing_configuration(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the search configuration. Requires permission to access the
UpdateIndexingConfiguration action.

# Keyword Parameters
- `thing_group_indexing_configuration`: Thing group indexing configuration.
- `thing_indexing_configuration`: Thing indexing configuration.
"""
function update_indexing_configuration(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/indexing/config", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_job(job_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates supported fields of the specified job. Requires permission to access the UpdateJob
action.

# Arguments
- `job_id`: The ID of the job to be updated.

# Keyword Parameters
- `abort_config`: Allows you to create criteria to abort a job.
- `description`: A short text description of the job.
- `job_executions_rollout_config`: Allows you to create a staged rollout of the job.
- `namespace_id`: The namespace used to indicate that a job is a customer-managed job. When
  you specify a value for this parameter, Amazon Web Services IoT Core sends jobs
  notifications to MQTT topics that contain the value in the following format.
  aws/things/THING_NAME/jobs/JOB_ID/notify-namespace-NAMESPACE_ID/   The namespaceId feature
  is in public preview.
- `presigned_url_config`: Configuration information for pre-signed S3 URLs.
- `timeout_config`: Specifies the amount of time each device has to finish its execution of
  the job. The timer is started when the job execution status is set to IN_PROGRESS. If the
  job execution status is not set to another terminal state before the time expires, it will
  be automatically set to TIMED_OUT.
"""
function update_job(jobId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PATCH", "/jobs/$(jobId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_mitigation_action(action_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the definition for the specified mitigation action. Requires permission to access
the UpdateMitigationAction action.

# Arguments
- `action_name`: The friendly name for the mitigation action. You cannot change the name by
  using UpdateMitigationAction. Instead, you must delete and recreate the mitigation action
  with the new name.

# Keyword Parameters
- `action_params`: Defines the type of action and the parameters for that action.
- `role_arn`: The ARN of the IAM role that is used to apply the mitigation action.
"""
function update_mitigation_action(actionName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PATCH", "/mitigationactions/actions/$(actionName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_provisioning_template(template_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates a fleet provisioning template. Requires permission to access the
UpdateProvisioningTemplate action.

# Arguments
- `template_name`: The name of the fleet provisioning template.

# Keyword Parameters
- `default_version_id`: The ID of the default provisioning template version.
- `description`: The description of the fleet provisioning template.
- `enabled`: True to enable the fleet provisioning template, otherwise false.
- `pre_provisioning_hook`: Updates the pre-provisioning hook template.
- `provisioning_role_arn`: The ARN of the role associated with the provisioning template.
  This IoT role grants permission to provision a device.
- `remove_pre_provisioning_hook`: Removes pre-provisioning hook template.
"""
function update_provisioning_template(templateName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PATCH", "/provisioning-templates/$(templateName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_role_alias(role_alias; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates a role alias. Requires permission to access the UpdateRoleAlias action.

# Arguments
- `role_alias`: The role alias to update.

# Keyword Parameters
- `credential_duration_seconds`: The number of seconds the credential will be valid.
- `role_arn`: The role ARN.
"""
function update_role_alias(roleAlias; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PUT", "/role-aliases/$(roleAlias)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_scheduled_audit(scheduled_audit_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates a scheduled audit, including which checks are performed and how often the audit
takes place. Requires permission to access the UpdateScheduledAudit action.

# Arguments
- `scheduled_audit_name`: The name of the scheduled audit. (Max. 128 chars)

# Keyword Parameters
- `day_of_month`: The day of the month on which the scheduled audit takes place. This can
  be 1 through 31 or LAST. This field is required if the frequency parameter is set to
  MONTHLY. If days 29-31 are specified, and the month does not have that many days, the audit
  takes place on the \"LAST\" day of the month.
- `day_of_week`: The day of the week on which the scheduled audit takes place. This can be
  one of SUN, MON, TUE, WED, THU, FRI, or SAT. This field is required if the \"frequency\"
  parameter is set to WEEKLY or BIWEEKLY.
- `frequency`: How often the scheduled audit takes place, either DAILY, WEEKLY, BIWEEKLY,
  or MONTHLY. The start time of each audit is determined by the system.
- `target_check_names`: Which checks are performed during the scheduled audit. Checks must
  be enabled for your account. (Use DescribeAccountAuditConfiguration to see the list of all
  checks, including those that are enabled or use UpdateAccountAuditConfiguration to select
  which checks are enabled.)
"""
function update_scheduled_audit(scheduledAuditName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PATCH", "/audit/scheduledaudits/$(scheduledAuditName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_security_profile(security_profile_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates a Device Defender security profile. Requires permission to access the
UpdateSecurityProfile action.

# Arguments
- `security_profile_name`: The name of the security profile you want to update.

# Keyword Parameters
- `additional_metrics_to_retain`:  Please use
  UpdateSecurityProfileRequestadditionalMetricsToRetainV2 instead.  A list of metrics whose
  data is retained (stored). By default, data is retained for any metric used in the
  profile's behaviors, but it is also retained for any metric specified here. Can be used
  with custom metrics; cannot be used with dimensions.
- `additional_metrics_to_retain_v2`: A list of metrics whose data is retained (stored). By
  default, data is retained for any metric used in the profile's behaviors, but it is also
  retained for any metric specified here. Can be used with custom metrics; cannot be used
  with dimensions.
- `alert_targets`: Where the alerts are sent. (Alerts are always sent to the console.)
- `behaviors`: Specifies the behaviors that, when violated by a device (thing), cause an
  alert.
- `delete_additional_metrics_to_retain`: If true, delete all additionalMetricsToRetain
  defined for this security profile. If any additionalMetricsToRetain are defined in the
  current invocation, an exception occurs.
- `delete_alert_targets`: If true, delete all alertTargets defined for this security
  profile. If any alertTargets are defined in the current invocation, an exception occurs.
- `delete_behaviors`: If true, delete all behaviors defined for this security profile. If
  any behaviors are defined in the current invocation, an exception occurs.
- `expected_version`: The expected version of the security profile. A new version is
  generated whenever the security profile is updated. If you specify a value that is
  different from the actual version, a VersionConflictException is thrown.
- `security_profile_description`: A description of the security profile.
"""
function update_security_profile(securityProfileName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PATCH", "/security-profiles/$(securityProfileName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_stream(stream_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates an existing stream. The stream version will be incremented by one. Requires
permission to access the UpdateStream action.

# Arguments
- `stream_id`: The stream ID.

# Keyword Parameters
- `description`: The description of the stream.
- `files`: The files associated with the stream.
- `role_arn`: An IAM role that allows the IoT service principal assumes to access your S3
  files.
"""
function update_stream(streamId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PUT", "/streams/$(streamId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_thing(thing_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the data for a thing. Requires permission to access the UpdateThing action.

# Arguments
- `thing_name`: The name of the thing to update. You can't change a thing's name. To change
  a thing's name, you must create a new thing, give it the new name, and then delete the old
  thing.

# Keyword Parameters
- `attribute_payload`: A list of thing attributes, a JSON string containing name-value
  pairs. For example:  {\"attributes\":{\"name1\":\"value2\"}}  This data is used to add new
  attributes or update existing attributes.
- `expected_version`: The expected version of the thing record in the registry. If the
  version of the record in the registry does not match the expected version specified in the
  request, the UpdateThing request is rejected with a VersionConflictException.
- `remove_thing_type`: Remove a thing type association. If true, the association is removed.
- `thing_type_name`: The name of the thing type.
"""
function update_thing(thingName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PATCH", "/things/$(thingName)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_thing_group(thing_group_name, thing_group_properties; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Update a thing group. Requires permission to access the UpdateThingGroup action.

# Arguments
- `thing_group_name`: The thing group to update.
- `thing_group_properties`: The thing group properties.

# Keyword Parameters
- `expected_version`: The expected version of the thing group. If this does not match the
  version of the thing group being updated, the update will fail.
"""
function update_thing_group(thingGroupName, thingGroupProperties; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PATCH", "/thing-groups/$(thingGroupName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("thingGroupProperties"=>thingGroupProperties), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_thing_groups_for_thing(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the groups to which the thing belongs. Requires permission to access the
UpdateThingGroupsForThing action.

# Keyword Parameters
- `override_dynamic_groups`: Override dynamic thing groups with static thing groups when
  10-group limit is reached. If a thing belongs to 10 thing groups, and one or more of those
  groups are dynamic thing groups, adding a thing to a static group removes the thing from
  the last dynamic group.
- `thing_groups_to_add`: The groups to which the thing will be added.
- `thing_groups_to_remove`: The groups from which the thing will be removed.
- `thing_name`: The thing whose group memberships will be updated.
"""
function update_thing_groups_for_thing(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PUT", "/thing-groups/updateThingGroupsForThing", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_topic_rule_destination(arn, status; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates a topic rule destination. You use this to change the status, endpoint URL, or
confirmation URL of the destination. Requires permission to access the
UpdateTopicRuleDestination action.

# Arguments
- `arn`: The ARN of the topic rule destination.
- `status`: The status of the topic rule destination. Valid values are:  IN_PROGRESS  A
  topic rule destination was created but has not been confirmed. You can set status to
  IN_PROGRESS by calling UpdateTopicRuleDestination. Calling UpdateTopicRuleDestination
  causes a new confirmation challenge to be sent to your confirmation endpoint.  ENABLED
  Confirmation was completed, and traffic to this destination is allowed. You can set status
  to DISABLED by calling UpdateTopicRuleDestination.  DISABLED  Confirmation was completed,
  and traffic to this destination is not allowed. You can set status to ENABLED by calling
  UpdateTopicRuleDestination.  ERROR  Confirmation could not be completed, for example if the
  confirmation timed out. You can call GetTopicRuleDestination for details about the error.
  You can set status to IN_PROGRESS by calling UpdateTopicRuleDestination. Calling
  UpdateTopicRuleDestination causes a new confirmation challenge to be sent to your
  confirmation endpoint.

"""
function update_topic_rule_destination(arn, status; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("PATCH", "/destinations", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn, "status"=>status), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    validate_security_profile_behaviors(behaviors; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Validates a Device Defender security profile behaviors specification. Requires permission
to access the ValidateSecurityProfileBehaviors action.

# Arguments
- `behaviors`: Specifies the behaviors that, when violated by a device (thing), cause an
  alert.

"""
function validate_security_profile_behaviors(behaviors; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return iot("POST", "/security-profile-behaviors/validate", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("behaviors"=>behaviors), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
