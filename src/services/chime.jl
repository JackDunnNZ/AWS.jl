# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: chime
using AWS.Compat
using AWS.UUIDs

# Julia syntax for service-level optional parameters to the AWS request syntax
const SERVICE_PARAMETER_MAP = AWS.LittleDict("chime_bearer" => "x-amz-chime-bearer", "voice_connector_items" => "VoiceConnectorItems", "max_results" => "max-results", "next_token" => "next-token", "type" => "type", "app_instance_user_arn" => "app-instance-user-arn", "expiry_minutes" => "ExpiryMinutes", "geo_match_level" => "GeoMatchLevel", "geo_match_params" => "GeoMatchParams", "name" => "Name", "number_selection_behavior" => "NumberSelectionBehavior", "client_request_token" => "ClientRequestToken", "metadata" => "Metadata", "sip_media_application_id" => "sip-media-application", "disabled" => "Disabled", "fall_back_phone_number" => "FallBackPhoneNumber", "business_calling" => "BusinessCalling", "voice_connector" => "VoiceConnector", "privacy" => "Privacy", "user_type" => "UserType", "not_after" => "not-after", "not_before" => "not-before", "sort_order" => "sort-order", "filter_name" => "filter-name", "filter_value" => "filter-value", "product_type" => "ProductType", "status" => "status", "calling_name" => "CallingName", "attendees" => "Attendees", "external_meeting_id" => "ExternalMeetingId", "media_region" => "MediaRegion", "meeting_host_id" => "MeetingHostId", "notifications_configuration" => "NotificationsConfiguration", "tags" => "Tags", "user_email" => "user-email", "endpoints" => "Endpoints", "chime_sdk_meeting_configuration" => "ChimeSdkMeetingConfiguration", "domain" => "Domain", "content" => "Content", "lambda_function_arn" => "LambdaFunctionArn", "outbound_events_httpsendpoint" => "OutboundEventsHTTPSEndpoint", "credentials" => "Credentials", "aws_region" => "AwsRegion", "role" => "Role", "sip_media_application_logging_configuration" => "SipMediaApplicationLoggingConfiguration", "member_id" => "member-id", "force_associate" => "ForceAssociate", "target_applications" => "TargetApplications", "email" => "Email", "username" => "Username", "sip_headers" => "SipHeaders", "area_code" => "area-code", "city" => "city", "country" => "country", "phone_number_type" => "phone-number-type", "state" => "state", "toll_free_prefix" => "toll-free-prefix", "default_license" => "DefaultLicense", "alexa_for_business_metadata" => "AlexaForBusinessMetadata", "license_type" => "LicenseType", "mode" => "Mode")

"""
    associate_phone_number_with_user(e164_phone_number, account_id, user_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Associates a phone number with the specified Amazon Chime user.

# Arguments
- `e164_phone_number`: The phone number, in E.164 format.
- `account_id`: The Amazon Chime account ID.
- `user_id`: The user ID.

"""
function associate_phone_number_with_user(E164PhoneNumber, accountId, userId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/accounts/$(accountId)/users/$(userId)?operation=associate-phone-number", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("E164PhoneNumber"=>E164PhoneNumber), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    associate_phone_numbers_with_voice_connector(e164_phone_numbers, voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Associates phone numbers with the specified Amazon Chime Voice Connector.

# Arguments
- `e164_phone_numbers`: List of phone numbers, in E.164 format.
- `voice_connector_id`: The Amazon Chime Voice Connector ID.

# Keyword Parameters
- `force_associate`: If true, associates the provided phone numbers with the provided
  Amazon Chime Voice Connector and removes any previously existing associations. If false,
  does not associate any phone numbers that have previously existing associations.
"""
function associate_phone_numbers_with_voice_connector(E164PhoneNumbers, voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/voice-connectors/$(voiceConnectorId)?operation=associate-phone-numbers", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("E164PhoneNumbers"=>E164PhoneNumbers), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    associate_phone_numbers_with_voice_connector_group(e164_phone_numbers, voice_connector_group_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Associates phone numbers with the specified Amazon Chime Voice Connector group.

# Arguments
- `e164_phone_numbers`: List of phone numbers, in E.164 format.
- `voice_connector_group_id`: The Amazon Chime Voice Connector group ID.

# Keyword Parameters
- `force_associate`: If true, associates the provided phone numbers with the provided
  Amazon Chime Voice Connector Group and removes any previously existing associations. If
  false, does not associate any phone numbers that have previously existing associations.
"""
function associate_phone_numbers_with_voice_connector_group(E164PhoneNumbers, voiceConnectorGroupId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/voice-connector-groups/$(voiceConnectorGroupId)?operation=associate-phone-numbers", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("E164PhoneNumbers"=>E164PhoneNumbers), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    associate_signin_delegate_groups_with_account(signin_delegate_groups, account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Associates the specified sign-in delegate groups with the specified Amazon Chime account.

# Arguments
- `signin_delegate_groups`: The sign-in delegate groups.
- `account_id`: The Amazon Chime account ID.

"""
function associate_signin_delegate_groups_with_account(SigninDelegateGroups, accountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/accounts/$(accountId)?operation=associate-signin-delegate-groups", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("SigninDelegateGroups"=>SigninDelegateGroups), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    batch_create_attendee(attendees, meeting_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Creates up to 100 new attendees for an active Amazon Chime SDK meeting. For more
information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime
Developer Guide.

# Arguments
- `attendees`: The request containing the attendees to create.
- `meeting_id`: The Amazon Chime SDK meeting ID.

"""
function batch_create_attendee(Attendees, meetingId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/meetings/$(meetingId)/attendees?operation=batch-create", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Attendees"=>Attendees), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    batch_create_channel_membership(member_arns, channel_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds a specified number of users to a channel.

# Arguments
- `member_arns`: The ARNs of the members you want to add to the channel.
- `channel_arn`: The ARN of the channel to which you're adding users.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
- `type`: The membership type of a user, DEFAULT or HIDDEN. Default members are always
  returned as part of ListChannelMemberships. Hidden members are only returned if the type
  filter in ListChannelMemberships equals HIDDEN. Otherwise hidden members are not returned.
  This is only supported by moderators.
"""
function batch_create_channel_membership(MemberArns, channelArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/channels/$(channelArn)/memberships?operation=batch-create", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("MemberArns"=>MemberArns), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    batch_create_room_membership(membership_item_list, account_id, room_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds up to 50 members to a chat room in an Amazon Chime Enterprise account. Members can be
users or bots. The member role designates whether the member is a chat room administrator
or a general chat room member.

# Arguments
- `membership_item_list`: The list of membership items.
- `account_id`: The Amazon Chime account ID.
- `room_id`: The room ID.

"""
function batch_create_room_membership(MembershipItemList, accountId, roomId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/accounts/$(accountId)/rooms/$(roomId)/memberships?operation=batch-create", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("MembershipItemList"=>MembershipItemList), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    batch_delete_phone_number(phone_number_ids; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Moves phone numbers into the Deletion queue. Phone numbers must be disassociated from any
users or Amazon Chime Voice Connectors before they can be deleted.   Phone numbers remain
in the Deletion queue for 7 days before they are deleted permanently.

# Arguments
- `phone_number_ids`: List of phone number IDs.

"""
function batch_delete_phone_number(PhoneNumberIds; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/phone-numbers?operation=batch-delete", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("PhoneNumberIds"=>PhoneNumberIds), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    batch_suspend_user(user_id_list, account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Suspends up to 50 users from a Team or EnterpriseLWA Amazon Chime account. For more
information about different account types, see Managing Your Amazon Chime Accounts in the
Amazon Chime Administration Guide. Users suspended from a Team account are disassociated
from the account,but they can continue to use Amazon Chime as free users. To remove the
suspension from suspended Team account users, invite them to the Team account again. You
can use the InviteUsers action to do so. Users suspended from an EnterpriseLWA account are
immediately signed out of Amazon Chime and can no longer sign in. To remove the suspension
from suspended EnterpriseLWA account users, use the BatchUnsuspendUser action.  To sign out
users without suspending them, use the LogoutUser action.

# Arguments
- `user_id_list`: The request containing the user IDs to suspend.
- `account_id`: The Amazon Chime account ID.

"""
function batch_suspend_user(UserIdList, accountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/accounts/$(accountId)/users?operation=suspend", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("UserIdList"=>UserIdList), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    batch_unsuspend_user(user_id_list, account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes the suspension from up to 50 previously suspended users for the specified Amazon
Chime EnterpriseLWA account. Only users on EnterpriseLWA accounts can be unsuspended using
this action. For more information about different account types, see  Managing Your Amazon
Chime Accounts  in the account types, in the Amazon Chime Administration Guide.
Previously suspended users who are unsuspended using this action are returned to Registered
status. Users who are not previously suspended are ignored.

# Arguments
- `user_id_list`: The request containing the user IDs to unsuspend.
- `account_id`: The Amazon Chime account ID.

"""
function batch_unsuspend_user(UserIdList, accountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/accounts/$(accountId)/users?operation=unsuspend", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("UserIdList"=>UserIdList), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    batch_update_phone_number(update_phone_number_request_items; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates phone number product types or calling names. You can update one attribute at a time
for each UpdatePhoneNumberRequestItem. For example, you can update the product type or the
calling name. For toll-free numbers, you cannot use the Amazon Chime Business Calling
product type. For numbers outside the U.S., you must use the Amazon Chime SIP Media
Application Dial-In product type. Updates to outbound calling names can take up to 72 hours
to complete. Pending updates to outbound calling names must be complete before you can
request another update.

# Arguments
- `update_phone_number_request_items`: The request containing the phone number IDs and
  product types or calling names to update.

"""
function batch_update_phone_number(UpdatePhoneNumberRequestItems; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/phone-numbers?operation=batch-update", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("UpdatePhoneNumberRequestItems"=>UpdatePhoneNumberRequestItems), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    batch_update_user(update_user_request_items, account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates user details within the UpdateUserRequestItem object for up to 20 users for the
specified Amazon Chime account. Currently, only LicenseType updates are supported for this
action.

# Arguments
- `update_user_request_items`: The request containing the user IDs and details to update.
- `account_id`: The Amazon Chime account ID.

"""
function batch_update_user(UpdateUserRequestItems, accountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/accounts/$(accountId)/users", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("UpdateUserRequestItems"=>UpdateUserRequestItems), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_account(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an Amazon Chime account under the administrator's AWS account. Only Team account
types are currently supported for this action. For more information about different account
types, see Managing Your Amazon Chime Accounts in the Amazon Chime Administration Guide.

# Arguments
- `name`: The name of the Amazon Chime account.

"""
function create_account(Name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/accounts", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Name"=>Name), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_app_instance(client_request_token, name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an Amazon Chime SDK messaging AppInstance under an AWS account. Only SDK messaging
customers use this API. CreateAppInstance supports idempotency behavior as described in the
AWS API Standard.

# Arguments
- `client_request_token`: The ClientRequestToken of the AppInstance.
- `name`: The name of the AppInstance.

# Keyword Parameters
- `metadata`: The metadata of the AppInstance. Limited to a 1KB string in UTF-8.
- `tags`: Tags assigned to the AppInstanceUser.
"""
function create_app_instance(ClientRequestToken, Name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/app-instances", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClientRequestToken"=>ClientRequestToken, "Name"=>Name), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_app_instance_admin(app_instance_admin_arn, app_instance_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Promotes an AppInstanceUser to an AppInstanceAdmin. The promoted user can perform the
following actions.     ChannelModerator actions across all channels in the AppInstance.
DeleteChannelMessage actions.   Only an AppInstanceUser can be promoted to an
AppInstanceAdmin role.

# Arguments
- `app_instance_admin_arn`: The ARN of the administrator of the current AppInstance.
- `app_instance_arn`: The ARN of the AppInstance.

"""
function create_app_instance_admin(AppInstanceAdminArn, appInstanceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/app-instances/$(appInstanceArn)/admins", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("AppInstanceAdminArn"=>AppInstanceAdminArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_app_instance_user(app_instance_arn, app_instance_user_id, client_request_token, name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a user under an Amazon Chime AppInstance. The request consists of a unique
appInstanceUserId and Name for that user.

# Arguments
- `app_instance_arn`: The ARN of the AppInstance request.
- `app_instance_user_id`: The user ID of the AppInstance.
- `client_request_token`: The token assigned to the user requesting an AppInstance.
- `name`: The user's name.

# Keyword Parameters
- `metadata`: The request's metadata. Limited to a 1KB string in UTF-8.
- `tags`: Tags assigned to the AppInstanceUser.
"""
function create_app_instance_user(AppInstanceArn, AppInstanceUserId, ClientRequestToken, Name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/app-instance-users", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("AppInstanceArn"=>AppInstanceArn, "AppInstanceUserId"=>AppInstanceUserId, "ClientRequestToken"=>ClientRequestToken, "Name"=>Name), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_attendee(external_user_id, meeting_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Creates a new attendee for an active Amazon Chime SDK meeting. For more information about
the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime Developer Guide.

# Arguments
- `external_user_id`: The Amazon Chime SDK external user ID. An idempotency token. Links
  the attendee to an identity managed by a builder application.
- `meeting_id`: The Amazon Chime SDK meeting ID.

# Keyword Parameters
- `tags`: The tag key-value pairs.
"""
function create_attendee(ExternalUserId, meetingId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/meetings/$(meetingId)/attendees", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ExternalUserId"=>ExternalUserId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_bot(display_name, account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a bot for an Amazon Chime Enterprise account.

# Arguments
- `display_name`: The bot display name.
- `account_id`: The Amazon Chime account ID.

# Keyword Parameters
- `domain`: The domain of the Amazon Chime Enterprise account.
"""
function create_bot(DisplayName, accountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/accounts/$(accountId)/bots", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("DisplayName"=>DisplayName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_channel(app_instance_arn, client_request_token, name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a channel to which you can add users and send messages.  Restriction: You can't
change a channel's privacy.  The x-amz-chime-bearer request header is mandatory. Use the
AppInstanceUserArn of the user that makes the API call as the value in the header.

# Arguments
- `app_instance_arn`: The ARN of the channel request.
- `client_request_token`: The client token for the request. An Idempotency token.
- `name`: The name of the channel.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
- `metadata`: The metadata of the creation request. Limited to 1KB and UTF-8.
- `mode`: The channel mode: UNRESTRICTED or RESTRICTED. Administrators, moderators, and
  channel members can add themselves and other members to unrestricted channels. Only
  administrators and moderators can add members to restricted channels.
- `privacy`: The channel's privacy level: PUBLIC or PRIVATE. Private channels aren't
  discoverable by users outside the channel. Public channels are discoverable by anyone in
  the AppInstance.
- `tags`: The tags for the creation request.
"""
function create_channel(AppInstanceArn, ClientRequestToken, Name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/channels", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("AppInstanceArn"=>AppInstanceArn, "ClientRequestToken"=>ClientRequestToken, "Name"=>Name), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_channel_ban(member_arn, channel_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Permanently bans a member from a channel. Moderators can't add banned members to a channel.
To undo a ban, you first have to DeleteChannelBan, and then CreateChannelMembership. Bans
are cleaned up when you delete users or channels. If you ban a user who is already part of
a channel, that user is automatically kicked from the channel.  The x-amz-chime-bearer
request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call
as the value in the header.

# Arguments
- `member_arn`: The ARN of the member being banned.
- `channel_arn`: The ARN of the ban request.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
"""
function create_channel_ban(MemberArn, channelArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/channels/$(channelArn)/bans", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("MemberArn"=>MemberArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_channel_membership(member_arn, type, channel_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds a user to a channel. The InvitedBy response field is derived from the request header.
A channel member can:   List messages   Send messages   Receive messages   Edit their own
messages   Leave the channel   Privacy settings impact this action as follows:   Public
Channels: You do not need to be a member to list messages, but you must be a member to send
messages.   Private Channels: You must be a member to list or send messages.    The
x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that
makes the API call as the value in the header.

# Arguments
- `member_arn`: The ARN of the member you want to add to the channel.
- `type`: The membership type of a user, DEFAULT or HIDDEN. Default members are always
  returned as part of ListChannelMemberships. Hidden members are only returned if the type
  filter in ListChannelMemberships equals HIDDEN. Otherwise hidden members are not returned.
  This is only supported by moderators.
- `channel_arn`: The ARN of the channel to which you're adding users.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
"""
function create_channel_membership(MemberArn, Type, channelArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/channels/$(channelArn)/memberships", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("MemberArn"=>MemberArn, "Type"=>Type), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_channel_moderator(channel_moderator_arn, channel_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a new ChannelModerator. A channel moderator can:   Add and remove other members of
the channel.   Add and remove other moderators of the channel.   Add and remove user bans
for the channel.   Redact messages in the channel.   List messages in the channel.    The
x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that
makes the API call as the value in the header.

# Arguments
- `channel_moderator_arn`: The ARN of the moderator.
- `channel_arn`: The ARN of the channel.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
"""
function create_channel_moderator(ChannelModeratorArn, channelArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/channels/$(channelArn)/moderators", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ChannelModeratorArn"=>ChannelModeratorArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_media_capture_pipeline(sink_arn, sink_type, source_arn, source_type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a media capture pipeline.

# Arguments
- `sink_arn`: The ARN of the sink type.
- `sink_type`: Destination type to which the media artifacts are saved. You must use an S3
  bucket.
- `source_arn`: ARN of the source from which the media artifacts are captured.
- `source_type`: Source type from which the media artifacts will be captured. A Chime SDK
  Meeting is the only supported source.

# Keyword Parameters
- `chime_sdk_meeting_configuration`: The configuration for a specified media capture
  pipeline. SourceType must be ChimeSdkMeeting.
- `client_request_token`: The token assigned to the client making the pipeline request.
"""
function create_media_capture_pipeline(SinkArn, SinkType, SourceArn, SourceType; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/media-capture-pipelines", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("SinkArn"=>SinkArn, "SinkType"=>SinkType, "SourceArn"=>SourceArn, "SourceType"=>SourceType, "client_request_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_meeting(client_request_token; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Creates a new Amazon Chime SDK meeting in the specified media Region with no initial
attendees. For more information about specifying media Regions, see Amazon Chime SDK Media
Regions in the Amazon Chime Developer Guide . For more information about the Amazon Chime
SDK, see Using the Amazon Chime SDK in the Amazon Chime Developer Guide .

# Arguments
- `client_request_token`: The unique identifier for the client request. Use a different
  token for different meetings.

# Keyword Parameters
- `external_meeting_id`: The external meeting ID.
- `media_region`:  The Region in which to create the meeting. Default: us-east-1.
  Available values: af-south-1 , ap-northeast-1 , ap-northeast-2 , ap-south-1 ,
  ap-southeast-1 , ap-southeast-2 , ca-central-1 , eu-central-1 , eu-north-1 , eu-south-1 ,
  eu-west-1 , eu-west-2 , eu-west-3 , sa-east-1 , us-east-1 , us-east-2 , us-west-1 ,
  us-west-2 .
- `meeting_host_id`: Reserved.
- `notifications_configuration`: The configuration for resource targets to receive
  notifications when meeting and attendee events occur.
- `tags`: The tag key-value pairs.
"""
function create_meeting(ClientRequestToken; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/meetings", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClientRequestToken"=>ClientRequestToken), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_meeting_dial_out(from_phone_number, join_token, to_phone_number, meeting_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Uses the join token and call metadata in a meeting request (From number, To number, and so
forth) to initiate an outbound call to a public switched telephone network (PSTN) and join
them into a Chime meeting. Also ensures that the From number belongs to the customer. To
play welcome audio or implement an interactive voice response (IVR), use the
CreateSipMediaApplicationCall action with the corresponding SIP media application ID.

# Arguments
- `from_phone_number`: Phone number used as the caller ID when the remote party receives a
  call.
- `join_token`: Token used by the Amazon Chime SDK attendee. Call the CreateAttendee action
  to get a join token.
- `to_phone_number`: Phone number called when inviting someone to a meeting.
- `meeting_id`: The Amazon Chime SDK meeting ID.

"""
function create_meeting_dial_out(FromPhoneNumber, JoinToken, ToPhoneNumber, meetingId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/meetings/$(meetingId)/dial-outs", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("FromPhoneNumber"=>FromPhoneNumber, "JoinToken"=>JoinToken, "ToPhoneNumber"=>ToPhoneNumber), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_meeting_with_attendees(client_request_token; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Creates a new Amazon Chime SDK meeting in the specified media Region, with attendees. For
more information about specifying media Regions, see Amazon Chime SDK Media Regions in the
Amazon Chime Developer Guide . For more information about the Amazon Chime SDK, see Using
the Amazon Chime SDK in the Amazon Chime Developer Guide .

# Arguments
- `client_request_token`: The unique identifier for the client request. Use a different
  token for different meetings.

# Keyword Parameters
- `attendees`: The request containing the attendees to create.
- `external_meeting_id`: The external meeting ID.
- `media_region`:  The Region in which to create the meeting. Default: us-east-1 .
  Available values: af-south-1 , ap-northeast-1 , ap-northeast-2 , ap-south-1 ,
  ap-southeast-1 , ap-southeast-2 , ca-central-1 , eu-central-1 , eu-north-1 , eu-south-1 ,
  eu-west-1 , eu-west-2 , eu-west-3 , sa-east-1 , us-east-1 , us-east-2 , us-west-1 ,
  us-west-2 .
- `meeting_host_id`: Reserved.
- `notifications_configuration`:
- `tags`: The tag key-value pairs.
"""
function create_meeting_with_attendees(ClientRequestToken; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/meetings?operation=create-attendees", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClientRequestToken"=>ClientRequestToken), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_phone_number_order(e164_phone_numbers, product_type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an order for phone numbers to be provisioned. For toll-free numbers, you cannot use
the Amazon Chime Business Calling product type. For numbers outside the U.S., you must use
the Amazon Chime SIP Media Application Dial-In product type.

# Arguments
- `e164_phone_numbers`: List of phone numbers, in E.164 format.
- `product_type`: The phone number product type.

"""
function create_phone_number_order(E164PhoneNumbers, ProductType; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/phone-number-orders", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("E164PhoneNumbers"=>E164PhoneNumbers, "ProductType"=>ProductType), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_proxy_session(capabilities, participant_phone_numbers, voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a proxy session on the specified Amazon Chime Voice Connector for the specified
participant phone numbers.

# Arguments
- `capabilities`: The proxy session capabilities.
- `participant_phone_numbers`: The participant phone numbers.
- `voice_connector_id`: The Amazon Chime voice connector ID.

# Keyword Parameters
- `expiry_minutes`: The number of minutes allowed for the proxy session.
- `geo_match_level`: The preference for matching the country or area code of the proxy
  phone number with that of the first participant.
- `geo_match_params`: The country and area code for the proxy phone number.
- `name`: The name of the proxy session.
- `number_selection_behavior`: The preference for proxy phone number reuse, or stickiness,
  between the same participants across sessions.
"""
function create_proxy_session(Capabilities, ParticipantPhoneNumbers, voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/voice-connectors/$(voiceConnectorId)/proxy-sessions", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Capabilities"=>Capabilities, "ParticipantPhoneNumbers"=>ParticipantPhoneNumbers), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_room(name, account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a chat room for the specified Amazon Chime Enterprise account.

# Arguments
- `name`: The room name.
- `account_id`: The Amazon Chime account ID.

# Keyword Parameters
- `client_request_token`: The idempotency token for the request.
"""
function create_room(Name, accountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/accounts/$(accountId)/rooms", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Name"=>Name, "client_request_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_room_membership(member_id, account_id, room_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds a member to a chat room in an Amazon Chime Enterprise account. A member can be either
a user or a bot. The member role designates whether the member is a chat room administrator
or a general chat room member.

# Arguments
- `member_id`: The Amazon Chime member ID (user ID or bot ID).
- `account_id`: The Amazon Chime account ID.
- `room_id`: The room ID.

# Keyword Parameters
- `role`: The role of the member.
"""
function create_room_membership(MemberId, accountId, roomId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/accounts/$(accountId)/rooms/$(roomId)/memberships", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("MemberId"=>MemberId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_sip_media_application(aws_region, endpoints, name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a SIP media application.

# Arguments
- `aws_region`: The AWS Region assigned to the SIP media application.
- `endpoints`: List of endpoints (Lambda Amazon Resource Names) specified for the SIP media
  application. Currently, only one endpoint is supported.
- `name`: The SIP media application name.

"""
function create_sip_media_application(AwsRegion, Endpoints, Name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/sip-media-applications", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("AwsRegion"=>AwsRegion, "Endpoints"=>Endpoints, "Name"=>Name), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_sip_media_application_call(from_phone_number, to_phone_number, sip_media_application_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an outbound call to a phone number from the phone number specified in the request,
and it invokes the endpoint of the specified sipMediaApplicationId.

# Arguments
- `from_phone_number`: The phone number that a user calls from. This is a phone number in
  your Amazon Chime phone number inventory.
- `to_phone_number`: The phone number that the service should call.
- `sip_media_application_id`: The ID of the SIP media application.

# Keyword Parameters
- `sip_headers`: The SIP headers added to an outbound call leg.
"""
function create_sip_media_application_call(FromPhoneNumber, ToPhoneNumber, sipMediaApplicationId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/sip-media-applications/$(sipMediaApplicationId)/calls", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("FromPhoneNumber"=>FromPhoneNumber, "ToPhoneNumber"=>ToPhoneNumber), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_sip_rule(name, target_applications, trigger_type, trigger_value; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a SIP rule which can be used to run a SIP media application as a target for a
specific trigger type.

# Arguments
- `name`: The name of the SIP rule.
- `target_applications`: List of SIP media applications with priority and AWS Region. Only
  one SIP application per AWS Region can be used.
- `trigger_type`: The type of trigger assigned to the SIP rule in TriggerValue, currently
  RequestUriHostname or ToPhoneNumber.
- `trigger_value`: If TriggerType is RequestUriHostname, the value can be the outbound host
  name of an Amazon Chime Voice Connector. If TriggerType is ToPhoneNumber, the value can be
  a customer-owned phone number in the E164 format. The SipMediaApplication specified in the
  SipRule is triggered if the request URI in an incoming SIP request matches the
  RequestUriHostname, or if the To header in the incoming SIP request matches the
  ToPhoneNumber value.

# Keyword Parameters
- `disabled`: Enables or disables a rule. You must disable rules before you can delete them.
"""
function create_sip_rule(Name, TargetApplications, TriggerType, TriggerValue; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/sip-rules", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Name"=>Name, "TargetApplications"=>TargetApplications, "TriggerType"=>TriggerType, "TriggerValue"=>TriggerValue), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_user(account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a user under the specified Amazon Chime account.

# Arguments
- `account_id`: The Amazon Chime account ID.

# Keyword Parameters
- `email`: The user's email address.
- `user_type`: The user type.
- `username`: The user name.
"""
function create_user(accountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/accounts/$(accountId)/users?operation=create", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_voice_connector(name, require_encryption; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an Amazon Chime Voice Connector under the administrator's AWS account. You can
choose to create an Amazon Chime Voice Connector in a specific AWS Region.  Enabling
CreateVoiceConnectorRequestRequireEncryption configures your Amazon Chime Voice Connector
to use TLS transport for SIP signaling and Secure RTP (SRTP) for media. Inbound calls use
TLS transport, and unencrypted outbound calls are blocked.

# Arguments
- `name`: The name of the Amazon Chime Voice Connector.
- `require_encryption`: When enabled, requires encryption for the Amazon Chime Voice
  Connector.

# Keyword Parameters
- `aws_region`:  The AWS Region in which the Amazon Chime Voice Connector is created.
  Default value: us-east-1 .
"""
function create_voice_connector(Name, RequireEncryption; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/voice-connectors", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Name"=>Name, "RequireEncryption"=>RequireEncryption), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_voice_connector_group(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an Amazon Chime Voice Connector group under the administrator's AWS account. You
can associate Amazon Chime Voice Connectors with the Amazon Chime Voice Connector group by
including VoiceConnectorItems in the request. You can include Amazon Chime Voice Connectors
from different AWS Regions in your group. This creates a fault tolerant mechanism for
fallback in case of availability events.

# Arguments
- `name`: The name of the Amazon Chime Voice Connector group.

# Keyword Parameters
- `voice_connector_items`: The Amazon Chime Voice Connectors to route inbound calls to.
"""
function create_voice_connector_group(Name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/voice-connector-groups", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Name"=>Name), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_account(account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the specified Amazon Chime account. You must suspend all users before deleting Team
account. You can use the BatchSuspendUser action to dodo. For EnterpriseLWA and
EnterpriseAD accounts, you must release the claimed domains for your Amazon Chime account
before deletion. As soon as you release the domain, all users under that account are
suspended. Deleted accounts appear in your Disabled accounts list for 90 days. To restore
deleted account from your Disabled accounts list, you must contact AWS Support. After 90
days, deleted accounts are permanently removed from your Disabled accounts list.

# Arguments
- `account_id`: The Amazon Chime account ID.

"""
function delete_account(accountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/accounts/$(accountId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_app_instance(app_instance_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes an AppInstance and all associated data asynchronously.

# Arguments
- `app_instance_arn`: The ARN of the AppInstance.

"""
function delete_app_instance(appInstanceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/app-instances/$(appInstanceArn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_app_instance_admin(app_instance_admin_arn, app_instance_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Demotes an AppInstanceAdmin to an AppInstanceUser. This action does not delete the user.

# Arguments
- `app_instance_admin_arn`: The ARN of the AppInstance's administrator.
- `app_instance_arn`: The ARN of the AppInstance.

"""
function delete_app_instance_admin(appInstanceAdminArn, appInstanceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/app-instances/$(appInstanceArn)/admins/$(appInstanceAdminArn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_app_instance_streaming_configurations(app_instance_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the streaming configurations of an AppInstance.

# Arguments
- `app_instance_arn`: The ARN of the streaming configurations being deleted.

"""
function delete_app_instance_streaming_configurations(appInstanceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/app-instances/$(appInstanceArn)/streaming-configurations", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_app_instance_user(app_instance_user_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes an AppInstanceUser.

# Arguments
- `app_instance_user_arn`: The ARN of the user request being deleted.

"""
function delete_app_instance_user(appInstanceUserArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/app-instance-users/$(appInstanceUserArn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_attendee(attendee_id, meeting_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes an attendee from the specified Amazon Chime SDK meeting and deletes their
JoinToken. Attendees are automatically deleted when a Amazon Chime SDK meeting is deleted.
For more information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the
Amazon Chime Developer Guide.

# Arguments
- `attendee_id`: The Amazon Chime SDK attendee ID.
- `meeting_id`: The Amazon Chime SDK meeting ID.

"""
function delete_attendee(attendeeId, meetingId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/meetings/$(meetingId)/attendees/$(attendeeId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_channel(channel_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Immediately makes a channel and its memberships inaccessible and marks them for deletion.
This is an irreversible process.  The x-amz-chime-bearer request header is mandatory. Use
the AppInstanceUserArn of the user that makes the API call as the value in the header.

# Arguments
- `channel_arn`: The ARN of the channel being deleted.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
"""
function delete_channel(channelArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/channels/$(channelArn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_channel_ban(channel_arn, member_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes a user from a channel's ban list.  The x-amz-chime-bearer request header is
mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in
the header.

# Arguments
- `channel_arn`: The ARN of the channel from which the AppInstanceUser was banned.
- `member_arn`: The ARN of the AppInstanceUser that you want to reinstate.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
"""
function delete_channel_ban(channelArn, memberArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/channels/$(channelArn)/bans/$(memberArn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_channel_membership(channel_arn, member_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes a member from a channel.  The x-amz-chime-bearer request header is mandatory. Use
the AppInstanceUserArn of the user that makes the API call as the value in the header.

# Arguments
- `channel_arn`: The ARN of the channel from which you want to remove the user.
- `member_arn`: The ARN of the member that you're removing from the channel.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
"""
function delete_channel_membership(channelArn, memberArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/channels/$(channelArn)/memberships/$(memberArn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_channel_message(channel_arn, message_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a channel message. Only admins can perform this action. Deletion makes messages
inaccessible immediately. A background process deletes any revisions created by
UpdateChannelMessage.  The x-amz-chime-bearer request header is mandatory. Use the
AppInstanceUserArn of the user that makes the API call as the value in the header.

# Arguments
- `channel_arn`: The ARN of the channel.
- `message_id`: The ID of the message being deleted.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
"""
function delete_channel_message(channelArn, messageId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/channels/$(channelArn)/messages/$(messageId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_channel_moderator(channel_arn, channel_moderator_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a channel moderator.  The x-amz-chime-bearer request header is mandatory. Use the
AppInstanceUserArn of the user that makes the API call as the value in the header.

# Arguments
- `channel_arn`: The ARN of the channel.
- `channel_moderator_arn`: The ARN of the moderator being deleted.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
"""
function delete_channel_moderator(channelArn, channelModeratorArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/channels/$(channelArn)/moderators/$(channelModeratorArn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_events_configuration(account_id, bot_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the events configuration that allows a bot to receive outgoing events.

# Arguments
- `account_id`: The Amazon Chime account ID.
- `bot_id`: The bot ID.

"""
function delete_events_configuration(accountId, botId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/accounts/$(accountId)/bots/$(botId)/events-configuration", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_media_capture_pipeline(media_pipeline_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the media capture pipeline.

# Arguments
- `media_pipeline_id`: The ID of the media capture pipeline being deleted.

"""
function delete_media_capture_pipeline(mediaPipelineId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/media-capture-pipelines/$(mediaPipelineId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_meeting(meeting_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the specified Amazon Chime SDK meeting. The operation deletes all attendees,
disconnects all clients, and prevents new clients from joining the meeting. For more
information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime
Developer Guide.

# Arguments
- `meeting_id`: The Amazon Chime SDK meeting ID.

"""
function delete_meeting(meetingId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/meetings/$(meetingId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_phone_number(phone_number_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Moves the specified phone number into the Deletion queue. A phone number must be
disassociated from any users or Amazon Chime Voice Connectors before it can be deleted.
Deleted phone numbers remain in the Deletion queue for 7 days before they are deleted
permanently.

# Arguments
- `phone_number_id`: The phone number ID.

"""
function delete_phone_number(phoneNumberId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/phone-numbers/$(phoneNumberId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_proxy_session(proxy_session_id, voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the specified proxy session from the specified Amazon Chime Voice Connector.

# Arguments
- `proxy_session_id`: The proxy session ID.
- `voice_connector_id`: The Amazon Chime voice connector ID.

"""
function delete_proxy_session(proxySessionId, voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/voice-connectors/$(voiceConnectorId)/proxy-sessions/$(proxySessionId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_room(account_id, room_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a chat room in an Amazon Chime Enterprise account.

# Arguments
- `account_id`: The Amazon Chime account ID.
- `room_id`: The chat room ID.

"""
function delete_room(accountId, roomId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/accounts/$(accountId)/rooms/$(roomId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_room_membership(account_id, member_id, room_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes a member from a chat room in an Amazon Chime Enterprise account.

# Arguments
- `account_id`: The Amazon Chime account ID.
- `member_id`: The member ID (user ID or bot ID).
- `room_id`: The room ID.

"""
function delete_room_membership(accountId, memberId, roomId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/accounts/$(accountId)/rooms/$(roomId)/memberships/$(memberId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_sip_media_application(sip_media_application_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a SIP media application.

# Arguments
- `sip_media_application_id`: The SIP media application ID.

"""
function delete_sip_media_application(sipMediaApplicationId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/sip-media-applications/$(sipMediaApplicationId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_sip_rule(sip_rule_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a SIP rule. You must disable a SIP rule before you can delete it.

# Arguments
- `sip_rule_id`: The SIP rule ID.

"""
function delete_sip_rule(sipRuleId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/sip-rules/$(sipRuleId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_voice_connector(voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the specified Amazon Chime Voice Connector. Any phone numbers associated with the
Amazon Chime Voice Connector must be disassociated from it before it can be deleted.

# Arguments
- `voice_connector_id`: The Amazon Chime Voice Connector ID.

"""
function delete_voice_connector(voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/voice-connectors/$(voiceConnectorId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_voice_connector_emergency_calling_configuration(voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the emergency calling configuration details from the specified Amazon Chime Voice
Connector.

# Arguments
- `voice_connector_id`: The Amazon Chime Voice Connector ID.

"""
function delete_voice_connector_emergency_calling_configuration(voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/voice-connectors/$(voiceConnectorId)/emergency-calling-configuration", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_voice_connector_group(voice_connector_group_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the specified Amazon Chime Voice Connector group. Any VoiceConnectorItems and phone
numbers associated with the group must be removed before it can be deleted.

# Arguments
- `voice_connector_group_id`: The Amazon Chime Voice Connector group ID.

"""
function delete_voice_connector_group(voiceConnectorGroupId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/voice-connector-groups/$(voiceConnectorGroupId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_voice_connector_origination(voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the origination settings for the specified Amazon Chime Voice Connector.  If
emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted
prior to deleting the origination settings.

# Arguments
- `voice_connector_id`: The Amazon Chime Voice Connector ID.

"""
function delete_voice_connector_origination(voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/voice-connectors/$(voiceConnectorId)/origination", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_voice_connector_proxy(voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the proxy configuration from the specified Amazon Chime Voice Connector.

# Arguments
- `voice_connector_id`: The Amazon Chime Voice Connector ID.

"""
function delete_voice_connector_proxy(voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/voice-connectors/$(voiceConnectorId)/programmable-numbers/proxy", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_voice_connector_streaming_configuration(voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the streaming configuration for the specified Amazon Chime Voice Connector.

# Arguments
- `voice_connector_id`: The Amazon Chime Voice Connector ID.

"""
function delete_voice_connector_streaming_configuration(voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/voice-connectors/$(voiceConnectorId)/streaming-configuration", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_voice_connector_termination(voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the termination settings for the specified Amazon Chime Voice Connector.  If
emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted
prior to deleting the termination settings.

# Arguments
- `voice_connector_id`: The Amazon Chime Voice Connector ID.

"""
function delete_voice_connector_termination(voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("DELETE", "/voice-connectors/$(voiceConnectorId)/termination", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_voice_connector_termination_credentials(usernames, voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the specified SIP credentials used by your equipment to authenticate during call
termination.

# Arguments
- `usernames`: The RFC2617 compliant username associated with the SIP credentials, in
  US-ASCII format.
- `voice_connector_id`: The Amazon Chime Voice Connector ID.

"""
function delete_voice_connector_termination_credentials(Usernames, voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/voice-connectors/$(voiceConnectorId)/termination/credentials?operation=delete", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Usernames"=>Usernames), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_app_instance(app_instance_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns the full details of an AppInstance.

# Arguments
- `app_instance_arn`: The ARN of the AppInstance.

"""
function describe_app_instance(appInstanceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/app-instances/$(appInstanceArn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_app_instance_admin(app_instance_admin_arn, app_instance_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns the full details of an AppInstanceAdmin.

# Arguments
- `app_instance_admin_arn`: The ARN of the AppInstanceAdmin.
- `app_instance_arn`: The ARN of the AppInstance.

"""
function describe_app_instance_admin(appInstanceAdminArn, appInstanceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/app-instances/$(appInstanceArn)/admins/$(appInstanceAdminArn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_app_instance_user(app_instance_user_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns the full details of an AppInstanceUser.

# Arguments
- `app_instance_user_arn`: The ARN of the AppInstanceUser.

"""
function describe_app_instance_user(appInstanceUserArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/app-instance-users/$(appInstanceUserArn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_channel(channel_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns the full details of a channel in an Amazon Chime AppInstance.  The
x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that
makes the API call as the value in the header.

# Arguments
- `channel_arn`: The ARN of the channel.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
"""
function describe_channel(channelArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/channels/$(channelArn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_channel_ban(channel_arn, member_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns the full details of a channel ban.  The x-amz-chime-bearer request header is
mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in
the header.

# Arguments
- `channel_arn`: The ARN of the channel from which the user is banned.
- `member_arn`: The ARN of the member being banned.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
"""
function describe_channel_ban(channelArn, memberArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/channels/$(channelArn)/bans/$(memberArn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_channel_membership(channel_arn, member_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns the full details of a user's channel membership.  The x-amz-chime-bearer request
header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the
value in the header.

# Arguments
- `channel_arn`: The ARN of the channel.
- `member_arn`: The ARN of the member.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
"""
function describe_channel_membership(channelArn, memberArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/channels/$(channelArn)/memberships/$(memberArn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_channel_membership_for_app_instance_user(app-instance-user-arn, channel_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Returns the details of a channel based on the membership of the specified AppInstanceUser.
 The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user
that makes the API call as the value in the header.

# Arguments
- `app-instance-user-arn`: The ARN of the user in a channel.
- `channel_arn`: The ARN of the channel to which the user belongs.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
"""
function describe_channel_membership_for_app_instance_user(app_instance_user_arn, channelArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/channels/$(channelArn)?scope=app-instance-user-membership", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("app-instance-user-arn"=>app_instance_user_arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_channel_moderated_by_app_instance_user(app-instance-user-arn, channel_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns the full details of a channel moderated by the specified AppInstanceUser.  The
x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that
makes the API call as the value in the header.

# Arguments
- `app-instance-user-arn`: The ARN of the AppInstanceUser in the moderated channel.
- `channel_arn`: The ARN of the moderated channel.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
"""
function describe_channel_moderated_by_app_instance_user(app_instance_user_arn, channelArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/channels/$(channelArn)?scope=app-instance-user-moderated-channel", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("app-instance-user-arn"=>app_instance_user_arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_channel_moderator(channel_arn, channel_moderator_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns the full details of a single ChannelModerator.  The x-amz-chime-bearer request
header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the
value in the header.

# Arguments
- `channel_arn`: The ARN of the channel.
- `channel_moderator_arn`: The ARN of the channel moderator.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
"""
function describe_channel_moderator(channelArn, channelModeratorArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/channels/$(channelArn)/moderators/$(channelModeratorArn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    disassociate_phone_number_from_user(account_id, user_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Disassociates the primary provisioned phone number from the specified Amazon Chime user.

# Arguments
- `account_id`: The Amazon Chime account ID.
- `user_id`: The user ID.

"""
function disassociate_phone_number_from_user(accountId, userId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/accounts/$(accountId)/users/$(userId)?operation=disassociate-phone-number", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    disassociate_phone_numbers_from_voice_connector(e164_phone_numbers, voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector.

# Arguments
- `e164_phone_numbers`: List of phone numbers, in E.164 format.
- `voice_connector_id`: The Amazon Chime Voice Connector ID.

"""
function disassociate_phone_numbers_from_voice_connector(E164PhoneNumbers, voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/voice-connectors/$(voiceConnectorId)?operation=disassociate-phone-numbers", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("E164PhoneNumbers"=>E164PhoneNumbers), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    disassociate_phone_numbers_from_voice_connector_group(e164_phone_numbers, voice_connector_group_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector
group.

# Arguments
- `e164_phone_numbers`: List of phone numbers, in E.164 format.
- `voice_connector_group_id`: The Amazon Chime Voice Connector group ID.

"""
function disassociate_phone_numbers_from_voice_connector_group(E164PhoneNumbers, voiceConnectorGroupId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/voice-connector-groups/$(voiceConnectorGroupId)?operation=disassociate-phone-numbers", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("E164PhoneNumbers"=>E164PhoneNumbers), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    disassociate_signin_delegate_groups_from_account(group_names, account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Disassociates the specified sign-in delegate groups from the specified Amazon Chime account.

# Arguments
- `group_names`: The sign-in delegate group names.
- `account_id`: The Amazon Chime account ID.

"""
function disassociate_signin_delegate_groups_from_account(GroupNames, accountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/accounts/$(accountId)?operation=disassociate-signin-delegate-groups", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("GroupNames"=>GroupNames), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_account(account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves details for the specified Amazon Chime account, such as account type and
supported licenses.

# Arguments
- `account_id`: The Amazon Chime account ID.

"""
function get_account(accountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/accounts/$(accountId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_account_settings(account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves account settings for the specified Amazon Chime account ID, such as remote
control and dialout settings. For more information about these settings, see Use the
Policies Page in the Amazon Chime Administration Guide.

# Arguments
- `account_id`: The Amazon Chime account ID.

"""
function get_account_settings(accountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/accounts/$(accountId)/settings", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_app_instance_retention_settings(app_instance_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets the retention settings for an AppInstance.

# Arguments
- `app_instance_arn`: The ARN of the AppInstance.

"""
function get_app_instance_retention_settings(appInstanceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/app-instances/$(appInstanceArn)/retention-settings", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_app_instance_streaming_configurations(app_instance_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets the streaming settings for an AppInstance.

# Arguments
- `app_instance_arn`: The ARN of the AppInstance.

"""
function get_app_instance_streaming_configurations(appInstanceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/app-instances/$(appInstanceArn)/streaming-configurations", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_attendee(attendee_id, meeting_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Gets the Amazon Chime SDK attendee details for a specified meeting ID and attendee ID. For
more information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon
Chime Developer Guide .

# Arguments
- `attendee_id`: The Amazon Chime SDK attendee ID.
- `meeting_id`: The Amazon Chime SDK meeting ID.

"""
function get_attendee(attendeeId, meetingId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/meetings/$(meetingId)/attendees/$(attendeeId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_bot(account_id, bot_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves details for the specified bot, such as bot email address, bot type, status, and
display name.

# Arguments
- `account_id`: The Amazon Chime account ID.
- `bot_id`: The bot ID.

"""
function get_bot(accountId, botId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/accounts/$(accountId)/bots/$(botId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_channel_message(channel_arn, message_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets the full details of a channel message.  The x-amz-chime-bearer request header is
mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in
the header.

# Arguments
- `channel_arn`: The ARN of the channel.
- `message_id`: The ID of the message.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
"""
function get_channel_message(channelArn, messageId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/channels/$(channelArn)/messages/$(messageId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_events_configuration(account_id, bot_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets details for an events configuration that allows a bot to receive outgoing events, such
as an HTTPS endpoint or Lambda function ARN.

# Arguments
- `account_id`: The Amazon Chime account ID.
- `bot_id`: The bot ID.

"""
function get_events_configuration(accountId, botId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/accounts/$(accountId)/bots/$(botId)/events-configuration", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_global_settings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves global settings for the administrator's AWS account, such as Amazon Chime
Business Calling and Amazon Chime Voice Connector settings.

"""
function get_global_settings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/settings", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_media_capture_pipeline(media_pipeline_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets an existing media capture pipeline.

# Arguments
- `media_pipeline_id`: The ID of the pipeline that you want to get.

"""
function get_media_capture_pipeline(mediaPipelineId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/media-capture-pipelines/$(mediaPipelineId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_meeting(meeting_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Gets the Amazon Chime SDK meeting details for the specified meeting ID. For more
information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime
Developer Guide .

# Arguments
- `meeting_id`: The Amazon Chime SDK meeting ID.

"""
function get_meeting(meetingId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/meetings/$(meetingId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_messaging_session_endpoint(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

The details of the endpoint for the messaging session.

"""
function get_messaging_session_endpoint(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/endpoints/messaging-session", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_phone_number(phone_number_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves details for the specified phone number ID, such as associations, capabilities,
and product type.

# Arguments
- `phone_number_id`: The phone number ID.

"""
function get_phone_number(phoneNumberId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/phone-numbers/$(phoneNumberId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_phone_number_order(phone_number_order_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves details for the specified phone number order, such as the order creation
timestamp, phone numbers in E.164 format, product type, and order status.

# Arguments
- `phone_number_order_id`: The ID for the phone number order.

"""
function get_phone_number_order(phoneNumberOrderId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/phone-number-orders/$(phoneNumberOrderId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_phone_number_settings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves the phone number settings for the administrator's AWS account, such as the
default outbound calling name.

"""
function get_phone_number_settings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/settings/phone-number", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_proxy_session(proxy_session_id, voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets the specified proxy session details for the specified Amazon Chime Voice Connector.

# Arguments
- `proxy_session_id`: The proxy session ID.
- `voice_connector_id`: The Amazon Chime voice connector ID.

"""
function get_proxy_session(proxySessionId, voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/voice-connectors/$(voiceConnectorId)/proxy-sessions/$(proxySessionId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_retention_settings(account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Gets the retention settings for the specified Amazon Chime Enterprise account. For more
information about retention settings, see Managing Chat Retention Policies in the Amazon
Chime Administration Guide.

# Arguments
- `account_id`: The Amazon Chime account ID.

"""
function get_retention_settings(accountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/accounts/$(accountId)/retention-settings", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_room(account_id, room_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves room details, such as the room name, for a room in an Amazon Chime Enterprise
account.

# Arguments
- `account_id`: The Amazon Chime account ID.
- `room_id`: The room ID.

"""
function get_room(accountId, roomId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/accounts/$(accountId)/rooms/$(roomId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_sip_media_application(sip_media_application_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves the information for a SIP media application, including name, AWS Region, and
endpoints.

# Arguments
- `sip_media_application_id`: The SIP media application ID.

"""
function get_sip_media_application(sipMediaApplicationId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/sip-media-applications/$(sipMediaApplicationId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_sip_media_application_logging_configuration(sip_media_application_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns the logging configuration for the specified SIP media application.

# Arguments
- `sip_media_application_id`: The SIP media application ID.

"""
function get_sip_media_application_logging_configuration(sipMediaApplicationId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/sip-media-applications/$(sipMediaApplicationId)/logging-configuration", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_sip_rule(sip_rule_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves the details of a SIP rule, such as the rule ID, name, triggers, and target
endpoints.

# Arguments
- `sip_rule_id`: The SIP rule ID.

"""
function get_sip_rule(sipRuleId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/sip-rules/$(sipRuleId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_user(account_id, user_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves details for the specified user ID, such as primary email address, license
type,and personal meeting PIN.  To retrieve user details with an email address instead of a
user ID, use the ListUsers action, and then filter by email address.

# Arguments
- `account_id`: The Amazon Chime account ID.
- `user_id`: The user ID.

"""
function get_user(accountId, userId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/accounts/$(accountId)/users/$(userId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_user_settings(account_id, user_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves settings for the specified user ID, such as any associated phone number settings.

# Arguments
- `account_id`: The Amazon Chime account ID.
- `user_id`: The user ID.

"""
function get_user_settings(accountId, userId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/accounts/$(accountId)/users/$(userId)/settings", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_voice_connector(voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves details for the specified Amazon Chime Voice Connector, such as timestamps,name,
outbound host, and encryption requirements.

# Arguments
- `voice_connector_id`: The Amazon Chime Voice Connector ID.

"""
function get_voice_connector(voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/voice-connectors/$(voiceConnectorId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_voice_connector_emergency_calling_configuration(voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets the emergency calling configuration details for the specified Amazon Chime Voice
Connector.

# Arguments
- `voice_connector_id`: The Amazon Chime Voice Connector ID.

"""
function get_voice_connector_emergency_calling_configuration(voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/voice-connectors/$(voiceConnectorId)/emergency-calling-configuration", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_voice_connector_group(voice_connector_group_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Retrieves details for the specified Amazon Chime Voice Connector group, such as
timestamps,name, and associated VoiceConnectorItems.

# Arguments
- `voice_connector_group_id`: The Amazon Chime Voice Connector group ID.

"""
function get_voice_connector_group(voiceConnectorGroupId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/voice-connector-groups/$(voiceConnectorGroupId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_voice_connector_logging_configuration(voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves the logging configuration details for the specified Amazon Chime Voice Connector.
Shows whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.

# Arguments
- `voice_connector_id`: The Amazon Chime Voice Connector ID.

"""
function get_voice_connector_logging_configuration(voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/voice-connectors/$(voiceConnectorId)/logging-configuration", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_voice_connector_origination(voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves origination setting details for the specified Amazon Chime Voice Connector.

# Arguments
- `voice_connector_id`: The Amazon Chime Voice Connector ID.

"""
function get_voice_connector_origination(voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/voice-connectors/$(voiceConnectorId)/origination", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_voice_connector_proxy(voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets the proxy configuration details for the specified Amazon Chime Voice Connector.

# Arguments
- `voice_connector_id`: The Amazon Chime voice connector ID.

"""
function get_voice_connector_proxy(voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/voice-connectors/$(voiceConnectorId)/programmable-numbers/proxy", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_voice_connector_streaming_configuration(voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves the streaming configuration details for the specified Amazon Chime Voice
Connector. Shows whether media streaming is enabled for sending to Amazon Kinesis. It also
shows the retention period, in hours, for the Amazon Kinesis data.

# Arguments
- `voice_connector_id`: The Amazon Chime Voice Connector ID.

"""
function get_voice_connector_streaming_configuration(voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/voice-connectors/$(voiceConnectorId)/streaming-configuration", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_voice_connector_termination(voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves termination setting details for the specified Amazon Chime Voice Connector.

# Arguments
- `voice_connector_id`: The Amazon Chime Voice Connector ID.

"""
function get_voice_connector_termination(voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/voice-connectors/$(voiceConnectorId)/termination", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_voice_connector_termination_health(voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves information about the last time a SIP OPTIONS ping was received from your SIP
infrastructure for the specified Amazon Chime Voice Connector.

# Arguments
- `voice_connector_id`: The Amazon Chime Voice Connector ID.

"""
function get_voice_connector_termination_health(voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/voice-connectors/$(voiceConnectorId)/termination/health", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    invite_users(user_email_list, account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Sends email to a maximum of 50 users, inviting them to the specified Amazon Chime Team
account. Only Team account types are currently supported for this action.

# Arguments
- `user_email_list`: The user email addresses to which to send the email invitation.
- `account_id`: The Amazon Chime account ID.

# Keyword Parameters
- `user_type`: The user type.
"""
function invite_users(UserEmailList, accountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/accounts/$(accountId)/users?operation=add", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("UserEmailList"=>UserEmailList), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_accounts(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the Amazon Chime accounts under the administrator's AWS account. You can filter
accounts by account name prefix. To find out which Amazon Chime account a user belongs to,
you can filter by the user's email address, which returns one account result.

# Keyword Parameters
- `max_results`: The maximum number of results to return in a single call. Defaults to 100.
- `name`: Amazon Chime account name prefix with which to filter results.
- `next_token`: The token to use to retrieve the next page of results.
- `user_email`: User email address with which to filter results.
"""
function list_accounts(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/accounts", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_app_instance_admins(app_instance_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of the administrators in the AppInstance.

# Arguments
- `app_instance_arn`: The ARN of the AppInstance.

# Keyword Parameters
- `max_results`: The maximum number of administrators that you want to return.
- `next_token`: The token returned from previous API requests until the number of
  administrators is reached.
"""
function list_app_instance_admins(appInstanceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/app-instances/$(appInstanceArn)/admins", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_app_instance_users(app-instance-arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

List all AppInstanceUsers created under a single AppInstance.

# Arguments
- `app-instance-arn`: The ARN of the AppInstance.

# Keyword Parameters
- `max_results`: The maximum number of requests that you want returned.
- `next_token`: The token passed by previous API calls until all requested users are
  returned.
"""
function list_app_instance_users(app_instance_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/app-instance-users", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("app-instance-arn"=>app_instance_arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_app_instances(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists all Amazon Chime AppInstances created under a single AWS account.

# Keyword Parameters
- `max_results`: The maximum number of AppInstances that you want to return.
- `next_token`: The token passed by previous API requests until you reach the maximum
  number of AppInstances.
"""
function list_app_instances(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/app-instances", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_attendee_tags(attendee_id, meeting_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the tags applied to an Amazon Chime SDK attendee resource.

# Arguments
- `attendee_id`: The Amazon Chime SDK attendee ID.
- `meeting_id`: The Amazon Chime SDK meeting ID.

"""
function list_attendee_tags(attendeeId, meetingId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/meetings/$(meetingId)/attendees/$(attendeeId)/tags", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_attendees(meeting_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Lists the attendees for the specified Amazon Chime SDK meeting. For more information about
the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime Developer Guide.

# Arguments
- `meeting_id`: The Amazon Chime SDK meeting ID.

# Keyword Parameters
- `max_results`: The maximum number of results to return in a single call.
- `next_token`: The token to use to retrieve the next page of results.
"""
function list_attendees(meetingId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/meetings/$(meetingId)/attendees", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_bots(account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the bots associated with the administrator's Amazon Chime Enterprise account ID.

# Arguments
- `account_id`: The Amazon Chime account ID.

# Keyword Parameters
- `max_results`: The maximum number of results to return in a single call. The default is
  10.
- `next_token`: The token to use to retrieve the next page of results.
"""
function list_bots(accountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/accounts/$(accountId)/bots", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_channel_bans(channel_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists all the users banned from a particular channel.  The x-amz-chime-bearer request
header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the
value in the header.

# Arguments
- `channel_arn`: The ARN of the channel.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
- `max_results`: The maximum number of bans that you want returned.
- `next_token`: The token passed by previous API calls until all requested bans are
  returned.
"""
function list_channel_bans(channelArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/channels/$(channelArn)/bans", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_channel_memberships(channel_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists all channel memberships in a channel.  The x-amz-chime-bearer request header is
mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in
the header.

# Arguments
- `channel_arn`: The maximum number of channel memberships that you want returned.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
- `max_results`: The maximum number of channel memberships that you want returned.
- `next_token`: The token passed by previous API calls until all requested channel
  memberships are returned.
- `type`: The membership type of a user, DEFAULT or HIDDEN. Default members are always
  returned as part of ListChannelMemberships. Hidden members are only returned if the type
  filter in ListChannelMemberships equals HIDDEN. Otherwise hidden members are not returned.
"""
function list_channel_memberships(channelArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/channels/$(channelArn)/memberships", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_channel_memberships_for_app_instance_user(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Lists all channels that a particular AppInstanceUser is a part of. Only an
AppInstanceAdmin can call the API with a user ARN that is not their own.   The
x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that
makes the API call as the value in the header.

# Keyword Parameters
- `app_instance_user_arn`: The ARN of the AppInstanceUsers
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
- `max_results`: The maximum number of users that you want returned.
- `next_token`: The token returned from previous API requests until the number of channel
  memberships is reached.
"""
function list_channel_memberships_for_app_instance_user(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/channels?scope=app-instance-user-memberships", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_channel_messages(channel_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

List all the messages in a channel. Returns a paginated list of ChannelMessages. By
default, sorted by creation timestamp in descending order.  Redacted messages appear in the
results as empty, since they are only redacted, not deleted. Deleted messages do not appear
in the results. This action always returns the latest version of an edited message. Also,
the x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user
that makes the API call as the value in the header.

# Arguments
- `channel_arn`: The ARN of the channel.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
- `max_results`: The maximum number of messages that you want returned.
- `next_token`: The token passed by previous API calls until all requested messages are
  returned.
- `not_after`: The final or ending time stamp for your requested messages.
- `not_before`: The initial or starting time stamp for your requested messages.
- `sort_order`: The order in which you want messages sorted. Default is Descending, based
  on time created.
"""
function list_channel_messages(channelArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/channels/$(channelArn)/messages", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_channel_moderators(channel_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists all the moderators for a channel.  The x-amz-chime-bearer request header is
mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in
the header.

# Arguments
- `channel_arn`: The ARN of the channel.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
- `max_results`: The maximum number of moderators that you want returned.
- `next_token`: The token passed by previous API calls until all requested moderators are
  returned.
"""
function list_channel_moderators(channelArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/channels/$(channelArn)/moderators", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_channels(app-instance-arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists all Channels created under a single Chime App as a paginated list. You can specify
filters to narrow results.  Functionality &amp; restrictions    Use privacy = PUBLIC to
retrieve all public channels in the account.   Only an AppInstanceAdmin can set privacy =
PRIVATE to list the private channels in an account.    The x-amz-chime-bearer request
header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the
value in the header.

# Arguments
- `app-instance-arn`: The ARN of the AppInstance.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
- `max_results`: The maximum number of channels that you want to return.
- `next_token`: The token passed by previous API calls until all requested channels are
  returned.
- `privacy`: The privacy setting. PUBLIC retrieves all the public channels. PRIVATE
  retrieves private channels. Only an AppInstanceAdmin can retrieve private channels.
"""
function list_channels(app_instance_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/channels", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("app-instance-arn"=>app_instance_arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_channels_moderated_by_app_instance_user(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

A list of the channels moderated by an AppInstanceUser.  The x-amz-chime-bearer request
header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the
value in the header.

# Keyword Parameters
- `app_instance_user_arn`: The ARN of the user in the moderated channel.
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
- `max_results`: The maximum number of channels in the request.
- `next_token`: The token returned from previous API requests until the number of channels
  moderated by the user is reached.
"""
function list_channels_moderated_by_app_instance_user(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/channels?scope=app-instance-user-moderated-channels", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_media_capture_pipelines(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of media capture pipelines.

# Keyword Parameters
- `max_results`: The maximum number of results to return in a single call. Valid Range: 1 -
  99.
- `next_token`: The token used to retrieve the next page of results.
"""
function list_media_capture_pipelines(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/media-capture-pipelines", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_meeting_tags(meeting_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the tags applied to an Amazon Chime SDK meeting resource.

# Arguments
- `meeting_id`: The Amazon Chime SDK meeting ID.

"""
function list_meeting_tags(meetingId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/meetings/$(meetingId)/tags", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_meetings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Lists up to 100 active Amazon Chime SDK meetings. For more information about the Amazon
Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime Developer Guide.

# Keyword Parameters
- `max_results`: The maximum number of results to return in a single call.
- `next_token`: The token to use to retrieve the next page of results.
"""
function list_meetings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/meetings", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_phone_number_orders(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the phone number orders for the administrator's Amazon Chime account.

# Keyword Parameters
- `max_results`: The maximum number of results to return in a single call.
- `next_token`: The token to use to retrieve the next page of results.
"""
function list_phone_number_orders(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/phone-number-orders", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_phone_numbers(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the phone numbers for the specified Amazon Chime account, Amazon Chime user, Amazon
Chime Voice Connector, or Amazon Chime Voice Connector group.

# Keyword Parameters
- `filter_name`: The filter to use to limit the number of results.
- `filter_value`: The value to use for the filter.
- `max_results`: The maximum number of results to return in a single call.
- `next_token`: The token to use to retrieve the next page of results.
- `product_type`: The phone number product type.
- `status`: The phone number status.
"""
function list_phone_numbers(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/phone-numbers", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_proxy_sessions(voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the proxy sessions for the specified Amazon Chime Voice Connector.

# Arguments
- `voice_connector_id`: The Amazon Chime voice connector ID.

# Keyword Parameters
- `max_results`: The maximum number of results to return in a single call.
- `next_token`: The token to use to retrieve the next page of results.
- `status`: The proxy session status.
"""
function list_proxy_sessions(voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/voice-connectors/$(voiceConnectorId)/proxy-sessions", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_room_memberships(account_id, room_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the membership details for the specified room in an Amazon Chime Enterprise account,
such as the members' IDs, email addresses, and names.

# Arguments
- `account_id`: The Amazon Chime account ID.
- `room_id`: The room ID.

# Keyword Parameters
- `max_results`: The maximum number of results to return in a single call.
- `next_token`: The token to use to retrieve the next page of results.
"""
function list_room_memberships(accountId, roomId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/accounts/$(accountId)/rooms/$(roomId)/memberships", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_rooms(account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the room details for the specified Amazon Chime Enterprise account. Optionally,
filter the results by a member ID (user ID or bot ID) to see a list of rooms that the
member belongs to.

# Arguments
- `account_id`: The Amazon Chime account ID.

# Keyword Parameters
- `max_results`: The maximum number of results to return in a single call.
- `member_id`: The member ID (user ID or bot ID).
- `next_token`: The token to use to retrieve the next page of results.
"""
function list_rooms(accountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/accounts/$(accountId)/rooms", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_sip_media_applications(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the SIP media applications under the administrator's AWS account.

# Keyword Parameters
- `max_results`: The maximum number of results to return in a single call. Defaults to 100.
- `next_token`: The token to use to retrieve the next page of results.
"""
function list_sip_media_applications(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/sip-media-applications", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_sip_rules(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the SIP rules under the administrator's AWS account.

# Keyword Parameters
- `max_results`: The maximum number of results to return in a single call. Defaults to 100.
- `next_token`: The token to use to retrieve the next page of results.
- `sip_media_application_id`: The SIP media application ID.
"""
function list_sip_rules(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/sip-rules", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_supported_phone_number_countries(product-type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists supported phone number countries.

# Arguments
- `product-type`: The phone number product type.

"""
function list_supported_phone_number_countries(product_type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/phone-number-countries", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("product-type"=>product_type), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_tags_for_resource(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the tags applied to an Amazon Chime SDK meeting resource.

# Arguments
- `arn`: The resource ARN.

"""
function list_tags_for_resource(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/tags", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_users(account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the users that belong to the specified Amazon Chime account. You can specify an email
address to list only the user that the email address belongs to.

# Arguments
- `account_id`: The Amazon Chime account ID.

# Keyword Parameters
- `max_results`: The maximum number of results to return in a single call. Defaults to 100.
- `next_token`: The token to use to retrieve the next page of results.
- `user_email`: Optional. The user email address used to filter results. Maximum 1.
- `user_type`: The user type.
"""
function list_users(accountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/accounts/$(accountId)/users", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_voice_connector_groups(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the Amazon Chime Voice Connector groups for the administrator's AWS account.

# Keyword Parameters
- `max_results`: The maximum number of results to return in a single call.
- `next_token`: The token to use to retrieve the next page of results.
"""
function list_voice_connector_groups(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/voice-connector-groups", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_voice_connector_termination_credentials(voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the SIP credentials for the specified Amazon Chime Voice Connector.

# Arguments
- `voice_connector_id`: The Amazon Chime Voice Connector ID.

"""
function list_voice_connector_termination_credentials(voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/voice-connectors/$(voiceConnectorId)/termination/credentials", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_voice_connectors(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the Amazon Chime Voice Connectors for the administrator's AWS account.

# Keyword Parameters
- `max_results`: The maximum number of results to return in a single call.
- `next_token`: The token to use to retrieve the next page of results.
"""
function list_voice_connectors(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/voice-connectors", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    logout_user(account_id, user_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Logs out the specified user from all of the devices they are currently logged into.

# Arguments
- `account_id`: The Amazon Chime account ID.
- `user_id`: The user ID.

"""
function logout_user(accountId, userId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/accounts/$(accountId)/users/$(userId)?operation=logout", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    put_app_instance_retention_settings(app_instance_retention_settings, app_instance_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Sets the amount of time in days that a given AppInstance retains data.

# Arguments
- `app_instance_retention_settings`: The time in days to retain data. Data type: number.
- `app_instance_arn`: The ARN of the AppInstance.

"""
function put_app_instance_retention_settings(AppInstanceRetentionSettings, appInstanceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("PUT", "/app-instances/$(appInstanceArn)/retention-settings", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("AppInstanceRetentionSettings"=>AppInstanceRetentionSettings), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    put_app_instance_streaming_configurations(app_instance_streaming_configurations, app_instance_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

The data streaming configurations of an AppInstance.

# Arguments
- `app_instance_streaming_configurations`: The streaming configurations set for an
  AppInstance.
- `app_instance_arn`: The ARN of the AppInstance.

"""
function put_app_instance_streaming_configurations(AppInstanceStreamingConfigurations, appInstanceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("PUT", "/app-instances/$(appInstanceArn)/streaming-configurations", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("AppInstanceStreamingConfigurations"=>AppInstanceStreamingConfigurations), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    put_events_configuration(account_id, bot_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an events configuration that allows a bot to receive outgoing events sent by Amazon
Chime. Choose either an HTTPS endpoint or a Lambda function ARN. For more information, see
Bot.

# Arguments
- `account_id`: The Amazon Chime account ID.
- `bot_id`: The bot ID.

# Keyword Parameters
- `lambda_function_arn`: Lambda function ARN that allows the bot to receive outgoing events.
- `outbound_events_httpsendpoint`: HTTPS endpoint that allows the bot to receive outgoing
  events.
"""
function put_events_configuration(accountId, botId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("PUT", "/accounts/$(accountId)/bots/$(botId)/events-configuration", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    put_retention_settings(retention_settings, account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Puts retention settings for the specified Amazon Chime Enterprise account. We recommend
using AWS CloudTrail to monitor usage of this API for your account. For more information,
see Logging Amazon Chime API Calls with AWS CloudTrail in the Amazon Chime Administration
Guide.  To turn off existing retention settings, remove the number of days from the
corresponding RetentionDays field in the RetentionSettings object. For more information
about retention settings, see Managing Chat Retention Policies in the Amazon Chime
Administration Guide.

# Arguments
- `retention_settings`: The retention settings.
- `account_id`: The Amazon Chime account ID.

"""
function put_retention_settings(RetentionSettings, accountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("PUT", "/accounts/$(accountId)/retention-settings", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("RetentionSettings"=>RetentionSettings), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    put_sip_media_application_logging_configuration(sip_media_application_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the logging configuration for the specified SIP media application.

# Arguments
- `sip_media_application_id`: The SIP media application ID.

# Keyword Parameters
- `sip_media_application_logging_configuration`: The actual logging configuration.
"""
function put_sip_media_application_logging_configuration(sipMediaApplicationId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("PUT", "/sip-media-applications/$(sipMediaApplicationId)/logging-configuration", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    put_voice_connector_emergency_calling_configuration(emergency_calling_configuration, voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Puts emergency calling configuration details to the specified Amazon Chime Voice Connector,
such as emergency phone numbers and calling countries. Origination and termination settings
must be enabled for the Amazon Chime Voice Connector before emergency calling can be
configured.

# Arguments
- `emergency_calling_configuration`: The emergency calling configuration details.
- `voice_connector_id`: The Amazon Chime Voice Connector ID.

"""
function put_voice_connector_emergency_calling_configuration(EmergencyCallingConfiguration, voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("PUT", "/voice-connectors/$(voiceConnectorId)/emergency-calling-configuration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("EmergencyCallingConfiguration"=>EmergencyCallingConfiguration), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    put_voice_connector_logging_configuration(logging_configuration, voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds a logging configuration for the specified Amazon Chime Voice Connector. The logging
configuration specifies whether SIP message logs are enabled for sending to Amazon
CloudWatch Logs.

# Arguments
- `logging_configuration`: The logging configuration details to add.
- `voice_connector_id`: The Amazon Chime Voice Connector ID.

"""
function put_voice_connector_logging_configuration(LoggingConfiguration, voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("PUT", "/voice-connectors/$(voiceConnectorId)/logging-configuration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("LoggingConfiguration"=>LoggingConfiguration), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    put_voice_connector_origination(origination, voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds origination settings for the specified Amazon Chime Voice Connector.  If emergency
calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to
turning off origination settings.

# Arguments
- `origination`: The origination setting details to add.
- `voice_connector_id`: The Amazon Chime Voice Connector ID.

"""
function put_voice_connector_origination(Origination, voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("PUT", "/voice-connectors/$(voiceConnectorId)/origination", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Origination"=>Origination), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    put_voice_connector_proxy(default_session_expiry_minutes, phone_number_pool_countries, voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Puts the specified proxy configuration to the specified Amazon Chime Voice Connector.

# Arguments
- `default_session_expiry_minutes`: The default number of minutes allowed for proxy
  sessions.
- `phone_number_pool_countries`: The countries for proxy phone numbers to be selected from.
- `voice_connector_id`: The Amazon Chime voice connector ID.

# Keyword Parameters
- `disabled`: When true, stops proxy sessions from being created on the specified Amazon
  Chime Voice Connector.
- `fall_back_phone_number`: The phone number to route calls to after a proxy session
  expires.
"""
function put_voice_connector_proxy(DefaultSessionExpiryMinutes, PhoneNumberPoolCountries, voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("PUT", "/voice-connectors/$(voiceConnectorId)/programmable-numbers/proxy", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("DefaultSessionExpiryMinutes"=>DefaultSessionExpiryMinutes, "PhoneNumberPoolCountries"=>PhoneNumberPoolCountries), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    put_voice_connector_streaming_configuration(streaming_configuration, voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds a streaming configuration for the specified Amazon Chime Voice Connector. The
streaming configuration specifies whether media streaming is enabled for sending to
Indonesians. It also sets the retention period, in hours, for the Amazon Kinesis data.

# Arguments
- `streaming_configuration`: The streaming configuration details to add.
- `voice_connector_id`: The Amazon Chime Voice Connector ID.

"""
function put_voice_connector_streaming_configuration(StreamingConfiguration, voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("PUT", "/voice-connectors/$(voiceConnectorId)/streaming-configuration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("StreamingConfiguration"=>StreamingConfiguration), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    put_voice_connector_termination(termination, voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds termination settings for the specified Amazon Chime Voice Connector.  If emergency
calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to
turning off termination settings.

# Arguments
- `termination`: The termination setting details to add.
- `voice_connector_id`: The Amazon Chime Voice Connector ID.

"""
function put_voice_connector_termination(Termination, voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("PUT", "/voice-connectors/$(voiceConnectorId)/termination", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Termination"=>Termination), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    put_voice_connector_termination_credentials(voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds termination SIP credentials for the specified Amazon Chime Voice Connector.

# Arguments
- `voice_connector_id`: The Amazon Chime Voice Connector ID.

# Keyword Parameters
- `credentials`: The termination SIP credentials.
"""
function put_voice_connector_termination_credentials(voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/voice-connectors/$(voiceConnectorId)/termination/credentials?operation=put", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    redact_channel_message(channel_arn, message_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Redacts message content, but not metadata. The message exists in the back end, but the
action returns null content, and the state shows as redacted.  The x-amz-chime-bearer
request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call
as the value in the header.

# Arguments
- `channel_arn`: The ARN of the channel containing the messages that you want to redact.
- `message_id`: The ID of the message being redacted.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
"""
function redact_channel_message(channelArn, messageId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/channels/$(channelArn)/messages/$(messageId)?operation=redact", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    redact_conversation_message(account_id, conversation_id, message_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Redacts the specified message from the specified Amazon Chime conversation.

# Arguments
- `account_id`: The Amazon Chime account ID.
- `conversation_id`: The conversation ID.
- `message_id`: The message ID.

"""
function redact_conversation_message(accountId, conversationId, messageId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/accounts/$(accountId)/conversations/$(conversationId)/messages/$(messageId)?operation=redact", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    redact_room_message(account_id, message_id, room_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Redacts the specified message from the specified Amazon Chime channel.

# Arguments
- `account_id`: The Amazon Chime account ID.
- `message_id`: The message ID.
- `room_id`: The room ID.

"""
function redact_room_message(accountId, messageId, roomId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/accounts/$(accountId)/rooms/$(roomId)/messages/$(messageId)?operation=redact", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    regenerate_security_token(account_id, bot_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Regenerates the security token for a bot.

# Arguments
- `account_id`: The Amazon Chime account ID.
- `bot_id`: The bot ID.

"""
function regenerate_security_token(accountId, botId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/accounts/$(accountId)/bots/$(botId)?operation=regenerate-security-token", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    reset_personal_pin(account_id, user_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Resets the personal meeting PIN for the specified user on an Amazon Chime account. Returns
the User object with the updated personal meeting PIN.

# Arguments
- `account_id`: The Amazon Chime account ID.
- `user_id`: The user ID.

"""
function reset_personal_pin(accountId, userId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/accounts/$(accountId)/users/$(userId)?operation=reset-personal-pin", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    restore_phone_number(phone_number_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Moves a phone number from the Deletion queue back into the phone number Inventory.

# Arguments
- `phone_number_id`: The phone number.

"""
function restore_phone_number(phoneNumberId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/phone-numbers/$(phoneNumberId)?operation=restore", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    search_available_phone_numbers(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Searches for phone numbers that can be ordered. For US numbers, provide at least one of the
following search filters: AreaCode, City, State, or TollFreePrefix. If you provide City,
you must also provide State. Numbers outside the US only support the PhoneNumberType
filter, which you must use.

# Keyword Parameters
- `area_code`: The area code used to filter results. Only applies to the US.
- `city`: The city used to filter results. Only applies to the US.
- `country`: The country used to filter results. Defaults to the US Format: ISO 3166-1
  alpha-2.
- `max_results`: The maximum number of results to return in a single call.
- `next_token`: The token used to retrieve the next page of results.
- `phone_number_type`: The phone number type used to filter results. Required for non-US
  numbers.
- `state`: The state used to filter results. Required only if you provide City. Only
  applies to the US.
- `toll_free_prefix`: The toll-free prefix that you use to filter results. Only applies to
  the US.
"""
function search_available_phone_numbers(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("GET", "/search?type=phone-numbers", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    send_channel_message(client_request_token, content, persistence, type, channel_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Sends a message to a particular channel that the member is a part of.  The
x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that
makes the API call as the value in the header. Also, STANDARD messages can contain 4KB of
data and the 1KB of metadata. CONTROL messages can contain 30 bytes of data and no
metadata.

# Arguments
- `client_request_token`: The Idempotency token for each client request.
- `content`: The content of the message.
- `persistence`: Boolean that controls whether the message is persisted on the back end.
  Required.
- `type`: The type of message, STANDARD or CONTROL.
- `channel_arn`: The ARN of the channel.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
- `metadata`: The optional metadata for each message.
"""
function send_channel_message(ClientRequestToken, Content, Persistence, Type, channelArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/channels/$(channelArn)/messages", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClientRequestToken"=>ClientRequestToken, "Content"=>Content, "Persistence"=>Persistence, "Type"=>Type), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    start_meeting_transcription(transcription_configuration, meeting_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Starts transcription for the specified meetingId.

# Arguments
- `transcription_configuration`: The configuration for the current transcription operation.
  Must contain EngineTranscribeSettings or EngineTranscribeMedicalSettings.
- `meeting_id`: The unique ID of the meeting being transcribed.

"""
function start_meeting_transcription(TranscriptionConfiguration, meetingId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/meetings/$(meetingId)/transcription?operation=start", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("TranscriptionConfiguration"=>TranscriptionConfiguration), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    stop_meeting_transcription(meeting_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Stops transcription for the specified meetingId.

# Arguments
- `meeting_id`: The unique ID of the meeting for which you stop transcription.

"""
function stop_meeting_transcription(meetingId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/meetings/$(meetingId)/transcription?operation=stop", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    tag_attendee(tags, attendee_id, meeting_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Applies the specified tags to the specified Amazon Chime SDK attendee.

# Arguments
- `tags`: The tag key-value pairs.
- `attendee_id`: The Amazon Chime SDK attendee ID.
- `meeting_id`: The Amazon Chime SDK meeting ID.

"""
function tag_attendee(Tags, attendeeId, meetingId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/meetings/$(meetingId)/attendees/$(attendeeId)/tags?operation=add", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Tags"=>Tags), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    tag_meeting(tags, meeting_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Applies the specified tags to the specified Amazon Chime SDK meeting.

# Arguments
- `tags`: The tag key-value pairs.
- `meeting_id`: The Amazon Chime SDK meeting ID.

"""
function tag_meeting(Tags, meetingId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/meetings/$(meetingId)/tags?operation=add", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Tags"=>Tags), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    tag_resource(resource_arn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Applies the specified tags to the specified Amazon Chime SDK meeting resource.

# Arguments
- `resource_arn`: The resource ARN.
- `tags`: The tag key-value pairs.

"""
function tag_resource(ResourceARN, Tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/tags?operation=tag-resource", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ResourceARN"=>ResourceARN, "Tags"=>Tags), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    untag_attendee(tag_keys, attendee_id, meeting_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Untags the specified tags from the specified Amazon Chime SDK attendee.

# Arguments
- `tag_keys`: The tag keys.
- `attendee_id`: The Amazon Chime SDK attendee ID.
- `meeting_id`: The Amazon Chime SDK meeting ID.

"""
function untag_attendee(TagKeys, attendeeId, meetingId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/meetings/$(meetingId)/attendees/$(attendeeId)/tags?operation=delete", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("TagKeys"=>TagKeys), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    untag_meeting(tag_keys, meeting_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Untags the specified tags from the specified Amazon Chime SDK meeting.

# Arguments
- `tag_keys`: The tag keys.
- `meeting_id`: The Amazon Chime SDK meeting ID.

"""
function untag_meeting(TagKeys, meetingId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/meetings/$(meetingId)/tags?operation=delete", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("TagKeys"=>TagKeys), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    untag_resource(resource_arn, tag_keys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Untags the specified tags from the specified Amazon Chime SDK meeting resource.

# Arguments
- `resource_arn`: The resource ARN.
- `tag_keys`: The tag keys.

"""
function untag_resource(ResourceARN, TagKeys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/tags?operation=untag-resource", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ResourceARN"=>ResourceARN, "TagKeys"=>TagKeys), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_account(account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates account details for the specified Amazon Chime account. Currently, only account
name and default license updates are supported for this action.

# Arguments
- `account_id`: The Amazon Chime account ID.

# Keyword Parameters
- `default_license`: The default license applied when you add users to an Amazon Chime
  account.
- `name`: The new name for the specified Amazon Chime account.
"""
function update_account(accountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/accounts/$(accountId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_account_settings(account_settings, account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the settings for the specified Amazon Chime account. You can update settings for
remote control of shared screens, or for the dial-out option. For more information about
these settings, see Use the Policies Page in the Amazon Chime Administration Guide.

# Arguments
- `account_settings`: The Amazon Chime account settings to update.
- `account_id`: The Amazon Chime account ID.

"""
function update_account_settings(AccountSettings, accountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("PUT", "/accounts/$(accountId)/settings", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("AccountSettings"=>AccountSettings), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_app_instance(name, app_instance_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates AppInstance metadata.

# Arguments
- `name`: The name that you want to change.
- `app_instance_arn`: The ARN of the AppInstance.

# Keyword Parameters
- `metadata`: The metadata that you want to change.
"""
function update_app_instance(Name, appInstanceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("PUT", "/app-instances/$(appInstanceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Name"=>Name), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_app_instance_user(name, app_instance_user_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the details of an AppInstanceUser. You can update names and metadata.

# Arguments
- `name`: The name of the AppInstanceUser.
- `app_instance_user_arn`: The ARN of the AppInstanceUser.

# Keyword Parameters
- `metadata`: The metadata of the AppInstanceUser.
"""
function update_app_instance_user(Name, appInstanceUserArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("PUT", "/app-instance-users/$(appInstanceUserArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Name"=>Name), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_bot(account_id, bot_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the status of the specified bot, such as starting or stopping the bot from running
in your Amazon Chime Enterprise account.

# Arguments
- `account_id`: The Amazon Chime account ID.
- `bot_id`: The bot ID.

# Keyword Parameters
- `disabled`: When true, stops the specified bot from running in your account.
"""
function update_bot(accountId, botId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/accounts/$(accountId)/bots/$(botId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_channel(mode, name, channel_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Update a channel's attributes.  Restriction: You can't change a channel's privacy.   The
x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that
makes the API call as the value in the header.

# Arguments
- `mode`: The mode of the update request.
- `name`: The name of the channel.
- `channel_arn`: The ARN of the channel.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
- `metadata`: The metadata for the update request.
"""
function update_channel(Mode, Name, channelArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("PUT", "/channels/$(channelArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Mode"=>Mode, "Name"=>Name), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_channel_message(channel_arn, message_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the content of a message.  The x-amz-chime-bearer request header is mandatory. Use
the AppInstanceUserArn of the user that makes the API call as the value in the header.

# Arguments
- `channel_arn`: The ARN of the channel.
- `message_id`: The ID string of the message being updated.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
- `content`: The content of the message being updated.
- `metadata`: The metadata of the message being updated.
"""
function update_channel_message(channelArn, messageId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("PUT", "/channels/$(channelArn)/messages/$(messageId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_channel_read_marker(channel_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

The details of the time when a user last read messages in a channel.  The
x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that
makes the API call as the value in the header.

# Arguments
- `channel_arn`: The ARN of the channel.

# Keyword Parameters
- `chime_bearer`: The AppInstanceUserArn of the user that makes the API call.
"""
function update_channel_read_marker(channelArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("PUT", "/channels/$(channelArn)/readMarker", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_global_settings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates global settings for the administrator's AWS account, such as Amazon Chime Business
Calling and Amazon Chime Voice Connector settings.

# Keyword Parameters
- `business_calling`: The Amazon Chime Business Calling settings.
- `voice_connector`: The Amazon Chime Voice Connector settings.
"""
function update_global_settings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("PUT", "/settings", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_phone_number(phone_number_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates phone number details, such as product type or calling name, for the specified phone
number ID. You can update one phone number detail at a time. For example, you can update
either the product type or the calling name in one action. For toll-free numbers, you
cannot use the Amazon Chime Business Calling product type. For numbers outside the U.S.,
you must use the Amazon Chime SIP Media Application Dial-In product type. Updates to
outbound calling names can take 72 hours to complete. Pending updates to outbound calling
names must be complete before you can request another update.

# Arguments
- `phone_number_id`: The phone number ID.

# Keyword Parameters
- `calling_name`: The outbound calling name associated with the phone number.
- `product_type`: The product type.
"""
function update_phone_number(phoneNumberId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/phone-numbers/$(phoneNumberId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_phone_number_settings(calling_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the phone number settings for the administrator's AWS account, such as the default
outbound calling name. You can update the default outbound calling name once every seven
days. Outbound calling names can take up to 72 hours to update.

# Arguments
- `calling_name`: The default outbound calling name for the account.

"""
function update_phone_number_settings(CallingName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("PUT", "/settings/phone-number", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("CallingName"=>CallingName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_proxy_session(capabilities, proxy_session_id, voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the specified proxy session details, such as voice or SMS capabilities.

# Arguments
- `capabilities`: The proxy session capabilities.
- `proxy_session_id`: The proxy session ID.
- `voice_connector_id`: The Amazon Chime voice connector ID.

# Keyword Parameters
- `expiry_minutes`: The number of minutes allowed for the proxy session.
"""
function update_proxy_session(Capabilities, proxySessionId, voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/voice-connectors/$(voiceConnectorId)/proxy-sessions/$(proxySessionId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Capabilities"=>Capabilities), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_room(account_id, room_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates room details, such as the room name, for a room in an Amazon Chime Enterprise
account.

# Arguments
- `account_id`: The Amazon Chime account ID.
- `room_id`: The room ID.

# Keyword Parameters
- `name`: The room name.
"""
function update_room(accountId, roomId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/accounts/$(accountId)/rooms/$(roomId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_room_membership(account_id, member_id, room_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates room membership details, such as the member role, for a room in an Amazon Chime
Enterprise account. The member role designates whether the member is a chat room
administrator or a general chat room member. The member role can be updated only for user
IDs.

# Arguments
- `account_id`: The Amazon Chime account ID.
- `member_id`: The member ID.
- `room_id`: The room ID.

# Keyword Parameters
- `role`: The role of the member.
"""
function update_room_membership(accountId, memberId, roomId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/accounts/$(accountId)/rooms/$(roomId)/memberships/$(memberId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_sip_media_application(sip_media_application_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the details of the specified SIP media application.

# Arguments
- `sip_media_application_id`: The SIP media application ID.

# Keyword Parameters
- `endpoints`: The new set of endpoints for the specified SIP media application.
- `name`: The new name for the specified SIP media application.
"""
function update_sip_media_application(sipMediaApplicationId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("PUT", "/sip-media-applications/$(sipMediaApplicationId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_sip_media_application_call(arguments, sip_media_application_id, transaction_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Allows you to trigger a Lambda function at any time while a call is active, and replace the
current actions with new actions returned by the invocation.

# Arguments
- `arguments`: Arguments made available to the Lambda function as part of the
  CALL_UPDATE_REQUESTED event. Can contain 0-20 key-value pairs.
- `sip_media_application_id`: The ID of the SIP media application handling the call.
- `transaction_id`: The ID of the call transaction.

"""
function update_sip_media_application_call(Arguments, sipMediaApplicationId, transactionId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/sip-media-applications/$(sipMediaApplicationId)/calls/$(transactionId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Arguments"=>Arguments), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_sip_rule(name, sip_rule_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the details of the specified SIP rule.

# Arguments
- `name`: The new name for the specified SIP rule.
- `sip_rule_id`: The SIP rule ID.

# Keyword Parameters
- `disabled`: The new value specified to indicate whether the rule is disabled.
- `target_applications`: The new value of the list of target applications.
"""
function update_sip_rule(Name, sipRuleId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("PUT", "/sip-rules/$(sipRuleId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Name"=>Name), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_user(account_id, user_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates user details for a specified user ID. Currently, only LicenseType updates are
supported for this action.

# Arguments
- `account_id`: The Amazon Chime account ID.
- `user_id`: The user ID.

# Keyword Parameters
- `alexa_for_business_metadata`: The Alexa for Business metadata.
- `license_type`: The user license type to update. This must be a supported license type
  for the Amazon Chime account that the user belongs to.
- `user_type`: The user type.
"""
function update_user(accountId, userId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("POST", "/accounts/$(accountId)/users/$(userId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_user_settings(user_settings, account_id, user_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the settings for the specified user, such as phone number settings.

# Arguments
- `user_settings`: The user settings to update.
- `account_id`: The Amazon Chime account ID.
- `user_id`: The user ID.

"""
function update_user_settings(UserSettings, accountId, userId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("PUT", "/accounts/$(accountId)/users/$(userId)/settings", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("UserSettings"=>UserSettings), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_voice_connector(name, require_encryption, voice_connector_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates details for the specified Amazon Chime Voice Connector.

# Arguments
- `name`: The name of the Amazon Chime Voice Connector.
- `require_encryption`: When enabled, requires encryption for the Amazon Chime Voice
  Connector.
- `voice_connector_id`: The Amazon Chime Voice Connector ID.

"""
function update_voice_connector(Name, RequireEncryption, voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("PUT", "/voice-connectors/$(voiceConnectorId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Name"=>Name, "RequireEncryption"=>RequireEncryption), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_voice_connector_group(name, voice_connector_items, voice_connector_group_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates details of the specified Amazon Chime Voice Connector group, such as the name and
Amazon Chime Voice Connector priority ranking.

# Arguments
- `name`: The name of the Amazon Chime Voice Connector group.
- `voice_connector_items`: The VoiceConnectorItems to associate with the group.
- `voice_connector_group_id`: The Amazon Chime Voice Connector group ID.

"""
function update_voice_connector_group(Name, VoiceConnectorItems, voiceConnectorGroupId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return chime("PUT", "/voice-connector-groups/$(voiceConnectorGroupId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Name"=>Name, "VoiceConnectorItems"=>VoiceConnectorItems), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
