# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: backup_gateway
using AWS.Compat
using AWS.UUIDs

# Julia syntax for service-level optional parameters to the AWS request syntax
const SERVICE_PARAMETER_MAP = AWS.LittleDict("tags" => "Tags", "max_results" => "MaxResults", "next_token" => "NextToken", "host" => "Host", "password" => "Password", "username" => "Username", "kms_key_arn" => "KmsKeyArn", "day_of_month" => "DayOfMonth", "day_of_week" => "DayOfWeek", "gateway_display_name" => "GatewayDisplayName")

"""
    associate_gateway_to_server(gateway_arn, server_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Associates a backup gateway with your server. After you complete the association process,
you can back up and restore your VMs through the gateway.

# Arguments
- `gateway_arn`: The Amazon Resource Name (ARN) of the gateway. Use the ListGateways
  operation to return a list of gateways for your account and Amazon Web Services Region.
- `server_arn`: The Amazon Resource Name (ARN) of the server that hosts your virtual
  machines.

"""
function associate_gateway_to_server(GatewayArn, ServerArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return backup_gateway("AssociateGatewayToServer", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("GatewayArn"=>GatewayArn, "ServerArn"=>ServerArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_gateway(activation_key, gateway_display_name, gateway_type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a backup gateway. After you create a gateway, you can associate it with a server
using the AssociateGatewayToServer operation.

# Arguments
- `activation_key`: The activation key of the created gateway.
- `gateway_display_name`: The display name of the created gateway.
- `gateway_type`: The type of created gateway.

# Keyword Parameters
- `tags`: A list of up to 50 tags to assign to the gateway. Each tag is a key-value pair.
"""
function create_gateway(ActivationKey, GatewayDisplayName, GatewayType; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return backup_gateway("CreateGateway", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ActivationKey"=>ActivationKey, "GatewayDisplayName"=>GatewayDisplayName, "GatewayType"=>GatewayType), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_gateway(gateway_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a backup gateway.

# Arguments
- `gateway_arn`: The Amazon Resource Name (ARN) of the gateway to delete.

"""
function delete_gateway(GatewayArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return backup_gateway("DeleteGateway", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("GatewayArn"=>GatewayArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_hypervisor(hypervisor_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a hypervisor.

# Arguments
- `hypervisor_arn`: The Amazon Resource Name (ARN) of the hypervisor to delete.

"""
function delete_hypervisor(HypervisorArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return backup_gateway("DeleteHypervisor", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("HypervisorArn"=>HypervisorArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    disassociate_gateway_from_server(gateway_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Disassociates a backup gateway from the specified server. After the disassociation process
finishes, the gateway can no longer access the virtual machines on the server.

# Arguments
- `gateway_arn`: The Amazon Resource Name (ARN) of the gateway to disassociate.

"""
function disassociate_gateway_from_server(GatewayArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return backup_gateway("DisassociateGatewayFromServer", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("GatewayArn"=>GatewayArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    import_hypervisor_configuration(host, name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Connect to a hypervisor by importing its configuration.

# Arguments
- `host`: The server host of the hypervisor. This can be either an IP address or a
  fully-qualified domain name (FQDN).
- `name`: The name of the hypervisor.

# Keyword Parameters
- `kms_key_arn`: The Key Management Service for the hypervisor.
- `password`: The password for the hypervisor.
- `tags`: The tags of the hypervisor configuration to import.
- `username`: The username for the hypervisor.
"""
function import_hypervisor_configuration(Host, Name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return backup_gateway("ImportHypervisorConfiguration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Host"=>Host, "Name"=>Name), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_gateways(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists backup gateways owned by an Amazon Web Services account in an Amazon Web Services
Region. The returned list is ordered by gateway Amazon Resource Name (ARN).

# Keyword Parameters
- `max_results`: The maximum number of gateways to list.
- `next_token`: The next item following a partial list of returned resources. For example,
  if a request is made to return MaxResults number of resources, NextToken allows you to
  return more items in your list starting at the location pointed to by the next token.
"""
function list_gateways(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return backup_gateway("ListGateways", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_hypervisors(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists your hypervisors.

# Keyword Parameters
- `max_results`: The maximum number of hypervisors to list.
- `next_token`: The next item following a partial list of returned resources. For example,
  if a request is made to return maxResults number of resources, NextToken allows you to
  return more items in your list starting at the location pointed to by the next token.
"""
function list_hypervisors(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return backup_gateway("ListHypervisors", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_tags_for_resource(resource_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the tags applied to the resource identified by its Amazon Resource Name (ARN).

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource's tags to list.

"""
function list_tags_for_resource(ResourceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return backup_gateway("ListTagsForResource", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ResourceArn"=>ResourceArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_virtual_machines(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists your virtual machines.

# Keyword Parameters
- `max_results`: The maximum number of virtual machines to list.
- `next_token`: The next item following a partial list of returned resources. For example,
  if a request is made to return maxResults number of resources, NextToken allows you to
  return more items in your list starting at the location pointed to by the next token.
"""
function list_virtual_machines(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return backup_gateway("ListVirtualMachines", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    put_maintenance_start_time(gateway_arn, hour_of_day, minute_of_hour; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Set the maintenance start time for a gateway.

# Arguments
- `gateway_arn`: The Amazon Resource Name (ARN) for the gateway, used to specify its
  maintenance start time.
- `hour_of_day`: The hour of the day to start maintenance on a gateway.
- `minute_of_hour`: The minute of the hour to start maintenance on a gateway.

# Keyword Parameters
- `day_of_month`: The day of the month start maintenance on a gateway. Valid values range
  from Sunday to Saturday.
- `day_of_week`: The day of the week to start maintenance on a gateway.
"""
function put_maintenance_start_time(GatewayArn, HourOfDay, MinuteOfHour; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return backup_gateway("PutMaintenanceStartTime", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("GatewayArn"=>GatewayArn, "HourOfDay"=>HourOfDay, "MinuteOfHour"=>MinuteOfHour), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    tag_resource(resource_arn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Tag the resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource to tag.
- `tags`: A list of tags to assign to the resource.

"""
function tag_resource(ResourceARN, Tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return backup_gateway("TagResource", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ResourceARN"=>ResourceARN, "Tags"=>Tags), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    test_hypervisor_configuration(gateway_arn, host; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Tests your hypervisor configuration to validate that backup gateway can connect with the
hypervisor and its resources.

# Arguments
- `gateway_arn`: The Amazon Resource Name (ARN) of the gateway to the hypervisor to test.
- `host`: The server host of the hypervisor. This can be either an IP address or a
  fully-qualified domain name (FQDN).

# Keyword Parameters
- `password`: The password for the hypervisor.
- `username`: The username for the hypervisor.
"""
function test_hypervisor_configuration(GatewayArn, Host; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return backup_gateway("TestHypervisorConfiguration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("GatewayArn"=>GatewayArn, "Host"=>Host), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    untag_resource(resource_arn, tag_keys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes tags from the resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource from which to remove tags.
- `tag_keys`: The list of tag keys specifying which tags to remove.

"""
function untag_resource(ResourceARN, TagKeys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return backup_gateway("UntagResource", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ResourceARN"=>ResourceARN, "TagKeys"=>TagKeys), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_gateway_information(gateway_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates a gateway's name. Specify which gateway to update using the Amazon Resource Name
(ARN) of the gateway in your request.

# Arguments
- `gateway_arn`: The Amazon Resource Name (ARN) of the gateway to update.

# Keyword Parameters
- `gateway_display_name`: The updated display name of the gateway.
"""
function update_gateway_information(GatewayArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return backup_gateway("UpdateGatewayInformation", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("GatewayArn"=>GatewayArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_hypervisor(hypervisor_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates a hypervisor metadata, including its host, username, and password. Specify which
hypervisor to update using the Amazon Resource Name (ARN) of the hypervisor in your request.

# Arguments
- `hypervisor_arn`: The Amazon Resource Name (ARN) of the hypervisor to update.

# Keyword Parameters
- `host`: The updated host of the hypervisor. This can be either an IP address or a
  fully-qualified domain name (FQDN).
- `password`: The updated password for the hypervisor.
- `username`: The updated username for the hypervisor.
"""
function update_hypervisor(HypervisorArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return backup_gateway("UpdateHypervisor", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("HypervisorArn"=>HypervisorArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
