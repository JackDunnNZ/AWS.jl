# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: redshift
using AWS.Compat
using AWS.UUIDs

# Julia syntax for service-level optional parameters to the AWS request syntax
const SERVICE_PARAMETER_MAP = OrderedCollections.LittleDict("authentication_profile_name" => "AuthenticationProfileName", "active" => "Active", "end_time" => "EndTime", "filters" => "Filter", "marker" => "Marker", "max_records" => "MaxRecords", "scheduled_action_name" => "ScheduledActionName", "start_time" => "StartTime", "target_action_type" => "TargetActionType", "tags" => "Tag", "cidrip" => "CIDRIP", "ec2_security_group_name" => "EC2SecurityGroupName", "ec2_security_group_owner_id" => "EC2SecurityGroupOwnerId", "defer_maintenance" => "DeferMaintenance", "defer_maintenance_duration" => "DeferMaintenanceDuration", "defer_maintenance_end_time" => "DeferMaintenanceEndTime", "defer_maintenance_identifier" => "DeferMaintenanceIdentifier", "defer_maintenance_start_time" => "DeferMaintenanceStartTime", "cluster_identifier" => "ClusterIdentifier", "schedule_identifier" => "ScheduleIdentifier", "tag_keys" => "TagKey", "tag_values" => "TagValue", "allow_version_upgrade" => "AllowVersionUpgrade", "automated_snapshot_retention_period" => "AutomatedSnapshotRetentionPeriod", "availability_zone" => "AvailabilityZone", "availability_zone_relocation" => "AvailabilityZoneRelocation", "cluster_parameter_group_name" => "ClusterParameterGroupName", "cluster_security_groups" => "ClusterSecurityGroupName", "cluster_type" => "ClusterType", "cluster_version" => "ClusterVersion", "elastic_ip" => "ElasticIp", "encrypted" => "Encrypted", "enhanced_vpc_routing" => "EnhancedVpcRouting", "hsm_client_certificate_identifier" => "HsmClientCertificateIdentifier", "hsm_configuration_identifier" => "HsmConfigurationIdentifier", "kms_key_id" => "KmsKeyId", "maintenance_track_name" => "MaintenanceTrackName", "manual_snapshot_retention_period" => "ManualSnapshotRetentionPeriod", "master_user_password" => "MasterUserPassword", "new_cluster_identifier" => "NewClusterIdentifier", "node_type" => "NodeType", "number_of_nodes" => "NumberOfNodes", "port" => "Port", "preferred_maintenance_window" => "PreferredMaintenanceWindow", "publicly_accessible" => "PubliclyAccessible", "vpc_security_group_ids" => "VpcSecurityGroupId", "parameter_group_name" => "ParameterGroupName", "data_share_arn" => "DataShareArn", "aqua_configuration_status" => "AquaConfigurationStatus", "enable" => "Enable", "scheduled_action_description" => "ScheduledActionDescription", "additional_info" => "AdditionalInfo", "cluster_subnet_group_name" => "ClusterSubnetGroupName", "default_iam_role_arn" => "DefaultIamRoleArn", "iam_roles" => "IamRoleArn", "owner_account" => "OwnerAccount", "snapshot_cluster_identifier" => "SnapshotClusterIdentifier", "snapshot_schedule_identifier" => "SnapshotScheduleIdentifier", "consumer_arn" => "ConsumerArn", "status" => "Status", "account" => "Account", "force" => "Force", "vpc_ids" => "VpcIdentifier", "source_type" => "SourceType", "node_count" => "NodeCount", "amount" => "Amount", "breach_action" => "BreachAction", "cluster_security_group_name" => "ClusterSecurityGroupName", "feature_type" => "FeatureType", "usage_limit_id" => "UsageLimitId", "reserved_node_offering_id" => "ReservedNodeOfferingId", "final_cluster_snapshot_identifier" => "FinalClusterSnapshotIdentifier", "final_cluster_snapshot_retention_period" => "FinalClusterSnapshotRetentionPeriod", "skip_final_cluster_snapshot" => "SkipFinalClusterSnapshot", "producer_arn" => "ProducerArn", "dbname" => "DBName", "parameters" => "Parameter", "reset_all_parameters" => "ResetAllParameters", "period" => "Period", "enabled" => "Enabled", "event_categories" => "EventCategory", "severity" => "Severity", "sns_topic_arn" => "SnsTopicArn", "source_ids" => "SourceId", "snapshot_identifier" => "SnapshotIdentifier", "disassociate_entire_account" => "DisassociateEntireAccount", "source_snapshot_cluster_identifier" => "SourceSnapshotClusterIdentifier", "description" => "Description", "grantee" => "Grantee", "auto_create" => "AutoCreate", "db_groups" => "DbGroup", "db_name" => "DbName", "duration_seconds" => "DurationSeconds", "cluster_exists" => "ClusterExists", "snapshot_type" => "SnapshotType", "sorting_entities" => "SnapshotSortingEntity", "table_restore_request_id" => "TableRestoreRequestId", "resource_name" => "ResourceName", "resource_type" => "ResourceType", "iam_role" => "IamRole", "schedule" => "Schedule", "target_action" => "TargetAction", "resource_owner" => "ResourceOwner", "database_name" => "DatabaseName", "partner_name" => "PartnerName", "snapshot_copy_grant_name" => "SnapshotCopyGrantName", "associate_entire_account" => "AssociateEntireAccount", "retention_period" => "RetentionPeriod", "source" => "Source", "add_iam_roles" => "IamRoleArn", "remove_iam_roles" => "IamRoleArn", "duration" => "Duration", "source_identifier" => "SourceIdentifier", "enable_case_sensitive_identifier" => "EnableCaseSensitiveIdentifier", "source_schema_name" => "SourceSchemaName", "target_database_name" => "TargetDatabaseName", "target_schema_name" => "TargetSchemaName", "attribute_names" => "AttributeName", "status_message" => "StatusMessage", "cluster_parameter_group_family" => "ClusterParameterGroupFamily", "endpoint_name" => "EndpointName", "vpc_id" => "VpcId", "subscription_name" => "SubscriptionName", "dry_run" => "DryRun", "next_invocations" => "NextInvocations", "schedule_definitions" => "ScheduleDefinition", "schedule_description" => "ScheduleDescription", "manual" => "Manual", "s3_key_prefix" => "S3KeyPrefix", "classic" => "Classic", "reserved_node_id" => "ReservedNodeId", "disassociate_schedule" => "DisassociateSchedule")

"""
    accept_reserved_node_exchange(reserved_node_id, target_reserved_node_offering_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Exchanges a DC1 Reserved Node for a DC2 Reserved Node with no changes to the configuration
(term, payment type, or number of nodes) and no additional costs.

# Arguments
- `reserved_node_id`: A string representing the node identifier of the DC1 Reserved Node to
  be exchanged.
- `target_reserved_node_offering_id`: The unique identifier of the DC2 Reserved Node
  offering to be used for the exchange. You can obtain the value for the parameter by calling
  GetReservedNodeExchangeOfferings

"""
function accept_reserved_node_exchange(ReservedNodeId, TargetReservedNodeOfferingId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("AcceptReservedNodeExchange", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ReservedNodeId"=>ReservedNodeId, "TargetReservedNodeOfferingId"=>TargetReservedNodeOfferingId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    add_partner(account_id, cluster_identifier, database_name, partner_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds a partner integration to a cluster. This operation authorizes a partner to push status
updates for the specified database. To complete the integration, you also set up the
integration on the partner website.

# Arguments
- `account_id`: The Amazon Web Services account ID that owns the cluster.
- `cluster_identifier`: The cluster identifier of the cluster that receives data from the
  partner.
- `database_name`: The name of the database that receives data from the partner.
- `partner_name`: The name of the partner that is authorized to send data.

"""
function add_partner(AccountId, ClusterIdentifier, DatabaseName, PartnerName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("AddPartner", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("AccountId"=>AccountId, "ClusterIdentifier"=>ClusterIdentifier, "DatabaseName"=>DatabaseName, "PartnerName"=>PartnerName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    associate_data_share_consumer(data_share_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

From a datashare consumer account, associates a datashare with the account
(AssociateEntireAccount) or the specified namespace (ConsumerArn). If you make this
association, the consumer can consume the datashare.

# Arguments
- `data_share_arn`: The Amazon Resource Name (ARN) of the datashare that the consumer is to
  use with the account or the namespace.

# Keyword Parameters
- `associate_entire_account`: A value that specifies whether the datashare is associated
  with the entire account.
- `consumer_arn`: The Amazon Resource Name (ARN) of the consumer that is associated with
  the datashare.
"""
function associate_data_share_consumer(DataShareArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("AssociateDataShareConsumer", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("DataShareArn"=>DataShareArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    authorize_cluster_security_group_ingress(cluster_security_group_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds an inbound (ingress) rule to an Amazon Redshift security group. Depending on whether
the application accessing your cluster is running on the Internet or an Amazon EC2
instance, you can authorize inbound access to either a Classless Interdomain Routing
(CIDR)/Internet Protocol (IP) range or to an Amazon EC2 security group. You can add as many
as 20 ingress rules to an Amazon Redshift security group. If you authorize access to an
Amazon EC2 security group, specify EC2SecurityGroupName and EC2SecurityGroupOwnerId. The
Amazon EC2 security group and Amazon Redshift cluster must be in the same Amazon Web
Services Region.  If you authorize access to a CIDR/IP address range, specify CIDRIP. For
an overview of CIDR blocks, see the Wikipedia article on Classless Inter-Domain Routing.
You must also associate the security group with a cluster so that clients running on these
IP addresses or the EC2 instance are authorized to connect to the cluster. For information
about managing security groups, go to Working with Security Groups in the Amazon Redshift
Cluster Management Guide.

# Arguments
- `cluster_security_group_name`: The name of the security group to which the ingress rule
  is added.

# Keyword Parameters
- `cidrip`: The IP range to be added the Amazon Redshift security group.
- `ec2_security_group_name`: The EC2 security group to be added the Amazon Redshift
  security group.
- `ec2_security_group_owner_id`: The Amazon Web Services account number of the owner of the
  security group specified by the EC2SecurityGroupName parameter. The Amazon Web Services
  Access Key ID is not an acceptable value.  Example: 111122223333
"""
function authorize_cluster_security_group_ingress(ClusterSecurityGroupName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("AuthorizeClusterSecurityGroupIngress", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterSecurityGroupName"=>ClusterSecurityGroupName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    authorize_data_share(consumer_identifier, data_share_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

From a data producer account, authorizes the sharing of a datashare with one or more
consumer accounts. To authorize a datashare for a data consumer, the producer account must
have the correct access privileges.

# Arguments
- `consumer_identifier`: The identifier of the data consumer that is authorized to access
  the datashare. This identifier is an Amazon Web Services account ID.
- `data_share_arn`: The Amazon Resource Name (ARN) of the datashare that producers are to
  authorize sharing for.

"""
function authorize_data_share(ConsumerIdentifier, DataShareArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("AuthorizeDataShare", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ConsumerIdentifier"=>ConsumerIdentifier, "DataShareArn"=>DataShareArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    authorize_endpoint_access(account; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Grants access to a cluster.

# Arguments
- `account`: The Amazon Web Services account ID to grant access to.

# Keyword Parameters
- `cluster_identifier`: The cluster identifier of the cluster to grant access to.
- `vpc_ids`: The virtual private cloud (VPC) identifiers to grant access to.
"""
function authorize_endpoint_access(Account; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("AuthorizeEndpointAccess", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Account"=>Account), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    authorize_snapshot_access(account_with_restore_access, snapshot_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Authorizes the specified Amazon Web Services account to restore the specified snapshot.
For more information about working with snapshots, go to Amazon Redshift Snapshots in the
Amazon Redshift Cluster Management Guide.

# Arguments
- `account_with_restore_access`: The identifier of the Amazon Web Services account
  authorized to restore the specified snapshot. To share a snapshot with Amazon Web Services
  Support, specify amazon-redshift-support.
- `snapshot_identifier`: The identifier of the snapshot the account is authorized to
  restore.

# Keyword Parameters
- `snapshot_cluster_identifier`: The identifier of the cluster the snapshot was created
  from. This parameter is required if your IAM user has a policy containing a snapshot
  resource element that specifies anything other than * for the cluster name.
"""
function authorize_snapshot_access(AccountWithRestoreAccess, SnapshotIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("AuthorizeSnapshotAccess", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("AccountWithRestoreAccess"=>AccountWithRestoreAccess, "SnapshotIdentifier"=>SnapshotIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    batch_delete_cluster_snapshots(delete_cluster_snapshot_message; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a set of cluster snapshots.

# Arguments
- `delete_cluster_snapshot_message`: A list of identifiers for the snapshots that you want
  to delete.

"""
function batch_delete_cluster_snapshots(DeleteClusterSnapshotMessage; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("BatchDeleteClusterSnapshots", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("DeleteClusterSnapshotMessage"=>DeleteClusterSnapshotMessage), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    batch_modify_cluster_snapshots(string; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Modifies the settings for a set of cluster snapshots.

# Arguments
- `string`: A list of snapshot identifiers you want to modify.

# Keyword Parameters
- `force`: A boolean value indicating whether to override an exception if the retention
  period has passed.
- `manual_snapshot_retention_period`: The number of days that a manual snapshot is
  retained. If you specify the value -1, the manual snapshot is retained indefinitely. The
  number must be either -1 or an integer between 1 and 3,653. If you decrease the manual
  snapshot retention period from its current value, existing manual snapshots that fall
  outside of the new retention period will return an error. If you want to suppress the
  errors and delete the snapshots, use the force option.
"""
function batch_modify_cluster_snapshots(String; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("BatchModifyClusterSnapshots", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("String"=>String), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    cancel_resize(cluster_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Cancels a resize operation for a cluster.

# Arguments
- `cluster_identifier`: The unique identifier for the cluster that you want to cancel a
  resize operation for.

"""
function cancel_resize(ClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("CancelResize", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterIdentifier"=>ClusterIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    copy_cluster_snapshot(source_snapshot_identifier, target_snapshot_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Copies the specified automated cluster snapshot to a new manual cluster snapshot. The
source must be an automated snapshot and it must be in the available state. When you delete
a cluster, Amazon Redshift deletes any automated snapshots of the cluster. Also, when the
retention period of the snapshot expires, Amazon Redshift automatically deletes it. If you
want to keep an automated snapshot for a longer period, you can make a manual copy of the
snapshot. Manual snapshots are retained until you delete them.  For more information about
working with snapshots, go to Amazon Redshift Snapshots in the Amazon Redshift Cluster
Management Guide.

# Arguments
- `source_snapshot_identifier`: The identifier for the source snapshot. Constraints:   Must
  be the identifier for a valid automated snapshot whose state is available.
- `target_snapshot_identifier`: The identifier given to the new manual snapshot.
  Constraints:   Cannot be null, empty, or blank.   Must contain from 1 to 255 alphanumeric
  characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or
  contain two consecutive hyphens.   Must be unique for the Amazon Web Services account that
  is making the request.

# Keyword Parameters
- `manual_snapshot_retention_period`: The number of days that a manual snapshot is
  retained. If the value is -1, the manual snapshot is retained indefinitely.  The value must
  be either -1 or an integer between 1 and 3,653. The default value is -1.
- `source_snapshot_cluster_identifier`: The identifier of the cluster the source snapshot
  was created from. This parameter is required if your IAM user has a policy containing a
  snapshot resource element that specifies anything other than * for the cluster name.
  Constraints:   Must be the identifier for a valid cluster.
"""
function copy_cluster_snapshot(SourceSnapshotIdentifier, TargetSnapshotIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("CopyClusterSnapshot", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("SourceSnapshotIdentifier"=>SourceSnapshotIdentifier, "TargetSnapshotIdentifier"=>TargetSnapshotIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_authentication_profile(authentication_profile_content, authentication_profile_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an authentication profile with the specified parameters.

# Arguments
- `authentication_profile_content`: The content of the authentication profile in JSON
  format. The maximum length of the JSON string is determined by a quota for your account.
- `authentication_profile_name`: The name of the authentication profile to be created.

"""
function create_authentication_profile(AuthenticationProfileContent, AuthenticationProfileName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("CreateAuthenticationProfile", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("AuthenticationProfileContent"=>AuthenticationProfileContent, "AuthenticationProfileName"=>AuthenticationProfileName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_cluster(cluster_identifier, master_user_password, master_username, node_type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a new cluster with the specified parameters. To create a cluster in Virtual Private
Cloud (VPC), you must provide a cluster subnet group name. The cluster subnet group
identifies the subnets of your VPC that Amazon Redshift uses when creating the cluster. For
more information about managing clusters, go to Amazon Redshift Clusters in the Amazon
Redshift Cluster Management Guide.

# Arguments
- `cluster_identifier`: A unique identifier for the cluster. You use this identifier to
  refer to the cluster for any subsequent cluster operations such as deleting or modifying.
  The identifier also appears in the Amazon Redshift console. Constraints:   Must contain
  from 1 to 63 alphanumeric characters or hyphens.   Alphabetic characters must be lowercase.
    First character must be a letter.   Cannot end with a hyphen or contain two consecutive
  hyphens.   Must be unique for all clusters within an Amazon Web Services account.
  Example: myexamplecluster
- `master_user_password`: The password associated with the admin user account for the
  cluster that is being created. Constraints:   Must be between 8 and 64 characters in
  length.   Must contain at least one uppercase letter.   Must contain at least one lowercase
  letter.   Must contain one number.   Can be any printable ASCII character (ASCII code 33 to
  126) except ' (single quote), \" (double quote), , /, @, or space.
- `master_username`: The user name associated with the admin user account for the cluster
  that is being created. Constraints:   Must be 1 - 128 alphanumeric characters. The user
  name can't be PUBLIC.   First character must be a letter.   Cannot be a reserved word. A
  list of reserved words can be found in Reserved Words in the Amazon Redshift Database
  Developer Guide.
- `node_type`: The node type to be provisioned for the cluster. For information about node
  types, go to  Working with Clusters in the Amazon Redshift Cluster Management Guide.  Valid
  Values: ds2.xlarge | ds2.8xlarge | dc1.large | dc1.8xlarge | dc2.large | dc2.8xlarge |
  ra3.xlplus | ra3.4xlarge | ra3.16xlarge

# Keyword Parameters
- `additional_info`: Reserved.
- `allow_version_upgrade`: If true, major version upgrades can be applied during the
  maintenance window to the Amazon Redshift engine that is running on the cluster. When a new
  major version of the Amazon Redshift engine is released, you can request that the service
  automatically apply upgrades during the maintenance window to the Amazon Redshift engine
  that is running on your cluster. Default: true
- `aqua_configuration_status`: The value represents how the cluster is configured to use
  AQUA (Advanced Query Accelerator) when it is created. Possible values include the
  following.   enabled - Use AQUA if it is available for the current Amazon Web Services
  Region and Amazon Redshift node type.   disabled - Don't use AQUA.    auto - Amazon
  Redshift determines whether to use AQUA.
- `automated_snapshot_retention_period`: The number of days that automated snapshots are
  retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots
  are disabled, you can still create manual snapshots when you want with
  CreateClusterSnapshot.  You can't disable automated snapshots for RA3 node types. Set the
  automated retention period from 1-35 days. Default: 1  Constraints: Must be a value from 0
  to 35.
- `availability_zone`: The EC2 Availability Zone (AZ) in which you want Amazon Redshift to
  provision the cluster. For example, if you have several EC2 instances running in a specific
  Availability Zone, then you might want the cluster to be provisioned in the same zone in
  order to decrease network latency. Default: A random, system-chosen Availability Zone in
  the region that is specified by the endpoint. Example: us-east-2d  Constraint: The
  specified Availability Zone must be in the same region as the current endpoint.
- `availability_zone_relocation`: The option to enable relocation for an Amazon Redshift
  cluster between Availability Zones after the cluster is created.
- `cluster_parameter_group_name`: The name of the parameter group to be associated with
  this cluster. Default: The default Amazon Redshift cluster parameter group. For information
  about the default parameter group, go to Working with Amazon Redshift Parameter Groups
  Constraints:   Must be 1 to 255 alphanumeric characters or hyphens.   First character must
  be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.
- `cluster_security_groups`: A list of security groups to be associated with this cluster.
  Default: The default cluster security group for Amazon Redshift.
- `cluster_subnet_group_name`: The name of a cluster subnet group to be associated with
  this cluster. If this parameter is not provided the resulting cluster will be deployed
  outside virtual private cloud (VPC).
- `cluster_type`: The type of the cluster. When cluster type is specified as
  single-node, the NumberOfNodes parameter is not required.    multi-node, the NumberOfNodes
  parameter is required.   Valid Values: multi-node | single-node  Default: multi-node
- `cluster_version`: The version of the Amazon Redshift engine software that you want to
  deploy on the cluster. The version selected runs on all the nodes in the cluster.
  Constraints: Only version 1.0 is currently available. Example: 1.0
- `dbname`: The name of the first database to be created when the cluster is created. To
  create additional databases after the cluster is created, connect to the cluster with a SQL
  client and use SQL commands to create a database. For more information, go to Create a
  Database in the Amazon Redshift Database Developer Guide.  Default: dev  Constraints:
  Must contain 1 to 64 alphanumeric characters.   Must contain only lowercase letters.
  Cannot be a word that is reserved by the service. A list of reserved words can be found in
  Reserved Words in the Amazon Redshift Database Developer Guide.
- `default_iam_role_arn`: The Amazon Resource Name (ARN) for the IAM role that was set as
  default for the cluster when the cluster was created.
- `elastic_ip`: The Elastic IP (EIP) address for the cluster. Constraints: The cluster must
  be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. For more
  information about provisioning clusters in EC2-VPC, go to Supported Platforms to Launch
  Your Cluster in the Amazon Redshift Cluster Management Guide.
- `encrypted`: If true, the data in the cluster is encrypted at rest.  Default: false
- `enhanced_vpc_routing`: An option that specifies whether to create the cluster with
  enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the
  cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon
  Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled.
   Default: false
- `hsm_client_certificate_identifier`: Specifies the name of the HSM client certificate the
  Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
- `hsm_configuration_identifier`: Specifies the name of the HSM configuration that contains
  the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
- `iam_roles`: A list of Identity and Access Management (IAM) roles that can be used by the
  cluster to access other Amazon Web Services services. You must supply the IAM roles in
  their Amazon Resource Name (ARN) format. You can supply up to 10 IAM roles in a single
  request. A cluster can have up to 10 IAM roles associated with it at any time.
- `kms_key_id`: The Key Management Service (KMS) key ID of the encryption key that you want
  to use to encrypt data in the cluster.
- `maintenance_track_name`: An optional parameter for the name of the maintenance track for
  the cluster. If you don't provide a maintenance track name, the cluster is assigned to the
  current track.
- `manual_snapshot_retention_period`: The default number of days to retain a manual
  snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't
  change the retention period of existing snapshots. The value must be either -1 or an
  integer between 1 and 3,653.
- `number_of_nodes`: The number of compute nodes in the cluster. This parameter is required
  when the ClusterType parameter is specified as multi-node.  For information about
  determining how many nodes you need, go to  Working with Clusters in the Amazon Redshift
  Cluster Management Guide.  If you don't specify this parameter, you get a single-node
  cluster. When requesting a multi-node cluster, you must specify the number of nodes that
  you want in the cluster. Default: 1  Constraints: Value must be at least 1 and no more than
  100.
- `port`: The port number on which the cluster accepts incoming connections. The cluster is
  accessible only via the JDBC and ODBC connection strings. Part of the connection string
  requires the port on which the cluster will listen for incoming connections. Default: 5439
  Valid Values: 1150-65535
- `preferred_maintenance_window`: The weekly time range (in UTC) during which automated
  cluster maintenance can occur.  Format: ddd:hh24:mi-ddd:hh24:mi   Default: A 30-minute
  window selected at random from an 8-hour block of time per region, occurring on a random
  day of the week. For more information about the time blocks for each region, see
  Maintenance Windows in Amazon Redshift Cluster Management Guide. Valid Days: Mon | Tue |
  Wed | Thu | Fri | Sat | Sun Constraints: Minimum 30-minute window.
- `publicly_accessible`: If true, the cluster can be accessed from a public network.
- `snapshot_schedule_identifier`: A unique identifier for the snapshot schedule.
- `tags`: A list of tag instances.
- `vpc_security_group_ids`: A list of Virtual Private Cloud (VPC) security groups to be
  associated with the cluster. Default: The default VPC security group is associated with the
  cluster.
"""
function create_cluster(ClusterIdentifier, MasterUserPassword, MasterUsername, NodeType; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("CreateCluster", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterIdentifier"=>ClusterIdentifier, "MasterUserPassword"=>MasterUserPassword, "MasterUsername"=>MasterUsername, "NodeType"=>NodeType), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_cluster_parameter_group(description, parameter_group_family, parameter_group_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an Amazon Redshift parameter group. Creating parameter groups is independent of
creating clusters. You can associate a cluster with a parameter group when you create the
cluster. You can also associate an existing cluster with a parameter group after the
cluster is created by using ModifyCluster.  Parameters in the parameter group define
specific behavior that applies to the databases you create on the cluster. For more
information about parameters and parameter groups, go to Amazon Redshift Parameter Groups
in the Amazon Redshift Cluster Management Guide.

# Arguments
- `description`: A description of the parameter group.
- `parameter_group_family`: The Amazon Redshift engine version to which the cluster
  parameter group applies. The cluster engine version determines the set of parameters. To
  get a list of valid parameter group family names, you can call
  DescribeClusterParameterGroups. By default, Amazon Redshift returns a list of all the
  parameter groups that are owned by your Amazon Web Services account, including the default
  parameter groups for each Amazon Redshift engine version. The parameter group family names
  associated with the default parameter groups provide you the valid values. For example, a
  valid family name is \"redshift-1.0\".
- `parameter_group_name`: The name of the cluster parameter group. Constraints:   Must be 1
  to 255 alphanumeric characters or hyphens   First character must be a letter.   Cannot end
  with a hyphen or contain two consecutive hyphens.   Must be unique withing your Amazon Web
  Services account.    This value is stored as a lower-case string.

# Keyword Parameters
- `tags`: A list of tag instances.
"""
function create_cluster_parameter_group(Description, ParameterGroupFamily, ParameterGroupName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("CreateClusterParameterGroup", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Description"=>Description, "ParameterGroupFamily"=>ParameterGroupFamily, "ParameterGroupName"=>ParameterGroupName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_cluster_security_group(cluster_security_group_name, description; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a new Amazon Redshift security group. You use security groups to control access to
non-VPC clusters.  For information about managing security groups, go to Amazon Redshift
Cluster Security Groups in the Amazon Redshift Cluster Management Guide.

# Arguments
- `cluster_security_group_name`: The name for the security group. Amazon Redshift stores
  the value as a lowercase string. Constraints:   Must contain no more than 255 alphanumeric
  characters or hyphens.   Must not be \"Default\".   Must be unique for all security groups
  that are created by your Amazon Web Services account.   Example: examplesecuritygroup
- `description`: A description for the security group.

# Keyword Parameters
- `tags`: A list of tag instances.
"""
function create_cluster_security_group(ClusterSecurityGroupName, Description; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("CreateClusterSecurityGroup", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterSecurityGroupName"=>ClusterSecurityGroupName, "Description"=>Description), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_cluster_snapshot(cluster_identifier, snapshot_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a manual snapshot of the specified cluster. The cluster must be in the available
state.   For more information about working with snapshots, go to Amazon Redshift Snapshots
in the Amazon Redshift Cluster Management Guide.

# Arguments
- `cluster_identifier`: The cluster identifier for which you want a snapshot.
- `snapshot_identifier`: A unique identifier for the snapshot that you are requesting. This
  identifier must be unique for all snapshots within the Amazon Web Services account.
  Constraints:   Cannot be null, empty, or blank   Must contain from 1 to 255 alphanumeric
  characters or hyphens   First character must be a letter   Cannot end with a hyphen or
  contain two consecutive hyphens   Example: my-snapshot-id

# Keyword Parameters
- `manual_snapshot_retention_period`: The number of days that a manual snapshot is
  retained. If the value is -1, the manual snapshot is retained indefinitely.  The value must
  be either -1 or an integer between 1 and 3,653. The default value is -1.
- `tags`: A list of tag instances.
"""
function create_cluster_snapshot(ClusterIdentifier, SnapshotIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("CreateClusterSnapshot", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterIdentifier"=>ClusterIdentifier, "SnapshotIdentifier"=>SnapshotIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_cluster_subnet_group(cluster_subnet_group_name, description, subnet_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a new Amazon Redshift subnet group. You must provide a list of one or more subnets
in your existing Amazon Virtual Private Cloud (Amazon VPC) when creating Amazon Redshift
subnet group.  For information about subnet groups, go to Amazon Redshift Cluster Subnet
Groups in the Amazon Redshift Cluster Management Guide.

# Arguments
- `cluster_subnet_group_name`: The name for the subnet group. Amazon Redshift stores the
  value as a lowercase string. Constraints:   Must contain no more than 255 alphanumeric
  characters or hyphens.   Must not be \"Default\".   Must be unique for all subnet groups
  that are created by your Amazon Web Services account.   Example: examplesubnetgroup
- `description`: A description for the subnet group.
- `subnet_identifier`: An array of VPC subnet IDs. A maximum of 20 subnets can be modified
  in a single request.

# Keyword Parameters
- `tags`: A list of tag instances.
"""
function create_cluster_subnet_group(ClusterSubnetGroupName, Description, SubnetIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("CreateClusterSubnetGroup", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterSubnetGroupName"=>ClusterSubnetGroupName, "Description"=>Description, "SubnetIdentifier"=>SubnetIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_endpoint_access(endpoint_name, subnet_group_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a Redshift-managed VPC endpoint.

# Arguments
- `endpoint_name`: The Redshift-managed VPC endpoint name. An endpoint name must contain
  1-30 characters. Valid characters are A-Z, a-z, 0-9, and hyphen(-). The first character
  must be a letter. The name can't contain two consecutive hyphens or end with a hyphen.
- `subnet_group_name`: The subnet group from which Amazon Redshift chooses the subnet to
  deploy the endpoint.

# Keyword Parameters
- `cluster_identifier`: The cluster identifier of the cluster to access.
- `resource_owner`: The Amazon Web Services account ID of the owner of the cluster. This is
  only required if the cluster is in another Amazon Web Services account.
- `vpc_security_group_ids`: The security group that defines the ports, protocols, and
  sources for inbound traffic that you are authorizing into your endpoint.
"""
function create_endpoint_access(EndpointName, SubnetGroupName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("CreateEndpointAccess", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("EndpointName"=>EndpointName, "SubnetGroupName"=>SubnetGroupName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_event_subscription(sns_topic_arn, subscription_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an Amazon Redshift event notification subscription. This action requires an ARN
(Amazon Resource Name) of an Amazon SNS topic created by either the Amazon Redshift
console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS,
you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in
the SNS console. You can specify the source type, and lists of Amazon Redshift source IDs,
event categories, and event severities. Notifications will be sent for all events you want
that match those criteria. For example, you can specify source type = cluster, source ID =
my-cluster-1 and mycluster2, event categories = Availability, Backup, and severity = ERROR.
The subscription will only send notifications for those ERROR events in the Availability
and Backup categories for the specified clusters. If you specify both the source type and
source IDs, such as source type = cluster and source identifier = my-cluster-1,
notifications will be sent for all the cluster events for my-cluster-1. If you specify a
source type but do not specify a source identifier, you will receive notice of the events
for the objects of that type in your Amazon Web Services account. If you do not specify
either the SourceType nor the SourceIdentifier, you will be notified of events generated
from all Amazon Redshift sources belonging to your Amazon Web Services account. You must
specify a source type if you specify a source ID.

# Arguments
- `sns_topic_arn`: The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit
  the event notifications. The ARN is created by Amazon SNS when you create a topic and
  subscribe to it.
- `subscription_name`: The name of the event subscription to be created. Constraints:
  Cannot be null, empty, or blank.   Must contain from 1 to 255 alphanumeric characters or
  hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two
  consecutive hyphens.

# Keyword Parameters
- `enabled`: A boolean value; set to true to activate the subscription, and set to false to
  create the subscription but not activate it.
- `event_categories`: Specifies the Amazon Redshift event categories to be published by the
  event notification subscription. Values: configuration, management, monitoring, security,
  pending
- `severity`: Specifies the Amazon Redshift event severity to be published by the event
  notification subscription. Values: ERROR, INFO
- `source_ids`: A list of one or more identifiers of Amazon Redshift source objects. All of
  the objects must be of the same type as was specified in the source type parameter. The
  event subscription will return only events generated by the specified objects. If not
  specified, then events are returned for all objects within the source type specified.
  Example: my-cluster-1, my-cluster-2 Example: my-snapshot-20131010
- `source_type`: The type of source that will be generating the events. For example, if you
  want to be notified of events generated by a cluster, you would set this parameter to
  cluster. If this value is not specified, events are returned for all Amazon Redshift
  objects in your Amazon Web Services account. You must specify a source type in order to
  specify source IDs. Valid values: cluster, cluster-parameter-group, cluster-security-group,
  cluster-snapshot, and scheduled-action.
- `tags`: A list of tag instances.
"""
function create_event_subscription(SnsTopicArn, SubscriptionName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("CreateEventSubscription", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("SnsTopicArn"=>SnsTopicArn, "SubscriptionName"=>SubscriptionName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_hsm_client_certificate(hsm_client_certificate_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an HSM client certificate that an Amazon Redshift cluster will use to connect to
the client's HSM in order to store and retrieve the keys used to encrypt the cluster
databases. The command returns a public key, which you must store in the HSM. In addition
to creating the HSM certificate, you must create an Amazon Redshift HSM configuration that
provides a cluster the information needed to store and use encryption keys in the HSM. For
more information, go to Hardware Security Modules in the Amazon Redshift Cluster Management
Guide.

# Arguments
- `hsm_client_certificate_identifier`: The identifier to be assigned to the new HSM client
  certificate that the cluster will use to connect to the HSM to use the database encryption
  keys.

# Keyword Parameters
- `tags`: A list of tag instances.
"""
function create_hsm_client_certificate(HsmClientCertificateIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("CreateHsmClientCertificate", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("HsmClientCertificateIdentifier"=>HsmClientCertificateIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_hsm_configuration(description, hsm_configuration_identifier, hsm_ip_address, hsm_partition_name, hsm_partition_password, hsm_server_public_certificate; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an HSM configuration that contains the information required by an Amazon Redshift
cluster to store and use database encryption keys in a Hardware Security Module (HSM).
After creating the HSM configuration, you can specify it as a parameter when creating a
cluster. The cluster will then store its encryption keys in the HSM. In addition to
creating an HSM configuration, you must also create an HSM client certificate. For more
information, go to Hardware Security Modules in the Amazon Redshift Cluster Management
Guide.

# Arguments
- `description`: A text description of the HSM configuration to be created.
- `hsm_configuration_identifier`: The identifier to be assigned to the new Amazon Redshift
  HSM configuration.
- `hsm_ip_address`: The IP address that the Amazon Redshift cluster must use to access the
  HSM.
- `hsm_partition_name`: The name of the partition in the HSM where the Amazon Redshift
  clusters will store their database encryption keys.
- `hsm_partition_password`: The password required to access the HSM partition.
- `hsm_server_public_certificate`: The HSMs public certificate file. When using Cloud HSM,
  the file name is server.pem.

# Keyword Parameters
- `tags`: A list of tag instances.
"""
function create_hsm_configuration(Description, HsmConfigurationIdentifier, HsmIpAddress, HsmPartitionName, HsmPartitionPassword, HsmServerPublicCertificate; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("CreateHsmConfiguration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Description"=>Description, "HsmConfigurationIdentifier"=>HsmConfigurationIdentifier, "HsmIpAddress"=>HsmIpAddress, "HsmPartitionName"=>HsmPartitionName, "HsmPartitionPassword"=>HsmPartitionPassword, "HsmServerPublicCertificate"=>HsmServerPublicCertificate), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_scheduled_action(iam_role, schedule, scheduled_action_name, target_action; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a scheduled action. A scheduled action contains a schedule and an Amazon Redshift
API action. For example, you can create a schedule of when to run the ResizeCluster API
operation.

# Arguments
- `iam_role`: The IAM role to assume to run the target action. For more information about
  this parameter, see ScheduledAction.
- `schedule`: The schedule in at( ) or cron( ) format. For more information about this
  parameter, see ScheduledAction.
- `scheduled_action_name`: The name of the scheduled action. The name must be unique within
  an account. For more information about this parameter, see ScheduledAction.
- `target_action`: A JSON format string of the Amazon Redshift API operation with input
  parameters. For more information about this parameter, see ScheduledAction.

# Keyword Parameters
- `enable`: If true, the schedule is enabled. If false, the scheduled action does not
  trigger. For more information about state of the scheduled action, see ScheduledAction.
- `end_time`: The end time in UTC of the scheduled action. After this time, the scheduled
  action does not trigger. For more information about this parameter, see ScheduledAction.
- `scheduled_action_description`: The description of the scheduled action.
- `start_time`: The start time in UTC of the scheduled action. Before this time, the
  scheduled action does not trigger. For more information about this parameter, see
  ScheduledAction.
"""
function create_scheduled_action(IamRole, Schedule, ScheduledActionName, TargetAction; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("CreateScheduledAction", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("IamRole"=>IamRole, "Schedule"=>Schedule, "ScheduledActionName"=>ScheduledActionName, "TargetAction"=>TargetAction), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_snapshot_copy_grant(snapshot_copy_grant_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a snapshot copy grant that permits Amazon Redshift to use a customer master key
(CMK) from Key Management Service (KMS) to encrypt copied snapshots in a destination
region.  For more information about managing snapshot copy grants, go to Amazon Redshift
Database Encryption in the Amazon Redshift Cluster Management Guide.

# Arguments
- `snapshot_copy_grant_name`: The name of the snapshot copy grant. This name must be unique
  in the region for the Amazon Web Services account. Constraints:   Must contain from 1 to 63
  alphanumeric characters or hyphens.   Alphabetic characters must be lowercase.   First
  character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.
   Must be unique for all clusters within an Amazon Web Services account.

# Keyword Parameters
- `kms_key_id`: The unique identifier of the customer master key (CMK) to which to grant
  Amazon Redshift permission. If no key is specified, the default key is used.
- `tags`: A list of tag instances.
"""
function create_snapshot_copy_grant(SnapshotCopyGrantName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("CreateSnapshotCopyGrant", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("SnapshotCopyGrantName"=>SnapshotCopyGrantName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_snapshot_schedule(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Create a snapshot schedule that can be associated to a cluster and which overrides the
default system backup schedule.

# Keyword Parameters
- `dry_run`:
- `next_invocations`:
- `schedule_definitions`: The definition of the snapshot schedule. The definition is made
  up of schedule expressions, for example \"cron(30 12 *)\" or \"rate(12 hours)\".
- `schedule_description`: The description of the snapshot schedule.
- `schedule_identifier`: A unique identifier for a snapshot schedule. Only alphanumeric
  characters are allowed for the identifier.
- `tags`: An optional set of tags you can use to search for the schedule.
"""
function create_snapshot_schedule(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("CreateSnapshotSchedule", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_tags(resource_name, tag; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds tags to a cluster. A resource can have up to 50 tags. If you try to create more than
50 tags for a resource, you will receive an error and the attempt will fail. If you specify
a key that already exists for the resource, the value for that key will be updated with the
new value.

# Arguments
- `resource_name`: The Amazon Resource Name (ARN) to which you want to add the tag or tags.
  For example, arn:aws:redshift:us-east-2:123456789:cluster:t1.
- `tag`: One or more name/value pairs to add as tags to the specified resource. Each tag
  name is passed in with the parameter Key and the corresponding value is passed in with the
  parameter Value. The Key and Value parameters are separated by a comma (,). Separate
  multiple tags with a space. For example, --tags \"Key\"=\"owner\",\"Value\"=\"admin\"
  \"Key\"=\"environment\",\"Value\"=\"test\" \"Key\"=\"version\",\"Value\"=\"1.0\".

"""
function create_tags(ResourceName, Tag; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("CreateTags", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ResourceName"=>ResourceName, "Tag"=>Tag), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_usage_limit(amount, cluster_identifier, feature_type, limit_type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a usage limit for a specified Amazon Redshift feature on a cluster. The usage limit
is identified by the returned usage limit identifier.

# Arguments
- `amount`: The limit amount. If time-based, this amount is in minutes. If data-based, this
  amount is in terabytes (TB). The value must be a positive number.
- `cluster_identifier`: The identifier of the cluster that you want to limit usage.
- `feature_type`: The Amazon Redshift feature that you want to limit.
- `limit_type`: The type of limit. Depending on the feature type, this can be based on a
  time duration or data size. If FeatureType is spectrum, then LimitType must be
  data-scanned. If FeatureType is concurrency-scaling, then LimitType must be time.

# Keyword Parameters
- `breach_action`: The action that Amazon Redshift takes when the limit is reached. The
  default is log. For more information about this parameter, see UsageLimit.
- `period`: The time period that the amount applies to. A weekly period begins on Sunday.
  The default is monthly.
- `tags`: A list of tag instances.
"""
function create_usage_limit(Amount, ClusterIdentifier, FeatureType, LimitType; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("CreateUsageLimit", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Amount"=>Amount, "ClusterIdentifier"=>ClusterIdentifier, "FeatureType"=>FeatureType, "LimitType"=>LimitType), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    deauthorize_data_share(consumer_identifier, data_share_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

From the producer account, removes authorization from the specified datashare.

# Arguments
- `consumer_identifier`: The identifier of the data consumer that is to have authorization
  removed from the datashare. This identifier is an Amazon Web Services account ID.
- `data_share_arn`: The Amazon Resource Name (ARN) of the datashare to remove authorization
  from.

"""
function deauthorize_data_share(ConsumerIdentifier, DataShareArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DeauthorizeDataShare", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ConsumerIdentifier"=>ConsumerIdentifier, "DataShareArn"=>DataShareArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_authentication_profile(authentication_profile_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes an authentication profile.

# Arguments
- `authentication_profile_name`: The name of the authentication profile to delete.

"""
function delete_authentication_profile(AuthenticationProfileName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DeleteAuthenticationProfile", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("AuthenticationProfileName"=>AuthenticationProfileName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_cluster(cluster_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a previously provisioned cluster without its final snapshot being created. A
successful response from the web service indicates that the request was received correctly.
Use DescribeClusters to monitor the status of the deletion. The delete operation cannot be
canceled or reverted once submitted. For more information about managing clusters, go to
Amazon Redshift Clusters in the Amazon Redshift Cluster Management Guide. If you want to
shut down the cluster and retain it for future use, set SkipFinalClusterSnapshot to false
and specify a name for FinalClusterSnapshotIdentifier. You can later restore this snapshot
to resume using the cluster. If a final cluster snapshot is requested, the status of the
cluster will be \"final-snapshot\" while the snapshot is being taken, then it's
\"deleting\" once Amazon Redshift begins deleting the cluster.   For more information about
managing clusters, go to Amazon Redshift Clusters in the Amazon Redshift Cluster Management
Guide.

# Arguments
- `cluster_identifier`: The identifier of the cluster to be deleted. Constraints:   Must
  contain lowercase characters.   Must contain from 1 to 63 alphanumeric characters or
  hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two
  consecutive hyphens.

# Keyword Parameters
- `final_cluster_snapshot_identifier`: The identifier of the final snapshot that is to be
  created immediately before deleting the cluster. If this parameter is provided,
  SkipFinalClusterSnapshot must be false.  Constraints:   Must be 1 to 255 alphanumeric
  characters.   First character must be a letter.   Cannot end with a hyphen or contain two
  consecutive hyphens.
- `final_cluster_snapshot_retention_period`: The number of days that a manual snapshot is
  retained. If the value is -1, the manual snapshot is retained indefinitely. The value must
  be either -1 or an integer between 1 and 3,653. The default value is -1.
- `skip_final_cluster_snapshot`: Determines whether a final snapshot of the cluster is
  created before Amazon Redshift deletes the cluster. If true, a final cluster snapshot is
  not created. If false, a final cluster snapshot is created before the cluster is deleted.
  The FinalClusterSnapshotIdentifier parameter must be specified if SkipFinalClusterSnapshot
  is false.  Default: false
"""
function delete_cluster(ClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DeleteCluster", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterIdentifier"=>ClusterIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_cluster_parameter_group(parameter_group_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a specified Amazon Redshift parameter group.  You cannot delete a parameter group
if it is associated with a cluster.

# Arguments
- `parameter_group_name`: The name of the parameter group to be deleted. Constraints:
  Must be the name of an existing cluster parameter group.   Cannot delete a default cluster
  parameter group.

"""
function delete_cluster_parameter_group(ParameterGroupName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DeleteClusterParameterGroup", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ParameterGroupName"=>ParameterGroupName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_cluster_security_group(cluster_security_group_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes an Amazon Redshift security group.  You cannot delete a security group that is
associated with any clusters. You cannot delete the default security group.   For
information about managing security groups, go to Amazon Redshift Cluster Security Groups
in the Amazon Redshift Cluster Management Guide.

# Arguments
- `cluster_security_group_name`: The name of the cluster security group to be deleted.

"""
function delete_cluster_security_group(ClusterSecurityGroupName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DeleteClusterSecurityGroup", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterSecurityGroupName"=>ClusterSecurityGroupName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_cluster_snapshot(snapshot_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the specified manual snapshot. The snapshot must be in the available state, with no
other users authorized to access the snapshot.  Unlike automated snapshots, manual
snapshots are retained even after you delete your cluster. Amazon Redshift does not delete
your manual snapshots. You must delete manual snapshot explicitly to avoid getting charged.
If other accounts are authorized to access the snapshot, you must revoke all of the
authorizations before you can delete the snapshot.

# Arguments
- `snapshot_identifier`: The unique identifier of the manual snapshot to be deleted.
  Constraints: Must be the name of an existing snapshot that is in the available, failed, or
  cancelled state.

# Keyword Parameters
- `snapshot_cluster_identifier`: The unique identifier of the cluster the snapshot was
  created from. This parameter is required if your IAM user has a policy containing a
  snapshot resource element that specifies anything other than * for the cluster name.
  Constraints: Must be the name of valid cluster.
"""
function delete_cluster_snapshot(SnapshotIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DeleteClusterSnapshot", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("SnapshotIdentifier"=>SnapshotIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_cluster_subnet_group(cluster_subnet_group_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the specified cluster subnet group.

# Arguments
- `cluster_subnet_group_name`: The name of the cluster subnet group name to be deleted.

"""
function delete_cluster_subnet_group(ClusterSubnetGroupName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DeleteClusterSubnetGroup", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterSubnetGroupName"=>ClusterSubnetGroupName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_endpoint_access(endpoint_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a Redshift-managed VPC endpoint.

# Arguments
- `endpoint_name`: The Redshift-managed VPC endpoint to delete.

"""
function delete_endpoint_access(EndpointName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DeleteEndpointAccess", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("EndpointName"=>EndpointName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_event_subscription(subscription_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes an Amazon Redshift event notification subscription.

# Arguments
- `subscription_name`: The name of the Amazon Redshift event notification subscription to
  be deleted.

"""
function delete_event_subscription(SubscriptionName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DeleteEventSubscription", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("SubscriptionName"=>SubscriptionName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_hsm_client_certificate(hsm_client_certificate_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the specified HSM client certificate.

# Arguments
- `hsm_client_certificate_identifier`: The identifier of the HSM client certificate to be
  deleted.

"""
function delete_hsm_client_certificate(HsmClientCertificateIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DeleteHsmClientCertificate", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("HsmClientCertificateIdentifier"=>HsmClientCertificateIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_hsm_configuration(hsm_configuration_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the specified Amazon Redshift HSM configuration.

# Arguments
- `hsm_configuration_identifier`: The identifier of the Amazon Redshift HSM configuration
  to be deleted.

"""
function delete_hsm_configuration(HsmConfigurationIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DeleteHsmConfiguration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("HsmConfigurationIdentifier"=>HsmConfigurationIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_partner(account_id, cluster_identifier, database_name, partner_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a partner integration from a cluster. Data can still flow to the cluster until the
integration is deleted at the partner's website.

# Arguments
- `account_id`: The Amazon Web Services account ID that owns the cluster.
- `cluster_identifier`: The cluster identifier of the cluster that receives data from the
  partner.
- `database_name`: The name of the database that receives data from the partner.
- `partner_name`: The name of the partner that is authorized to send data.

"""
function delete_partner(AccountId, ClusterIdentifier, DatabaseName, PartnerName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DeletePartner", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("AccountId"=>AccountId, "ClusterIdentifier"=>ClusterIdentifier, "DatabaseName"=>DatabaseName, "PartnerName"=>PartnerName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_scheduled_action(scheduled_action_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a scheduled action.

# Arguments
- `scheduled_action_name`: The name of the scheduled action to delete.

"""
function delete_scheduled_action(ScheduledActionName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DeleteScheduledAction", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ScheduledActionName"=>ScheduledActionName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_snapshot_copy_grant(snapshot_copy_grant_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the specified snapshot copy grant.

# Arguments
- `snapshot_copy_grant_name`: The name of the snapshot copy grant to delete.

"""
function delete_snapshot_copy_grant(SnapshotCopyGrantName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DeleteSnapshotCopyGrant", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("SnapshotCopyGrantName"=>SnapshotCopyGrantName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_snapshot_schedule(schedule_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a snapshot schedule.

# Arguments
- `schedule_identifier`: A unique identifier of the snapshot schedule to delete.

"""
function delete_snapshot_schedule(ScheduleIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DeleteSnapshotSchedule", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ScheduleIdentifier"=>ScheduleIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_tags(resource_name, tag_key; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes tags from a resource. You must provide the ARN of the resource from which you want
to delete the tag or tags.

# Arguments
- `resource_name`: The Amazon Resource Name (ARN) from which you want to remove the tag or
  tags. For example, arn:aws:redshift:us-east-2:123456789:cluster:t1.
- `tag_key`: The tag key that you want to delete.

"""
function delete_tags(ResourceName, TagKey; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DeleteTags", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ResourceName"=>ResourceName, "TagKey"=>TagKey), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_usage_limit(usage_limit_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a usage limit from a cluster.

# Arguments
- `usage_limit_id`: The identifier of the usage limit to delete.

"""
function delete_usage_limit(UsageLimitId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DeleteUsageLimit", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("UsageLimitId"=>UsageLimitId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_account_attributes(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of attributes attached to an account

# Keyword Parameters
- `attribute_names`: A list of attribute names.
"""
function describe_account_attributes(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeAccountAttributes", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_authentication_profiles(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Describes an authentication profile.

# Keyword Parameters
- `authentication_profile_name`: The name of the authentication profile to describe. If not
  specified then all authentication profiles owned by the account are listed.
"""
function describe_authentication_profiles(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeAuthenticationProfiles", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_cluster_db_revisions(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns an array of ClusterDbRevision objects.

# Keyword Parameters
- `cluster_identifier`: A unique identifier for a cluster whose ClusterDbRevisions you are
  requesting. This parameter is case sensitive. All clusters defined for an account are
  returned by default.
- `marker`: An optional parameter that specifies the starting point for returning a set of
  response records. When the results of a DescribeClusterDbRevisions request exceed the value
  specified in MaxRecords, Amazon Redshift returns a value in the marker field of the
  response. You can retrieve the next set of response records by providing the returned
  marker value in the marker parameter and retrying the request.  Constraints: You can
  specify either the ClusterIdentifier parameter, or the marker parameter, but not both.
- `max_records`: The maximum number of response records to return in each call. If the
  number of remaining response records exceeds the specified MaxRecords value, a value is
  returned in the marker field of the response. You can retrieve the next set of response
  records by providing the returned marker value in the marker parameter and retrying the
  request.  Default: 100 Constraints: minimum 20, maximum 100.
"""
function describe_cluster_db_revisions(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeClusterDbRevisions", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_cluster_parameter_groups(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of Amazon Redshift parameter groups, including parameter groups you created
and the default parameter group. For each parameter group, the response includes the
parameter group name, description, and parameter group family name. You can optionally
specify a name to retrieve the description of a specific parameter group.  For more
information about parameters and parameter groups, go to Amazon Redshift Parameter Groups
in the Amazon Redshift Cluster Management Guide. If you specify both tag keys and tag
values in the same request, Amazon Redshift returns all parameter groups that match any
combination of the specified keys and values. For example, if you have owner and
environment for tag keys, and admin and test for tag values, all parameter groups that have
any combination of those values are returned. If both tag keys and values are omitted from
the request, parameter groups are returned regardless of whether they have tag keys or
values associated with them.

# Keyword Parameters
- `marker`: An optional parameter that specifies the starting point to return a set of
  response records. When the results of a DescribeClusterParameterGroups request exceed the
  value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of
  the response. You can retrieve the next set of response records by providing the returned
  marker value in the Marker parameter and retrying the request.
- `max_records`: The maximum number of response records to return in each call. If the
  number of remaining response records exceeds the specified MaxRecords value, a value is
  returned in a marker field of the response. You can retrieve the next set of records by
  retrying the command with the returned marker value.  Default: 100  Constraints: minimum
  20, maximum 100.
- `parameter_group_name`: The name of a specific parameter group for which to return
  details. By default, details about all parameter groups and the default parameter group are
  returned.
- `tag_keys`: A tag key or keys for which you want to return all matching cluster parameter
  groups that are associated with the specified key or keys. For example, suppose that you
  have parameter groups that are tagged with keys called owner and environment. If you
  specify both of these tag keys in the request, Amazon Redshift returns a response with the
  parameter groups that have either or both of these tag keys associated with them.
- `tag_values`: A tag value or values for which you want to return all matching cluster
  parameter groups that are associated with the specified tag value or values. For example,
  suppose that you have parameter groups that are tagged with values called admin and test.
  If you specify both of these tag values in the request, Amazon Redshift returns a response
  with the parameter groups that have either or both of these tag values associated with them.
"""
function describe_cluster_parameter_groups(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeClusterParameterGroups", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_cluster_parameters(parameter_group_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a detailed list of parameters contained within the specified Amazon Redshift
parameter group. For each parameter the response includes information such as parameter
name, description, data type, value, whether the parameter value is modifiable, and so on.
You can specify source filter to retrieve parameters of only specific type. For example, to
retrieve parameters that were modified by a user action such as from
ModifyClusterParameterGroup, you can specify source equal to user.  For more information
about parameters and parameter groups, go to Amazon Redshift Parameter Groups in the Amazon
Redshift Cluster Management Guide.

# Arguments
- `parameter_group_name`: The name of a cluster parameter group for which to return details.

# Keyword Parameters
- `marker`: An optional parameter that specifies the starting point to return a set of
  response records. When the results of a DescribeClusterParameters request exceed the value
  specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the
  response. You can retrieve the next set of response records by providing the returned
  marker value in the Marker parameter and retrying the request.
- `max_records`: The maximum number of response records to return in each call. If the
  number of remaining response records exceeds the specified MaxRecords value, a value is
  returned in a marker field of the response. You can retrieve the next set of records by
  retrying the command with the returned marker value.  Default: 100  Constraints: minimum
  20, maximum 100.
- `source`: The parameter types to return. Specify user to show parameters that are
  different form the default. Similarly, specify engine-default to show parameters that are
  the same as the default parameter group.  Default: All parameter types returned. Valid
  Values: user | engine-default
"""
function describe_cluster_parameters(ParameterGroupName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeClusterParameters", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ParameterGroupName"=>ParameterGroupName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_cluster_security_groups(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about Amazon Redshift security groups. If the name of a security group
is specified, the response will contain only information about only that security group.
For information about managing security groups, go to Amazon Redshift Cluster Security
Groups in the Amazon Redshift Cluster Management Guide. If you specify both tag keys and
tag values in the same request, Amazon Redshift returns all security groups that match any
combination of the specified keys and values. For example, if you have owner and
environment for tag keys, and admin and test for tag values, all security groups that have
any combination of those values are returned. If both tag keys and values are omitted from
the request, security groups are returned regardless of whether they have tag keys or
values associated with them.

# Keyword Parameters
- `cluster_security_group_name`: The name of a cluster security group for which you are
  requesting details. You can specify either the Marker parameter or a
  ClusterSecurityGroupName parameter, but not both.   Example: securitygroup1
- `marker`: An optional parameter that specifies the starting point to return a set of
  response records. When the results of a DescribeClusterSecurityGroups request exceed the
  value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of
  the response. You can retrieve the next set of response records by providing the returned
  marker value in the Marker parameter and retrying the request.  Constraints: You can
  specify either the ClusterSecurityGroupName parameter or the Marker parameter, but not
  both.
- `max_records`: The maximum number of response records to return in each call. If the
  number of remaining response records exceeds the specified MaxRecords value, a value is
  returned in a marker field of the response. You can retrieve the next set of records by
  retrying the command with the returned marker value.  Default: 100  Constraints: minimum
  20, maximum 100.
- `tag_keys`: A tag key or keys for which you want to return all matching cluster security
  groups that are associated with the specified key or keys. For example, suppose that you
  have security groups that are tagged with keys called owner and environment. If you specify
  both of these tag keys in the request, Amazon Redshift returns a response with the security
  groups that have either or both of these tag keys associated with them.
- `tag_values`: A tag value or values for which you want to return all matching cluster
  security groups that are associated with the specified tag value or values. For example,
  suppose that you have security groups that are tagged with values called admin and test. If
  you specify both of these tag values in the request, Amazon Redshift returns a response
  with the security groups that have either or both of these tag values associated with them.
"""
function describe_cluster_security_groups(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeClusterSecurityGroups", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_cluster_snapshots(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns one or more snapshot objects, which contain metadata about your cluster snapshots.
By default, this operation returns information about all snapshots of all clusters that are
owned by your Amazon Web Services account. No information is returned for snapshots owned
by inactive Amazon Web Services accounts. If you specify both tag keys and tag values in
the same request, Amazon Redshift returns all snapshots that match any combination of the
specified keys and values. For example, if you have owner and environment for tag keys, and
admin and test for tag values, all snapshots that have any combination of those values are
returned. Only snapshots that you own are returned in the response; shared snapshots are
not returned with the tag key and tag value request parameters. If both tag keys and values
are omitted from the request, snapshots are returned regardless of whether they have tag
keys or values associated with them.

# Keyword Parameters
- `cluster_exists`: A value that indicates whether to return snapshots only for an existing
  cluster. You can perform table-level restore only by using a snapshot of an existing
  cluster, that is, a cluster that has not been deleted. Values for this parameter work as
  follows:    If ClusterExists is set to true, ClusterIdentifier is required.   If
  ClusterExists is set to false and ClusterIdentifier isn't specified, all snapshots
  associated with deleted clusters (orphaned snapshots) are returned.    If ClusterExists is
  set to false and ClusterIdentifier is specified for a deleted cluster, snapshots associated
  with that cluster are returned.   If ClusterExists is set to false and ClusterIdentifier is
  specified for an existing cluster, no snapshots are returned.
- `cluster_identifier`: The identifier of the cluster which generated the requested
  snapshots.
- `end_time`: A time value that requests only snapshots created at or before the specified
  time. The time value is specified in ISO 8601 format. For more information about ISO 8601,
  go to the ISO8601 Wikipedia page.  Example: 2012-07-16T18:00:00Z
- `marker`: An optional parameter that specifies the starting point to return a set of
  response records. When the results of a DescribeClusterSnapshots request exceed the value
  specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the
  response. You can retrieve the next set of response records by providing the returned
  marker value in the Marker parameter and retrying the request.
- `max_records`: The maximum number of response records to return in each call. If the
  number of remaining response records exceeds the specified MaxRecords value, a value is
  returned in a marker field of the response. You can retrieve the next set of records by
  retrying the command with the returned marker value.  Default: 100  Constraints: minimum
  20, maximum 100.
- `owner_account`: The Amazon Web Services account used to create or copy the snapshot. Use
  this field to filter the results to snapshots owned by a particular account. To describe
  snapshots you own, either specify your Amazon Web Services account, or do not specify the
  parameter.
- `snapshot_identifier`: The snapshot identifier of the snapshot about which to return
  information.
- `snapshot_type`: The type of snapshots for which you are requesting information. By
  default, snapshots of all types are returned. Valid Values: automated | manual
- `sorting_entities`:
- `start_time`: A value that requests only snapshots created at or after the specified
  time. The time value is specified in ISO 8601 format. For more information about ISO 8601,
  go to the ISO8601 Wikipedia page.  Example: 2012-07-16T18:00:00Z
- `tag_keys`: A tag key or keys for which you want to return all matching cluster snapshots
  that are associated with the specified key or keys. For example, suppose that you have
  snapshots that are tagged with keys called owner and environment. If you specify both of
  these tag keys in the request, Amazon Redshift returns a response with the snapshots that
  have either or both of these tag keys associated with them.
- `tag_values`: A tag value or values for which you want to return all matching cluster
  snapshots that are associated with the specified tag value or values. For example, suppose
  that you have snapshots that are tagged with values called admin and test. If you specify
  both of these tag values in the request, Amazon Redshift returns a response with the
  snapshots that have either or both of these tag values associated with them.
"""
function describe_cluster_snapshots(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeClusterSnapshots", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_cluster_subnet_groups(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns one or more cluster subnet group objects, which contain metadata about your cluster
subnet groups. By default, this operation returns information about all cluster subnet
groups that are defined in your Amazon Web Services account. If you specify both tag keys
and tag values in the same request, Amazon Redshift returns all subnet groups that match
any combination of the specified keys and values. For example, if you have owner and
environment for tag keys, and admin and test for tag values, all subnet groups that have
any combination of those values are returned. If both tag keys and values are omitted from
the request, subnet groups are returned regardless of whether they have tag keys or values
associated with them.

# Keyword Parameters
- `cluster_subnet_group_name`: The name of the cluster subnet group for which information
  is requested.
- `marker`: An optional parameter that specifies the starting point to return a set of
  response records. When the results of a DescribeClusterSubnetGroups request exceed the
  value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of
  the response. You can retrieve the next set of response records by providing the returned
  marker value in the Marker parameter and retrying the request.
- `max_records`: The maximum number of response records to return in each call. If the
  number of remaining response records exceeds the specified MaxRecords value, a value is
  returned in a marker field of the response. You can retrieve the next set of records by
  retrying the command with the returned marker value.  Default: 100  Constraints: minimum
  20, maximum 100.
- `tag_keys`: A tag key or keys for which you want to return all matching cluster subnet
  groups that are associated with the specified key or keys. For example, suppose that you
  have subnet groups that are tagged with keys called owner and environment. If you specify
  both of these tag keys in the request, Amazon Redshift returns a response with the subnet
  groups that have either or both of these tag keys associated with them.
- `tag_values`: A tag value or values for which you want to return all matching cluster
  subnet groups that are associated with the specified tag value or values. For example,
  suppose that you have subnet groups that are tagged with values called admin and test. If
  you specify both of these tag values in the request, Amazon Redshift returns a response
  with the subnet groups that have either or both of these tag values associated with them.
"""
function describe_cluster_subnet_groups(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeClusterSubnetGroups", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_cluster_tracks(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of all the available maintenance tracks.

# Keyword Parameters
- `maintenance_track_name`: The name of the maintenance track.
- `marker`: An optional parameter that specifies the starting point to return a set of
  response records. When the results of a DescribeClusterTracks request exceed the value
  specified in MaxRecords, Amazon Redshift returns a value in the Marker field of the
  response. You can retrieve the next set of response records by providing the returned
  marker value in the Marker parameter and retrying the request.
- `max_records`: An integer value for the maximum number of maintenance tracks to return.
"""
function describe_cluster_tracks(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeClusterTracks", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_cluster_versions(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns descriptions of the available Amazon Redshift cluster versions. You can call this
operation even before creating any clusters to learn more about the Amazon Redshift
versions. For more information about managing clusters, go to Amazon Redshift Clusters in
the Amazon Redshift Cluster Management Guide.

# Keyword Parameters
- `cluster_parameter_group_family`: The name of a specific cluster parameter group family
  to return details for. Constraints:   Must be 1 to 255 alphanumeric characters   First
  character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens
- `cluster_version`: The specific cluster version to return. Example: 1.0
- `marker`: An optional parameter that specifies the starting point to return a set of
  response records. When the results of a DescribeClusterVersions request exceed the value
  specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the
  response. You can retrieve the next set of response records by providing the returned
  marker value in the Marker parameter and retrying the request.
- `max_records`: The maximum number of response records to return in each call. If the
  number of remaining response records exceeds the specified MaxRecords value, a value is
  returned in a marker field of the response. You can retrieve the next set of records by
  retrying the command with the returned marker value.  Default: 100  Constraints: minimum
  20, maximum 100.
"""
function describe_cluster_versions(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeClusterVersions", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_clusters(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns properties of provisioned clusters including general cluster properties, cluster
database properties, maintenance and backup properties, and security and access properties.
This operation supports pagination. For more information about managing clusters, go to
Amazon Redshift Clusters in the Amazon Redshift Cluster Management Guide. If you specify
both tag keys and tag values in the same request, Amazon Redshift returns all clusters that
match any combination of the specified keys and values. For example, if you have owner and
environment for tag keys, and admin and test for tag values, all clusters that have any
combination of those values are returned. If both tag keys and values are omitted from the
request, clusters are returned regardless of whether they have tag keys or values
associated with them.

# Keyword Parameters
- `cluster_identifier`: The unique identifier of a cluster whose properties you are
  requesting. This parameter is case sensitive. The default is that all clusters defined for
  an account are returned.
- `marker`: An optional parameter that specifies the starting point to return a set of
  response records. When the results of a DescribeClusters request exceed the value specified
  in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You
  can retrieve the next set of response records by providing the returned marker value in the
  Marker parameter and retrying the request.  Constraints: You can specify either the
  ClusterIdentifier parameter or the Marker parameter, but not both.
- `max_records`: The maximum number of response records to return in each call. If the
  number of remaining response records exceeds the specified MaxRecords value, a value is
  returned in a marker field of the response. You can retrieve the next set of records by
  retrying the command with the returned marker value.  Default: 100  Constraints: minimum
  20, maximum 100.
- `tag_keys`: A tag key or keys for which you want to return all matching clusters that are
  associated with the specified key or keys. For example, suppose that you have clusters that
  are tagged with keys called owner and environment. If you specify both of these tag keys in
  the request, Amazon Redshift returns a response with the clusters that have either or both
  of these tag keys associated with them.
- `tag_values`: A tag value or values for which you want to return all matching clusters
  that are associated with the specified tag value or values. For example, suppose that you
  have clusters that are tagged with values called admin and test. If you specify both of
  these tag values in the request, Amazon Redshift returns a response with the clusters that
  have either or both of these tag values associated with them.
"""
function describe_clusters(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeClusters", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_data_shares(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Shows the status of any inbound or outbound datashares available in the specified account.

# Keyword Parameters
- `data_share_arn`: The identifier of the datashare to describe details of.
- `marker`: An optional parameter that specifies the starting point to return a set of
  response records. When the results of a DescribeDataShares request exceed the value
  specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the
  response. You can retrieve the next set of response records by providing the returned
  marker value in the Marker parameter and retrying the request.
- `max_records`: The maximum number of response records to return in each call. If the
  number of remaining response records exceeds the specified MaxRecords value, a value is
  returned in a marker field of the response. You can retrieve the next set of records by
  retrying the command with the returned marker value.
"""
function describe_data_shares(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeDataShares", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_data_shares_for_consumer(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of datashares where the account identifier being called is a consumer
account identifier.

# Keyword Parameters
- `consumer_arn`: The Amazon Resource Name (ARN) of the consumer that returns in the list
  of datashares.
- `marker`: An optional parameter that specifies the starting point to return a set of
  response records. When the results of a DescribeDataSharesForConsumer request exceed the
  value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of
  the response. You can retrieve the next set of response records by providing the returned
  marker value in the Marker parameter and retrying the request.
- `max_records`: The maximum number of response records to return in each call. If the
  number of remaining response records exceeds the specified MaxRecords value, a value is
  returned in a marker field of the response. You can retrieve the next set of records by
  retrying the command with the returned marker value.
- `status`: An identifier giving the status of a datashare in the consumer cluster. If this
  field is specified, Amazon Redshift returns the list of datashares that have the specified
  status.
"""
function describe_data_shares_for_consumer(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeDataSharesForConsumer", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_data_shares_for_producer(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of datashares when the account identifier being called is a producer account
identifier.

# Keyword Parameters
- `marker`: An optional parameter that specifies the starting point to return a set of
  response records. When the results of a DescribeDataSharesForProducer request exceed the
  value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of
  the response. You can retrieve the next set of response records by providing the returned
  marker value in the Marker parameter and retrying the request.
- `max_records`: The maximum number of response records to return in each call. If the
  number of remaining response records exceeds the specified MaxRecords value, a value is
  returned in a marker field of the response. You can retrieve the next set of records by
  retrying the command with the returned marker value.
- `producer_arn`: The Amazon Resource Name (ARN) of the producer that returns in the list
  of datashares.
- `status`: An identifier giving the status of a datashare in the producer. If this field
  is specified, Amazon Redshift returns the list of datashares that have the specified status.
"""
function describe_data_shares_for_producer(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeDataSharesForProducer", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_default_cluster_parameters(parameter_group_family; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of parameter settings for the specified parameter group family.  For more
information about parameters and parameter groups, go to Amazon Redshift Parameter Groups
in the Amazon Redshift Cluster Management Guide.

# Arguments
- `parameter_group_family`: The name of the cluster parameter group family.

# Keyword Parameters
- `marker`: An optional parameter that specifies the starting point to return a set of
  response records. When the results of a DescribeDefaultClusterParameters request exceed the
  value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of
  the response. You can retrieve the next set of response records by providing the returned
  marker value in the Marker parameter and retrying the request.
- `max_records`: The maximum number of response records to return in each call. If the
  number of remaining response records exceeds the specified MaxRecords value, a value is
  returned in a marker field of the response. You can retrieve the next set of records by
  retrying the command with the returned marker value.  Default: 100  Constraints: minimum
  20, maximum 100.
"""
function describe_default_cluster_parameters(ParameterGroupFamily; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeDefaultClusterParameters", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ParameterGroupFamily"=>ParameterGroupFamily), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_endpoint_access(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Describes a Redshift-managed VPC endpoint.

# Keyword Parameters
- `cluster_identifier`: The cluster identifier associated with the described endpoint.
- `endpoint_name`: The name of the endpoint to be described.
- `marker`: An optional pagination token provided by a previous DescribeEndpointAccess
  request. If this parameter is specified, the response includes only records beyond the
  marker, up to the value specified by the MaxRecords parameter.
- `max_records`: The maximum number of records to include in the response. If more records
  exist than the specified MaxRecords value, a pagination token called a Marker is included
  in the response so that the remaining results can be retrieved.
- `resource_owner`: The Amazon Web Services account ID of the owner of the cluster.
- `vpc_id`: The virtual private cloud (VPC) identifier with access to the cluster.
"""
function describe_endpoint_access(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeEndpointAccess", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_endpoint_authorization(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Describes an endpoint authorization.

# Keyword Parameters
- `account`: The AAmazon Web Services account ID of either the cluster owner (grantor) or
  grantee. If Grantee parameter is true, then the Account value is of the grantor.
- `cluster_identifier`: The cluster identifier of the cluster to access.
- `grantee`: Indicates whether to check authorization from a grantor or grantee point of
  view. If true, Amazon Redshift returns endpoint authorizations that you've been granted. If
  false (default), checks authorization from a grantor point of view.
- `marker`: An optional pagination token provided by a previous
  DescribeEndpointAuthorization request. If this parameter is specified, the response
  includes only records beyond the marker, up to the value specified by the MaxRecords
  parameter.
- `max_records`: The maximum number of records to include in the response. If more records
  exist than the specified MaxRecords value, a pagination token called a Marker is included
  in the response so that the remaining results can be retrieved.
"""
function describe_endpoint_authorization(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeEndpointAuthorization", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_event_categories(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Displays a list of event categories for all event source types, or for a specified source
type. For a list of the event categories and source types, go to Amazon Redshift Event
Notifications.

# Keyword Parameters
- `source_type`: The source type, such as cluster or parameter group, to which the
  described event categories apply. Valid values: cluster, cluster-snapshot,
  cluster-parameter-group, cluster-security-group, and scheduled-action.
"""
function describe_event_categories(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeEventCategories", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_event_subscriptions(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists descriptions of all the Amazon Redshift event notification subscriptions for a
customer account. If you specify a subscription name, lists the description for that
subscription. If you specify both tag keys and tag values in the same request, Amazon
Redshift returns all event notification subscriptions that match any combination of the
specified keys and values. For example, if you have owner and environment for tag keys, and
admin and test for tag values, all subscriptions that have any combination of those values
are returned. If both tag keys and values are omitted from the request, subscriptions are
returned regardless of whether they have tag keys or values associated with them.

# Keyword Parameters
- `marker`: An optional parameter that specifies the starting point to return a set of
  response records. When the results of a DescribeEventSubscriptions request exceed the value
  specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the
  response. You can retrieve the next set of response records by providing the returned
  marker value in the Marker parameter and retrying the request.
- `max_records`: The maximum number of response records to return in each call. If the
  number of remaining response records exceeds the specified MaxRecords value, a value is
  returned in a marker field of the response. You can retrieve the next set of records by
  retrying the command with the returned marker value.  Default: 100  Constraints: minimum
  20, maximum 100.
- `subscription_name`: The name of the Amazon Redshift event notification subscription to
  be described.
- `tag_keys`: A tag key or keys for which you want to return all matching event
  notification subscriptions that are associated with the specified key or keys. For example,
  suppose that you have subscriptions that are tagged with keys called owner and environment.
  If you specify both of these tag keys in the request, Amazon Redshift returns a response
  with the subscriptions that have either or both of these tag keys associated with them.
- `tag_values`: A tag value or values for which you want to return all matching event
  notification subscriptions that are associated with the specified tag value or values. For
  example, suppose that you have subscriptions that are tagged with values called admin and
  test. If you specify both of these tag values in the request, Amazon Redshift returns a
  response with the subscriptions that have either or both of these tag values associated
  with them.
"""
function describe_event_subscriptions(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeEventSubscriptions", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_events(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns events related to clusters, security groups, snapshots, and parameter groups for
the past 14 days. Events specific to a particular cluster, security group, snapshot or
parameter group can be obtained by providing the name as a parameter. By default, the past
hour of events are returned.

# Keyword Parameters
- `duration`: The number of minutes prior to the time of the request for which to retrieve
  events. For example, if the request is sent at 18:00 and you specify a duration of 60, then
  only events which have occurred after 17:00 will be returned. Default: 60
- `end_time`: The end of the time interval for which to retrieve events, specified in ISO
  8601 format. For more information about ISO 8601, go to the ISO8601 Wikipedia page.
  Example: 2009-07-08T18:00Z
- `marker`: An optional parameter that specifies the starting point to return a set of
  response records. When the results of a DescribeEvents request exceed the value specified
  in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You
  can retrieve the next set of response records by providing the returned marker value in the
  Marker parameter and retrying the request.
- `max_records`: The maximum number of response records to return in each call. If the
  number of remaining response records exceeds the specified MaxRecords value, a value is
  returned in a marker field of the response. You can retrieve the next set of records by
  retrying the command with the returned marker value.  Default: 100  Constraints: minimum
  20, maximum 100.
- `source_identifier`: The identifier of the event source for which events will be
  returned. If this parameter is not specified, then all sources are included in the
  response. Constraints: If SourceIdentifier is supplied, SourceType must also be provided.
  Specify a cluster identifier when SourceType is cluster.   Specify a cluster security group
  name when SourceType is cluster-security-group.   Specify a cluster parameter group name
  when SourceType is cluster-parameter-group.   Specify a cluster snapshot identifier when
  SourceType is cluster-snapshot.
- `source_type`: The event source to retrieve events for. If no value is specified, all
  events are returned. Constraints: If SourceType is supplied, SourceIdentifier must also be
  provided.   Specify cluster when SourceIdentifier is a cluster identifier.   Specify
  cluster-security-group when SourceIdentifier is a cluster security group name.   Specify
  cluster-parameter-group when SourceIdentifier is a cluster parameter group name.   Specify
  cluster-snapshot when SourceIdentifier is a cluster snapshot identifier.
- `start_time`: The beginning of the time interval to retrieve events for, specified in ISO
  8601 format. For more information about ISO 8601, go to the ISO8601 Wikipedia page.
  Example: 2009-07-08T18:00Z
"""
function describe_events(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeEvents", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_hsm_client_certificates(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about the specified HSM client certificate. If no certificate ID is
specified, returns information about all the HSM certificates owned by your Amazon Web
Services account. If you specify both tag keys and tag values in the same request, Amazon
Redshift returns all HSM client certificates that match any combination of the specified
keys and values. For example, if you have owner and environment for tag keys, and admin and
test for tag values, all HSM client certificates that have any combination of those values
are returned. If both tag keys and values are omitted from the request, HSM client
certificates are returned regardless of whether they have tag keys or values associated
with them.

# Keyword Parameters
- `hsm_client_certificate_identifier`: The identifier of a specific HSM client certificate
  for which you want information. If no identifier is specified, information is returned for
  all HSM client certificates owned by your Amazon Web Services account.
- `marker`: An optional parameter that specifies the starting point to return a set of
  response records. When the results of a DescribeHsmClientCertificates request exceed the
  value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of
  the response. You can retrieve the next set of response records by providing the returned
  marker value in the Marker parameter and retrying the request.
- `max_records`: The maximum number of response records to return in each call. If the
  number of remaining response records exceeds the specified MaxRecords value, a value is
  returned in a marker field of the response. You can retrieve the next set of records by
  retrying the command with the returned marker value.  Default: 100  Constraints: minimum
  20, maximum 100.
- `tag_keys`: A tag key or keys for which you want to return all matching HSM client
  certificates that are associated with the specified key or keys. For example, suppose that
  you have HSM client certificates that are tagged with keys called owner and environment. If
  you specify both of these tag keys in the request, Amazon Redshift returns a response with
  the HSM client certificates that have either or both of these tag keys associated with them.
- `tag_values`: A tag value or values for which you want to return all matching HSM client
  certificates that are associated with the specified tag value or values. For example,
  suppose that you have HSM client certificates that are tagged with values called admin and
  test. If you specify both of these tag values in the request, Amazon Redshift returns a
  response with the HSM client certificates that have either or both of these tag values
  associated with them.
"""
function describe_hsm_client_certificates(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeHsmClientCertificates", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_hsm_configurations(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about the specified Amazon Redshift HSM configuration. If no
configuration ID is specified, returns information about all the HSM configurations owned
by your Amazon Web Services account. If you specify both tag keys and tag values in the
same request, Amazon Redshift returns all HSM connections that match any combination of the
specified keys and values. For example, if you have owner and environment for tag keys, and
admin and test for tag values, all HSM connections that have any combination of those
values are returned. If both tag keys and values are omitted from the request, HSM
connections are returned regardless of whether they have tag keys or values associated with
them.

# Keyword Parameters
- `hsm_configuration_identifier`: The identifier of a specific Amazon Redshift HSM
  configuration to be described. If no identifier is specified, information is returned for
  all HSM configurations owned by your Amazon Web Services account.
- `marker`: An optional parameter that specifies the starting point to return a set of
  response records. When the results of a DescribeHsmConfigurations request exceed the value
  specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the
  response. You can retrieve the next set of response records by providing the returned
  marker value in the Marker parameter and retrying the request.
- `max_records`: The maximum number of response records to return in each call. If the
  number of remaining response records exceeds the specified MaxRecords value, a value is
  returned in a marker field of the response. You can retrieve the next set of records by
  retrying the command with the returned marker value.  Default: 100  Constraints: minimum
  20, maximum 100.
- `tag_keys`: A tag key or keys for which you want to return all matching HSM
  configurations that are associated with the specified key or keys. For example, suppose
  that you have HSM configurations that are tagged with keys called owner and environment. If
  you specify both of these tag keys in the request, Amazon Redshift returns a response with
  the HSM configurations that have either or both of these tag keys associated with them.
- `tag_values`: A tag value or values for which you want to return all matching HSM
  configurations that are associated with the specified tag value or values. For example,
  suppose that you have HSM configurations that are tagged with values called admin and test.
  If you specify both of these tag values in the request, Amazon Redshift returns a response
  with the HSM configurations that have either or both of these tag values associated with
  them.
"""
function describe_hsm_configurations(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeHsmConfigurations", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_logging_status(cluster_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Describes whether information, such as queries and connection attempts, is being logged for
the specified Amazon Redshift cluster.

# Arguments
- `cluster_identifier`: The identifier of the cluster from which to get the logging status.
  Example: examplecluster

"""
function describe_logging_status(ClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeLoggingStatus", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterIdentifier"=>ClusterIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_node_configuration_options(action_type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns properties of possible node configurations such as node type, number of nodes, and
disk usage for the specified action type.

# Arguments
- `action_type`: The action type to evaluate for possible node configurations. Specify
  \"restore-cluster\" to get configuration combinations based on an existing snapshot.
  Specify \"recommend-node-config\" to get configuration recommendations based on an existing
  cluster or snapshot. Specify \"resize-cluster\" to get configuration combinations for
  elastic resize based on an existing cluster.

# Keyword Parameters
- `cluster_identifier`: The identifier of the cluster to evaluate for possible node
  configurations.
- `filters`: A set of name, operator, and value items to filter the results.
- `marker`: An optional parameter that specifies the starting point to return a set of
  response records. When the results of a DescribeNodeConfigurationOptions request exceed the
  value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of
  the response. You can retrieve the next set of response records by providing the returned
  marker value in the Marker parameter and retrying the request.
- `max_records`: The maximum number of response records to return in each call. If the
  number of remaining response records exceeds the specified MaxRecords value, a value is
  returned in a marker field of the response. You can retrieve the next set of records by
  retrying the command with the returned marker value.  Default: 500  Constraints: minimum
  100, maximum 500.
- `owner_account`: The Amazon Web Services account used to create or copy the snapshot.
  Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
- `snapshot_identifier`: The identifier of the snapshot to evaluate for possible node
  configurations.
"""
function describe_node_configuration_options(ActionType; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeNodeConfigurationOptions", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ActionType"=>ActionType), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_orderable_cluster_options(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of orderable cluster options. Before you create a new cluster you can use
this operation to find what options are available, such as the EC2 Availability Zones (AZ)
in the specific Amazon Web Services Region that you can specify, and the node types you can
request. The node types differ by available storage, memory, CPU and price. With the cost
involved you might want to obtain a list of cluster options in the specific region and
specify values when creating a cluster. For more information about managing clusters, go to
Amazon Redshift Clusters in the Amazon Redshift Cluster Management Guide.

# Keyword Parameters
- `cluster_version`: The version filter value. Specify this parameter to show only the
  available offerings matching the specified version. Default: All versions. Constraints:
  Must be one of the version returned from DescribeClusterVersions.
- `marker`: An optional parameter that specifies the starting point to return a set of
  response records. When the results of a DescribeOrderableClusterOptions request exceed the
  value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of
  the response. You can retrieve the next set of response records by providing the returned
  marker value in the Marker parameter and retrying the request.
- `max_records`: The maximum number of response records to return in each call. If the
  number of remaining response records exceeds the specified MaxRecords value, a value is
  returned in a marker field of the response. You can retrieve the next set of records by
  retrying the command with the returned marker value.  Default: 100  Constraints: minimum
  20, maximum 100.
- `node_type`: The node type filter value. Specify this parameter to show only the
  available offerings matching the specified node type.
"""
function describe_orderable_cluster_options(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeOrderableClusterOptions", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_partners(account_id, cluster_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about the partner integrations defined for a cluster.

# Arguments
- `account_id`: The Amazon Web Services account ID that owns the cluster.
- `cluster_identifier`: The cluster identifier of the cluster whose partner integration is
  being described.

# Keyword Parameters
- `database_name`: The name of the database whose partner integration is being described.
  If database name is not specified, then all databases in the cluster are described.
- `partner_name`: The name of the partner that is being described. If partner name is not
  specified, then all partner integrations are described.
"""
function describe_partners(AccountId, ClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribePartners", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("AccountId"=>AccountId, "ClusterIdentifier"=>ClusterIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_reserved_node_offerings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of the available reserved node offerings by Amazon Redshift with their
descriptions including the node type, the fixed and recurring costs of reserving the node
and duration the node will be reserved for you. These descriptions help you determine which
reserve node offering you want to purchase. You then use the unique offering ID in you call
to PurchaseReservedNodeOffering to reserve one or more nodes for your Amazon Redshift
cluster.   For more information about reserved node offerings, go to Purchasing Reserved
Nodes in the Amazon Redshift Cluster Management Guide.

# Keyword Parameters
- `marker`: An optional parameter that specifies the starting point to return a set of
  response records. When the results of a DescribeReservedNodeOfferings request exceed the
  value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of
  the response. You can retrieve the next set of response records by providing the returned
  marker value in the Marker parameter and retrying the request.
- `max_records`: The maximum number of response records to return in each call. If the
  number of remaining response records exceeds the specified MaxRecords value, a value is
  returned in a marker field of the response. You can retrieve the next set of records by
  retrying the command with the returned marker value.  Default: 100  Constraints: minimum
  20, maximum 100.
- `reserved_node_offering_id`: The unique identifier for the offering.
"""
function describe_reserved_node_offerings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeReservedNodeOfferings", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_reserved_nodes(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns the descriptions of the reserved nodes.

# Keyword Parameters
- `marker`: An optional parameter that specifies the starting point to return a set of
  response records. When the results of a DescribeReservedNodes request exceed the value
  specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the
  response. You can retrieve the next set of response records by providing the returned
  marker value in the Marker parameter and retrying the request.
- `max_records`: The maximum number of response records to return in each call. If the
  number of remaining response records exceeds the specified MaxRecords value, a value is
  returned in a marker field of the response. You can retrieve the next set of records by
  retrying the command with the returned marker value.  Default: 100  Constraints: minimum
  20, maximum 100.
- `reserved_node_id`: Identifier for the node reservation.
"""
function describe_reserved_nodes(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeReservedNodes", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_resize(cluster_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about the last resize operation for the specified cluster. If no resize
operation has ever been initiated for the specified cluster, a HTTP 404 error is returned.
If a resize operation was initiated and completed, the status of the resize remains as
SUCCEEDED until the next resize.  A resize operation can be requested using ModifyCluster
and specifying a different number or type of nodes for the cluster.

# Arguments
- `cluster_identifier`: The unique identifier of a cluster whose resize progress you are
  requesting. This parameter is case-sensitive. By default, resize operations for all
  clusters defined for an Amazon Web Services account are returned.

"""
function describe_resize(ClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeResize", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterIdentifier"=>ClusterIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_scheduled_actions(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Describes properties of scheduled actions.

# Keyword Parameters
- `active`: If true, retrieve only active scheduled actions. If false, retrieve only
  disabled scheduled actions.
- `end_time`: The end time in UTC of the scheduled action to retrieve. Only active
  scheduled actions that have invocations before this time are retrieved.
- `filters`: List of scheduled action filters.
- `marker`: An optional parameter that specifies the starting point to return a set of
  response records. When the results of a DescribeScheduledActions request exceed the value
  specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the
  response. You can retrieve the next set of response records by providing the returned
  marker value in the Marker parameter and retrying the request.
- `max_records`: The maximum number of response records to return in each call. If the
  number of remaining response records exceeds the specified MaxRecords value, a value is
  returned in a marker field of the response. You can retrieve the next set of records by
  retrying the command with the returned marker value.  Default: 100  Constraints: minimum
  20, maximum 100.
- `scheduled_action_name`: The name of the scheduled action to retrieve.
- `start_time`: The start time in UTC of the scheduled actions to retrieve. Only active
  scheduled actions that have invocations after this time are retrieved.
- `target_action_type`: The type of the scheduled actions to retrieve.
"""
function describe_scheduled_actions(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeScheduledActions", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_snapshot_copy_grants(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of snapshot copy grants owned by the Amazon Web Services account in the
destination region.  For more information about managing snapshot copy grants, go to Amazon
Redshift Database Encryption in the Amazon Redshift Cluster Management Guide.

# Keyword Parameters
- `marker`: An optional parameter that specifies the starting point to return a set of
  response records. When the results of a DescribeSnapshotCopyGrant request exceed the value
  specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the
  response. You can retrieve the next set of response records by providing the returned
  marker value in the Marker parameter and retrying the request.  Constraints: You can
  specify either the SnapshotCopyGrantName parameter or the Marker parameter, but not both.
- `max_records`: The maximum number of response records to return in each call. If the
  number of remaining response records exceeds the specified MaxRecords value, a value is
  returned in a marker field of the response. You can retrieve the next set of records by
  retrying the command with the returned marker value.  Default: 100  Constraints: minimum
  20, maximum 100.
- `snapshot_copy_grant_name`: The name of the snapshot copy grant.
- `tag_keys`: A tag key or keys for which you want to return all matching resources that
  are associated with the specified key or keys. For example, suppose that you have resources
  tagged with keys called owner and environment. If you specify both of these tag keys in the
  request, Amazon Redshift returns a response with all resources that have either or both of
  these tag keys associated with them.
- `tag_values`: A tag value or values for which you want to return all matching resources
  that are associated with the specified value or values. For example, suppose that you have
  resources tagged with values called admin and test. If you specify both of these tag values
  in the request, Amazon Redshift returns a response with all resources that have either or
  both of these tag values associated with them.
"""
function describe_snapshot_copy_grants(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeSnapshotCopyGrants", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_snapshot_schedules(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of snapshot schedules.

# Keyword Parameters
- `cluster_identifier`: The unique identifier for the cluster whose snapshot schedules you
  want to view.
- `marker`: A value that indicates the starting point for the next set of response records
  in a subsequent request. If a value is returned in a response, you can retrieve the next
  set of records by providing this returned marker value in the marker parameter and retrying
  the command. If the marker field is empty, all response records have been retrieved for the
  request.
- `max_records`: The maximum number or response records to return in each call. If the
  number of remaining response records exceeds the specified MaxRecords value, a value is
  returned in a marker field of the response. You can retrieve the next set of records by
  retrying the command with the returned marker value.
- `schedule_identifier`: A unique identifier for a snapshot schedule.
- `tag_keys`: The key value for a snapshot schedule tag.
- `tag_values`: The value corresponding to the key of the snapshot schedule tag.
"""
function describe_snapshot_schedules(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeSnapshotSchedules", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_storage(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns account level backups storage size and provisional storage.

"""
function describe_storage(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeStorage", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_table_restore_status(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the status of one or more table restore requests made using the
RestoreTableFromClusterSnapshot API action. If you don't specify a value for the
TableRestoreRequestId parameter, then DescribeTableRestoreStatus returns the status of all
table restore requests ordered by the date and time of the request in ascending order.
Otherwise DescribeTableRestoreStatus returns the status of the table specified by
TableRestoreRequestId.

# Keyword Parameters
- `cluster_identifier`: The Amazon Redshift cluster that the table is being restored to.
- `marker`: An optional pagination token provided by a previous DescribeTableRestoreStatus
  request. If this parameter is specified, the response includes only records beyond the
  marker, up to the value specified by the MaxRecords parameter.
- `max_records`: The maximum number of records to include in the response. If more records
  exist than the specified MaxRecords value, a pagination token called a marker is included
  in the response so that the remaining results can be retrieved.
- `table_restore_request_id`: The identifier of the table restore request to return status
  for. If you don't specify a TableRestoreRequestId value, then DescribeTableRestoreStatus
  returns the status of all in-progress table restore requests.
"""
function describe_table_restore_status(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeTableRestoreStatus", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_tags(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of tags. You can return tags from a specific resource by specifying an ARN,
or you can return all tags for a given type of resource, such as clusters, snapshots, and
so on. The following are limitations for DescribeTags:    You cannot specify an ARN and a
resource-type value together in the same request.   You cannot use the MaxRecords and
Marker parameters together with the ARN parameter.   The MaxRecords parameter can be a
range from 10 to 50 results to return in a request.   If you specify both tag keys and tag
values in the same request, Amazon Redshift returns all resources that match any
combination of the specified keys and values. For example, if you have owner and
environment for tag keys, and admin and test for tag values, all resources that have any
combination of those values are returned. If both tag keys and values are omitted from the
request, resources are returned regardless of whether they have tag keys or values
associated with them.

# Keyword Parameters
- `marker`: A value that indicates the starting point for the next set of response records
  in a subsequent request. If a value is returned in a response, you can retrieve the next
  set of records by providing this returned marker value in the marker parameter and retrying
  the command. If the marker field is empty, all response records have been retrieved for the
  request.
- `max_records`: The maximum number or response records to return in each call. If the
  number of remaining response records exceeds the specified MaxRecords value, a value is
  returned in a marker field of the response. You can retrieve the next set of records by
  retrying the command with the returned marker value.
- `resource_name`: The Amazon Resource Name (ARN) for which you want to describe the tag or
  tags. For example, arn:aws:redshift:us-east-2:123456789:cluster:t1.
- `resource_type`: The type of resource with which you want to view tags. Valid resource
  types are:    Cluster   CIDR/IP   EC2 security group   Snapshot   Cluster security group
  Subnet group   HSM connection   HSM certificate   Parameter group   Snapshot copy grant
  For more information about Amazon Redshift resource types and constructing ARNs, go to
  Specifying Policy Elements: Actions, Effects, Resources, and Principals in the Amazon
  Redshift Cluster Management Guide.
- `tag_keys`: A tag key or keys for which you want to return all matching resources that
  are associated with the specified key or keys. For example, suppose that you have resources
  tagged with keys called owner and environment. If you specify both of these tag keys in the
  request, Amazon Redshift returns a response with all resources that have either or both of
  these tag keys associated with them.
- `tag_values`: A tag value or values for which you want to return all matching resources
  that are associated with the specified value or values. For example, suppose that you have
  resources tagged with values called admin and test. If you specify both of these tag values
  in the request, Amazon Redshift returns a response with all resources that have either or
  both of these tag values associated with them.
"""
function describe_tags(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeTags", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_usage_limits(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Shows usage limits on a cluster. Results are filtered based on the combination of input
usage limit identifier, cluster identifier, and feature type parameters:   If usage limit
identifier, cluster identifier, and feature type are not provided, then all usage limit
objects for the current account in the current region are returned.   If usage limit
identifier is provided, then the corresponding usage limit object is returned.   If cluster
identifier is provided, then all usage limit objects for the specified cluster are
returned.   If cluster identifier and feature type are provided, then all usage limit
objects for the combination of cluster and feature are returned.

# Keyword Parameters
- `cluster_identifier`: The identifier of the cluster for which you want to describe usage
  limits.
- `feature_type`: The feature type for which you want to describe usage limits.
- `marker`: An optional parameter that specifies the starting point to return a set of
  response records. When the results of a DescribeUsageLimits request exceed the value
  specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the
  response. You can retrieve the next set of response records by providing the returned
  marker value in the Marker parameter and retrying the request.
- `max_records`: The maximum number of response records to return in each call. If the
  number of remaining response records exceeds the specified MaxRecords value, a value is
  returned in a marker field of the response. You can retrieve the next set of records by
  retrying the command with the returned marker value.  Default: 100  Constraints: minimum
  20, maximum 100.
- `tag_keys`: A tag key or keys for which you want to return all matching usage limit
  objects that are associated with the specified key or keys. For example, suppose that you
  have parameter groups that are tagged with keys called owner and environment. If you
  specify both of these tag keys in the request, Amazon Redshift returns a response with the
  usage limit objects have either or both of these tag keys associated with them.
- `tag_values`: A tag value or values for which you want to return all matching usage limit
  objects that are associated with the specified tag value or values. For example, suppose
  that you have parameter groups that are tagged with values called admin and test. If you
  specify both of these tag values in the request, Amazon Redshift returns a response with
  the usage limit objects that have either or both of these tag values associated with them.
- `usage_limit_id`: The identifier of the usage limit to describe.
"""
function describe_usage_limits(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DescribeUsageLimits", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    disable_logging(cluster_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Stops logging information, such as queries and connection attempts, for the specified
Amazon Redshift cluster.

# Arguments
- `cluster_identifier`: The identifier of the cluster on which logging is to be stopped.
  Example: examplecluster

"""
function disable_logging(ClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DisableLogging", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterIdentifier"=>ClusterIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    disable_snapshot_copy(cluster_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Disables the automatic copying of snapshots from one region to another region for a
specified cluster. If your cluster and its snapshots are encrypted using a customer master
key (CMK) from Key Management Service, use DeleteSnapshotCopyGrant to delete the grant that
grants Amazon Redshift permission to the CMK in the destination region.

# Arguments
- `cluster_identifier`: The unique identifier of the source cluster that you want to
  disable copying of snapshots to a destination region. Constraints: Must be the valid name
  of an existing cluster that has cross-region snapshot copy enabled.

"""
function disable_snapshot_copy(ClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DisableSnapshotCopy", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterIdentifier"=>ClusterIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    disassociate_data_share_consumer(data_share_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

From a consumer account, remove association for the specified datashare.

# Arguments
- `data_share_arn`: The Amazon Resource Name (ARN) of the datashare to remove association
  for.

# Keyword Parameters
- `consumer_arn`: The Amazon Resource Name (ARN) of the consumer that association for the
  datashare is removed from.
- `disassociate_entire_account`: A value that specifies whether association for the
  datashare is removed from the entire account.
"""
function disassociate_data_share_consumer(DataShareArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("DisassociateDataShareConsumer", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("DataShareArn"=>DataShareArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    enable_logging(bucket_name, cluster_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Starts logging information, such as queries and connection attempts, for the specified
Amazon Redshift cluster.

# Arguments
- `bucket_name`: The name of an existing S3 bucket where the log files are to be stored.
  Constraints:   Must be in the same region as the cluster   The cluster must have read
  bucket and put object permissions
- `cluster_identifier`: The identifier of the cluster on which logging is to be started.
  Example: examplecluster

# Keyword Parameters
- `s3_key_prefix`: The prefix applied to the log file names. Constraints:   Cannot exceed
  512 characters   Cannot contain spaces( ), double quotes (\"), single quotes ('), a
  backslash (), or control characters. The hexadecimal codes for invalid characters are:
  x00 to x20   x22   x27   x5c   x7f or larger
"""
function enable_logging(BucketName, ClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("EnableLogging", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("BucketName"=>BucketName, "ClusterIdentifier"=>ClusterIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    enable_snapshot_copy(cluster_identifier, destination_region; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Enables the automatic copy of snapshots from one region to another region for a specified
cluster.

# Arguments
- `cluster_identifier`: The unique identifier of the source cluster to copy snapshots from.
  Constraints: Must be the valid name of an existing cluster that does not already have
  cross-region snapshot copy enabled.
- `destination_region`: The destination Amazon Web Services Region that you want to copy
  snapshots to. Constraints: Must be the name of a valid Amazon Web Services Region. For more
  information, see Regions and Endpoints in the Amazon Web Services General Reference.

# Keyword Parameters
- `manual_snapshot_retention_period`: The number of days to retain newly copied snapshots
  in the destination Amazon Web Services Region after they are copied from the source Amazon
  Web Services Region. If the value is -1, the manual snapshot is retained indefinitely.  The
  value must be either -1 or an integer between 1 and 3,653.
- `retention_period`: The number of days to retain automated snapshots in the destination
  region after they are copied from the source region. Default: 7. Constraints: Must be at
  least 1 and no more than 35.
- `snapshot_copy_grant_name`: The name of the snapshot copy grant to use when snapshots of
  an Amazon Web Services KMS-encrypted cluster are copied to the destination region.
"""
function enable_snapshot_copy(ClusterIdentifier, DestinationRegion; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("EnableSnapshotCopy", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterIdentifier"=>ClusterIdentifier, "DestinationRegion"=>DestinationRegion), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_cluster_credentials(cluster_identifier, db_user; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a database user name and temporary password with temporary authorization to log on
to an Amazon Redshift database. The action returns the database user name prefixed with
IAM: if AutoCreate is False or IAMA: if AutoCreate is True. You can optionally specify one
or more database user groups that the user will join at log on. By default, the temporary
credentials expire in 900 seconds. You can optionally specify a duration between 900
seconds (15 minutes) and 3600 seconds (60 minutes). For more information, see Using IAM
Authentication to Generate Database User Credentials in the Amazon Redshift Cluster
Management Guide. The Identity and Access Management (IAM) user or role that runs
GetClusterCredentials must have an IAM policy attached that allows access to all necessary
actions and resources. For more information about permissions, see Resource Policies for
GetClusterCredentials in the Amazon Redshift Cluster Management Guide. If the DbGroups
parameter is specified, the IAM policy must allow the redshift:JoinGroup action with access
to the listed dbgroups.  In addition, if the AutoCreate parameter is set to True, then the
policy must include the redshift:CreateClusterUser privilege. If the DbName parameter is
specified, the IAM policy must allow access to the resource dbname for the specified
database name.

# Arguments
- `cluster_identifier`: The unique identifier of the cluster that contains the database for
  which your are requesting credentials. This parameter is case sensitive.
- `db_user`: The name of a database user. If a user name matching DbUser exists in the
  database, the temporary user credentials have the same permissions as the existing user. If
  DbUser doesn't exist in the database and Autocreate is True, a new user is created using
  the value for DbUser with PUBLIC permissions. If a database user matching the value for
  DbUser doesn't exist and Autocreate is False, then the command succeeds but the connection
  attempt will fail because the user doesn't exist in the database. For more information, see
  CREATE USER in the Amazon Redshift Database Developer Guide.  Constraints:   Must be 1 to
  64 alphanumeric characters or hyphens. The user name can't be PUBLIC.   Must contain only
  lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.
   First character must be a letter.   Must not contain a colon ( : ) or slash ( / ).
  Cannot be a reserved word. A list of reserved words can be found in Reserved Words in the
  Amazon Redshift Database Developer Guide.

# Keyword Parameters
- `auto_create`: Create a database user with the name specified for the user named in
  DbUser if one does not exist.
- `db_groups`: A list of the names of existing database groups that the user named in
  DbUser will join for the current session, in addition to any group memberships for an
  existing user. If not specified, a new user is added only to PUBLIC. Database group name
  constraints   Must be 1 to 64 alphanumeric characters or hyphens   Must contain only
  lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.
   First character must be a letter.   Must not contain a colon ( : ) or slash ( / ).
  Cannot be a reserved word. A list of reserved words can be found in Reserved Words in the
  Amazon Redshift Database Developer Guide.
- `db_name`: The name of a database that DbUser is authorized to log on to. If DbName is
  not specified, DbUser can log on to any existing database. Constraints:   Must be 1 to 64
  alphanumeric characters or hyphens   Must contain only lowercase letters, numbers,
  underscore, plus sign, period (dot), at symbol (@), or hyphen.   First character must be a
  letter.   Must not contain a colon ( : ) or slash ( / ).    Cannot be a reserved word. A
  list of reserved words can be found in Reserved Words in the Amazon Redshift Database
  Developer Guide.
- `duration_seconds`: The number of seconds until the returned temporary password expires.
  Constraint: minimum 900, maximum 3600. Default: 900
"""
function get_cluster_credentials(ClusterIdentifier, DbUser; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("GetClusterCredentials", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterIdentifier"=>ClusterIdentifier, "DbUser"=>DbUser), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_reserved_node_exchange_offerings(reserved_node_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns an array of DC2 ReservedNodeOfferings that matches the payment type, term, and
usage price of the given DC1 reserved node.

# Arguments
- `reserved_node_id`: A string representing the node identifier for the DC1 Reserved Node
  to be exchanged.

# Keyword Parameters
- `marker`: A value that indicates the starting point for the next set of
  ReservedNodeOfferings.
- `max_records`: An integer setting the maximum number of ReservedNodeOfferings to retrieve.
"""
function get_reserved_node_exchange_offerings(ReservedNodeId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("GetReservedNodeExchangeOfferings", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ReservedNodeId"=>ReservedNodeId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    modify_aqua_configuration(cluster_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Modifies whether a cluster can use AQUA (Advanced Query Accelerator).

# Arguments
- `cluster_identifier`: The identifier of the cluster to be modified.

# Keyword Parameters
- `aqua_configuration_status`: The new value of AQUA configuration status. Possible values
  include the following.   enabled - Use AQUA if it is available for the current Amazon Web
  Services Region and Amazon Redshift node type.   disabled - Don't use AQUA.    auto -
  Amazon Redshift determines whether to use AQUA.
"""
function modify_aqua_configuration(ClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("ModifyAquaConfiguration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterIdentifier"=>ClusterIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    modify_authentication_profile(authentication_profile_content, authentication_profile_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Modifies an authentication profile.

# Arguments
- `authentication_profile_content`: The new content of the authentication profile in JSON
  format. The maximum length of the JSON string is determined by a quota for your account.
- `authentication_profile_name`: The name of the authentication profile to replace.

"""
function modify_authentication_profile(AuthenticationProfileContent, AuthenticationProfileName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("ModifyAuthenticationProfile", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("AuthenticationProfileContent"=>AuthenticationProfileContent, "AuthenticationProfileName"=>AuthenticationProfileName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    modify_cluster(cluster_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Modifies the settings for a cluster. You can also change node type and the number of nodes
to scale up or down the cluster. When resizing a cluster, you must specify both the number
of nodes and the node type even if one of the parameters does not change. You can add
another security or parameter group, or change the admin user password. Resetting a cluster
password or modifying the security groups associated with a cluster do not need a reboot.
However, modifying a parameter group requires a reboot for parameters to take effect. For
more information about managing clusters, go to Amazon Redshift Clusters in the Amazon
Redshift Cluster Management Guide.

# Arguments
- `cluster_identifier`: The unique identifier of the cluster to be modified. Example:
  examplecluster

# Keyword Parameters
- `allow_version_upgrade`: If true, major version upgrades will be applied automatically to
  the cluster during the maintenance window.  Default: false
- `automated_snapshot_retention_period`: The number of days that automated snapshots are
  retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots
  are disabled, you can still create manual snapshots when you want with
  CreateClusterSnapshot.  If you decrease the automated snapshot retention period from its
  current value, existing automated snapshots that fall outside of the new retention period
  will be immediately deleted. You can't disable automated snapshots for RA3 node types. Set
  the automated retention period from 1-35 days. Default: Uses existing setting. Constraints:
  Must be a value from 0 to 35.
- `availability_zone`: The option to initiate relocation for an Amazon Redshift cluster to
  the target Availability Zone.
- `availability_zone_relocation`: The option to enable relocation for an Amazon Redshift
  cluster between Availability Zones after the cluster modification is complete.
- `cluster_parameter_group_name`: The name of the cluster parameter group to apply to this
  cluster. This change is applied only after the cluster is rebooted. To reboot a cluster use
  RebootCluster.  Default: Uses existing setting. Constraints: The cluster parameter group
  must be in the same parameter group family that matches the cluster version.
- `cluster_security_groups`: A list of cluster security groups to be authorized on this
  cluster. This change is asynchronously applied as soon as possible. Security groups
  currently associated with the cluster, and not in the list of groups to apply, will be
  revoked from the cluster. Constraints:   Must be 1 to 255 alphanumeric characters or
  hyphens   First character must be a letter   Cannot end with a hyphen or contain two
  consecutive hyphens
- `cluster_type`: The new cluster type. When you submit your cluster resize request, your
  existing cluster goes into a read-only mode. After Amazon Redshift provisions a new cluster
  based on your resize requirements, there will be outage for a period while the old cluster
  is deleted and your connection is switched to the new cluster. You can use DescribeResize
  to track the progress of the resize request.  Valid Values:  multi-node | single-node
- `cluster_version`: The new version number of the Amazon Redshift engine to upgrade to.
  For major version upgrades, if a non-default cluster parameter group is currently in use, a
  new cluster parameter group in the cluster parameter group family for the new version must
  be specified. The new cluster parameter group can be the default for that cluster parameter
  group family. For more information about parameters and parameter groups, go to Amazon
  Redshift Parameter Groups in the Amazon Redshift Cluster Management Guide. Example: 1.0
- `elastic_ip`: The Elastic IP (EIP) address for the cluster. Constraints: The cluster must
  be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. For more
  information about provisioning clusters in EC2-VPC, go to Supported Platforms to Launch
  Your Cluster in the Amazon Redshift Cluster Management Guide.
- `encrypted`: Indicates whether the cluster is encrypted. If the value is encrypted (true)
  and you provide a value for the KmsKeyId parameter, we encrypt the cluster with the
  provided KmsKeyId. If you don't provide a KmsKeyId, we encrypt with the default key.  If
  the value is not encrypted (false), then the cluster is decrypted.
- `enhanced_vpc_routing`: An option that specifies whether to create the cluster with
  enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the
  cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon
  Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled.
   Default: false
- `hsm_client_certificate_identifier`: Specifies the name of the HSM client certificate the
  Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
- `hsm_configuration_identifier`: Specifies the name of the HSM configuration that contains
  the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
- `kms_key_id`: The Key Management Service (KMS) key ID of the encryption key that you want
  to use to encrypt data in the cluster.
- `maintenance_track_name`: The name for the maintenance track that you want to assign for
  the cluster. This name change is asynchronous. The new track name stays in the
  PendingModifiedValues for the cluster until the next maintenance window. When the
  maintenance track changes, the cluster is switched to the latest cluster release available
  for the maintenance track. At this point, the maintenance track name is applied.
- `manual_snapshot_retention_period`: The default for number of days that a newly created
  manual snapshot is retained. If the value is -1, the manual snapshot is retained
  indefinitely. This value doesn't retroactively change the retention periods of existing
  manual snapshots. The value must be either -1 or an integer between 1 and 3,653. The
  default value is -1.
- `master_user_password`: The new password for the cluster admin user. This change is
  asynchronously applied as soon as possible. Between the time of the request and the
  completion of the request, the MasterUserPassword element exists in the
  PendingModifiedValues element of the operation response.   Operations never return the
  password, so this operation provides a way to regain access to the admin user account for a
  cluster if the password is lost.  Default: Uses existing setting. Constraints:   Must be
  between 8 and 64 characters in length.   Must contain at least one uppercase letter.   Must
  contain at least one lowercase letter.   Must contain one number.   Can be any printable
  ASCII character (ASCII code 33 to 126) except ' (single quote), \" (double quote), , /, @,
  or space.
- `new_cluster_identifier`: The new identifier for the cluster. Constraints:   Must contain
  from 1 to 63 alphanumeric characters or hyphens.   Alphabetic characters must be lowercase.
    First character must be a letter.   Cannot end with a hyphen or contain two consecutive
  hyphens.   Must be unique for all clusters within an Amazon Web Services account.
  Example: examplecluster
- `node_type`: The new node type of the cluster. If you specify a new node type, you must
  also specify the number of nodes parameter.  For more information about resizing clusters,
  go to Resizing Clusters in Amazon Redshift in the Amazon Redshift Cluster Management Guide.
  Valid Values: ds2.xlarge | ds2.8xlarge | dc1.large | dc1.8xlarge | dc2.large | dc2.8xlarge
  | ra3.xlplus | ra3.4xlarge | ra3.16xlarge
- `number_of_nodes`: The new number of nodes of the cluster. If you specify a new number of
  nodes, you must also specify the node type parameter.  For more information about resizing
  clusters, go to Resizing Clusters in Amazon Redshift in the Amazon Redshift Cluster
  Management Guide. Valid Values: Integer greater than 0.
- `port`: The option to change the port of an Amazon Redshift cluster.
- `preferred_maintenance_window`: The weekly time range (in UTC) during which system
  maintenance can occur, if necessary. If system maintenance is necessary during the window,
  it may result in an outage. This maintenance window change is made immediately. If the new
  maintenance window indicates the current time, there must be at least 120 minutes between
  the current time and end of the window in order to ensure that pending changes are applied.
  Default: Uses existing setting. Format: ddd:hh24:mi-ddd:hh24:mi, for example
  wed:07:30-wed:08:00. Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Must
  be at least 30 minutes.
- `publicly_accessible`: If true, the cluster can be accessed from a public network. Only
  clusters in VPCs can be set to be publicly available.
- `vpc_security_group_ids`: A list of virtual private cloud (VPC) security groups to be
  associated with the cluster. This change is asynchronously applied as soon as possible.
"""
function modify_cluster(ClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("ModifyCluster", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterIdentifier"=>ClusterIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    modify_cluster_db_revision(cluster_identifier, revision_target; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Modifies the database revision of a cluster. The database revision is a unique revision of
the database running in a cluster.

# Arguments
- `cluster_identifier`: The unique identifier of a cluster whose database revision you want
  to modify.  Example: examplecluster
- `revision_target`: The identifier of the database revision. You can retrieve this value
  from the response to the DescribeClusterDbRevisions request.

"""
function modify_cluster_db_revision(ClusterIdentifier, RevisionTarget; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("ModifyClusterDbRevision", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterIdentifier"=>ClusterIdentifier, "RevisionTarget"=>RevisionTarget), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    modify_cluster_iam_roles(cluster_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Modifies the list of Identity and Access Management (IAM) roles that can be used by the
cluster to access other Amazon Web Services services. A cluster can have up to 10 IAM roles
associated at any time.

# Arguments
- `cluster_identifier`: The unique identifier of the cluster for which you want to
  associate or disassociate IAM roles.

# Keyword Parameters
- `add_iam_roles`: Zero or more IAM roles to associate with the cluster. The roles must be
  in their Amazon Resource Name (ARN) format. You can associate up to 10 IAM roles with a
  single cluster in a single request.
- `default_iam_role_arn`: The Amazon Resource Name (ARN) for the IAM role that was set as
  default for the cluster when the cluster was last modified.
- `remove_iam_roles`: Zero or more IAM roles in ARN format to disassociate from the
  cluster. You can disassociate up to 10 IAM roles from a single cluster in a single request.
"""
function modify_cluster_iam_roles(ClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("ModifyClusterIamRoles", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterIdentifier"=>ClusterIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    modify_cluster_maintenance(cluster_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Modifies the maintenance settings of a cluster.

# Arguments
- `cluster_identifier`: A unique identifier for the cluster.

# Keyword Parameters
- `defer_maintenance`: A boolean indicating whether to enable the deferred maintenance
  window.
- `defer_maintenance_duration`: An integer indicating the duration of the maintenance
  window in days. If you specify a duration, you can't specify an end time. The duration must
  be 45 days or less.
- `defer_maintenance_end_time`: A timestamp indicating end time for the deferred
  maintenance window. If you specify an end time, you can't specify a duration.
- `defer_maintenance_identifier`: A unique identifier for the deferred maintenance window.
- `defer_maintenance_start_time`: A timestamp indicating the start time for the deferred
  maintenance window.
"""
function modify_cluster_maintenance(ClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("ModifyClusterMaintenance", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterIdentifier"=>ClusterIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    modify_cluster_parameter_group(parameter, parameter_group_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Modifies the parameters of a parameter group. For the parameters parameter, it can't
contain ASCII characters.  For more information about parameters and parameter groups, go
to Amazon Redshift Parameter Groups in the Amazon Redshift Cluster Management Guide.

# Arguments
- `parameter`: An array of parameters to be modified. A maximum of 20 parameters can be
  modified in a single request. For each parameter to be modified, you must supply at least
  the parameter name and parameter value; other name-value pairs of the parameter are
  optional. For the workload management (WLM) configuration, you must supply all the
  name-value pairs in the wlm_json_configuration parameter.
- `parameter_group_name`: The name of the parameter group to be modified.

"""
function modify_cluster_parameter_group(Parameter, ParameterGroupName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("ModifyClusterParameterGroup", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Parameter"=>Parameter, "ParameterGroupName"=>ParameterGroupName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    modify_cluster_snapshot(snapshot_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Modifies the settings for a snapshot. This exanmple modifies the manual retention period
setting for a cluster snapshot.

# Arguments
- `snapshot_identifier`: The identifier of the snapshot whose setting you want to modify.

# Keyword Parameters
- `force`: A Boolean option to override an exception if the retention period has already
  passed.
- `manual_snapshot_retention_period`: The number of days that a manual snapshot is
  retained. If the value is -1, the manual snapshot is retained indefinitely. If the manual
  snapshot falls outside of the new retention period, you can specify the force option to
  immediately delete the snapshot. The value must be either -1 or an integer between 1 and
  3,653.
"""
function modify_cluster_snapshot(SnapshotIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("ModifyClusterSnapshot", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("SnapshotIdentifier"=>SnapshotIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    modify_cluster_snapshot_schedule(cluster_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Modifies a snapshot schedule for a cluster.

# Arguments
- `cluster_identifier`: A unique identifier for the cluster whose snapshot schedule you
  want to modify.

# Keyword Parameters
- `disassociate_schedule`: A boolean to indicate whether to remove the assoiciation between
  the cluster and the schedule.
- `schedule_identifier`: A unique alphanumeric identifier for the schedule that you want to
  associate with the cluster.
"""
function modify_cluster_snapshot_schedule(ClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("ModifyClusterSnapshotSchedule", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterIdentifier"=>ClusterIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    modify_cluster_subnet_group(cluster_subnet_group_name, subnet_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Modifies a cluster subnet group to include the specified list of VPC subnets. The operation
replaces the existing list of subnets with the new list of subnets.

# Arguments
- `cluster_subnet_group_name`: The name of the subnet group to be modified.
- `subnet_identifier`: An array of VPC subnet IDs. A maximum of 20 subnets can be modified
  in a single request.

# Keyword Parameters
- `description`: A text description of the subnet group to be modified.
"""
function modify_cluster_subnet_group(ClusterSubnetGroupName, SubnetIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("ModifyClusterSubnetGroup", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterSubnetGroupName"=>ClusterSubnetGroupName, "SubnetIdentifier"=>SubnetIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    modify_endpoint_access(endpoint_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Modifies a Redshift-managed VPC endpoint.

# Arguments
- `endpoint_name`: The endpoint to be modified.

# Keyword Parameters
- `vpc_security_group_ids`: The complete list of VPC security groups associated with the
  endpoint after the endpoint is modified.
"""
function modify_endpoint_access(EndpointName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("ModifyEndpointAccess", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("EndpointName"=>EndpointName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    modify_event_subscription(subscription_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Modifies an existing Amazon Redshift event notification subscription.

# Arguments
- `subscription_name`: The name of the modified Amazon Redshift event notification
  subscription.

# Keyword Parameters
- `enabled`: A Boolean value indicating if the subscription is enabled. true indicates the
  subscription is enabled
- `event_categories`: Specifies the Amazon Redshift event categories to be published by the
  event notification subscription. Values: configuration, management, monitoring, security,
  pending
- `severity`: Specifies the Amazon Redshift event severity to be published by the event
  notification subscription. Values: ERROR, INFO
- `sns_topic_arn`: The Amazon Resource Name (ARN) of the SNS topic to be used by the event
  notification subscription.
- `source_ids`: A list of one or more identifiers of Amazon Redshift source objects. All of
  the objects must be of the same type as was specified in the source type parameter. The
  event subscription will return only events generated by the specified objects. If not
  specified, then events are returned for all objects within the source type specified.
  Example: my-cluster-1, my-cluster-2 Example: my-snapshot-20131010
- `source_type`: The type of source that will be generating the events. For example, if you
  want to be notified of events generated by a cluster, you would set this parameter to
  cluster. If this value is not specified, events are returned for all Amazon Redshift
  objects in your Amazon Web Services account. You must specify a source type in order to
  specify source IDs. Valid values: cluster, cluster-parameter-group, cluster-security-group,
  cluster-snapshot, and scheduled-action.
"""
function modify_event_subscription(SubscriptionName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("ModifyEventSubscription", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("SubscriptionName"=>SubscriptionName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    modify_scheduled_action(scheduled_action_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Modifies a scheduled action.

# Arguments
- `scheduled_action_name`: The name of the scheduled action to modify.

# Keyword Parameters
- `enable`: A modified enable flag of the scheduled action. If true, the scheduled action
  is active. If false, the scheduled action is disabled.
- `end_time`: A modified end time of the scheduled action. For more information about this
  parameter, see ScheduledAction.
- `iam_role`: A different IAM role to assume to run the target action. For more information
  about this parameter, see ScheduledAction.
- `schedule`: A modified schedule in either at( ) or cron( ) format. For more information
  about this parameter, see ScheduledAction.
- `scheduled_action_description`: A modified description of the scheduled action.
- `start_time`: A modified start time of the scheduled action. For more information about
  this parameter, see ScheduledAction.
- `target_action`: A modified JSON format of the scheduled action. For more information
  about this parameter, see ScheduledAction.
"""
function modify_scheduled_action(ScheduledActionName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("ModifyScheduledAction", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ScheduledActionName"=>ScheduledActionName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    modify_snapshot_copy_retention_period(cluster_identifier, retention_period; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Modifies the number of days to retain snapshots in the destination Amazon Web Services
Region after they are copied from the source Amazon Web Services Region. By default, this
operation only changes the retention period of copied automated snapshots. The retention
periods for both new and existing copied automated snapshots are updated with the new
retention period. You can set the manual option to change only the retention periods of
copied manual snapshots. If you set this option, only newly copied manual snapshots have
the new retention period.

# Arguments
- `cluster_identifier`: The unique identifier of the cluster for which you want to change
  the retention period for either automated or manual snapshots that are copied to a
  destination Amazon Web Services Region. Constraints: Must be the valid name of an existing
  cluster that has cross-region snapshot copy enabled.
- `retention_period`: The number of days to retain automated snapshots in the destination
  Amazon Web Services Region after they are copied from the source Amazon Web Services
  Region. By default, this only changes the retention period of copied automated snapshots.
  If you decrease the retention period for automated snapshots that are copied to a
  destination Amazon Web Services Region, Amazon Redshift deletes any existing automated
  snapshots that were copied to the destination Amazon Web Services Region and that fall
  outside of the new retention period. Constraints: Must be at least 1 and no more than 35
  for automated snapshots.  If you specify the manual option, only newly copied manual
  snapshots will have the new retention period.  If you specify the value of -1 newly copied
  manual snapshots are retained indefinitely. Constraints: The number of days must be either
  -1 or an integer between 1 and 3,653 for manual snapshots.

# Keyword Parameters
- `manual`: Indicates whether to apply the snapshot retention period to newly copied manual
  snapshots instead of automated snapshots.
"""
function modify_snapshot_copy_retention_period(ClusterIdentifier, RetentionPeriod; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("ModifySnapshotCopyRetentionPeriod", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterIdentifier"=>ClusterIdentifier, "RetentionPeriod"=>RetentionPeriod), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    modify_snapshot_schedule(schedule_definition, schedule_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Modifies a snapshot schedule. Any schedule associated with a cluster is modified
asynchronously.

# Arguments
- `schedule_definition`: An updated list of schedule definitions. A schedule definition is
  made up of schedule expressions, for example, \"cron(30 12 *)\" or \"rate(12 hours)\".
- `schedule_identifier`: A unique alphanumeric identifier of the schedule to modify.

"""
function modify_snapshot_schedule(ScheduleDefinition, ScheduleIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("ModifySnapshotSchedule", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ScheduleDefinition"=>ScheduleDefinition, "ScheduleIdentifier"=>ScheduleIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    modify_usage_limit(usage_limit_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Modifies a usage limit in a cluster. You can't modify the feature type or period of a usage
limit.

# Arguments
- `usage_limit_id`: The identifier of the usage limit to modify.

# Keyword Parameters
- `amount`: The new limit amount. For more information about this parameter, see
  UsageLimit.
- `breach_action`: The new action that Amazon Redshift takes when the limit is reached. For
  more information about this parameter, see UsageLimit.
"""
function modify_usage_limit(UsageLimitId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("ModifyUsageLimit", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("UsageLimitId"=>UsageLimitId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    pause_cluster(cluster_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Pauses a cluster.

# Arguments
- `cluster_identifier`: The identifier of the cluster to be paused.

"""
function pause_cluster(ClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("PauseCluster", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterIdentifier"=>ClusterIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    purchase_reserved_node_offering(reserved_node_offering_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Allows you to purchase reserved nodes. Amazon Redshift offers a predefined set of reserved
node offerings. You can purchase one or more of the offerings. You can call the
DescribeReservedNodeOfferings API to obtain the available reserved node offerings. You can
call this API by providing a specific reserved node offering and the number of nodes you
want to reserve.   For more information about reserved node offerings, go to Purchasing
Reserved Nodes in the Amazon Redshift Cluster Management Guide.

# Arguments
- `reserved_node_offering_id`: The unique identifier of the reserved node offering you want
  to purchase.

# Keyword Parameters
- `node_count`: The number of reserved nodes that you want to purchase. Default: 1
"""
function purchase_reserved_node_offering(ReservedNodeOfferingId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("PurchaseReservedNodeOffering", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ReservedNodeOfferingId"=>ReservedNodeOfferingId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    reboot_cluster(cluster_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Reboots a cluster. This action is taken as soon as possible. It results in a momentary
outage to the cluster, during which the cluster status is set to rebooting. A cluster event
is created when the reboot is completed. Any pending cluster modifications (see
ModifyCluster) are applied at this reboot. For more information about managing clusters, go
to Amazon Redshift Clusters in the Amazon Redshift Cluster Management Guide.

# Arguments
- `cluster_identifier`: The cluster identifier.

"""
function reboot_cluster(ClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("RebootCluster", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterIdentifier"=>ClusterIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    reject_data_share(data_share_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

From the consumer account, rejects the specified datashare.

# Arguments
- `data_share_arn`: The Amazon Resource Name (ARN) of the datashare to reject.

"""
function reject_data_share(DataShareArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("RejectDataShare", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("DataShareArn"=>DataShareArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    reset_cluster_parameter_group(parameter_group_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Sets one or more parameters of the specified parameter group to their default values and
sets the source values of the parameters to \"engine-default\". To reset the entire
parameter group specify the ResetAllParameters parameter. For parameter changes to take
effect you must reboot any associated clusters.

# Arguments
- `parameter_group_name`: The name of the cluster parameter group to be reset.

# Keyword Parameters
- `parameters`: An array of names of parameters to be reset. If ResetAllParameters option
  is not used, then at least one parameter name must be supplied.  Constraints: A maximum of
  20 parameters can be reset in a single request.
- `reset_all_parameters`: If true, all parameters in the specified parameter group will be
  reset to their default values.  Default: true
"""
function reset_cluster_parameter_group(ParameterGroupName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("ResetClusterParameterGroup", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ParameterGroupName"=>ParameterGroupName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    resize_cluster(cluster_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Changes the size of the cluster. You can change the cluster's type, or change the number or
type of nodes. The default behavior is to use the elastic resize method. With an elastic
resize, your cluster is available for read and write operations more quickly than with the
classic resize method.  Elastic resize operations have the following restrictions:   You
can only resize clusters of the following types:   dc1.large (if your cluster is in a VPC)
 dc1.8xlarge (if your cluster is in a VPC)   dc2.large   dc2.8xlarge   ds2.xlarge
ds2.8xlarge   ra3.xlplus   ra3.4xlarge   ra3.16xlarge     The type of nodes that you add
must match the node type for the cluster.

# Arguments
- `cluster_identifier`: The unique identifier for the cluster to resize.

# Keyword Parameters
- `classic`: A boolean value indicating whether the resize operation is using the classic
  resize process. If you don't provide this parameter or set the value to false, the resize
  type is elastic.
- `cluster_type`: The new cluster type for the specified cluster.
- `node_type`: The new node type for the nodes you are adding. If not specified, the
  cluster's current node type is used.
- `number_of_nodes`: The new number of nodes for the cluster. If not specified, the
  cluster's current number of nodes is used.
"""
function resize_cluster(ClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("ResizeCluster", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterIdentifier"=>ClusterIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    restore_from_cluster_snapshot(cluster_identifier, snapshot_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a new cluster from a snapshot. By default, Amazon Redshift creates the resulting
cluster with the same configuration as the original cluster from which the snapshot was
created, except that the new cluster is created with the default cluster security and
parameter groups. After Amazon Redshift creates the cluster, you can use the ModifyCluster
API to associate a different security group and different parameter group with the restored
cluster. If you are using a DS node type, you can also choose to change to another DS node
type of the same size during restore. If you restore a cluster into a VPC, you must provide
a cluster subnet group where you want the cluster restored.  For more information about
working with snapshots, go to Amazon Redshift Snapshots in the Amazon Redshift Cluster
Management Guide.

# Arguments
- `cluster_identifier`: The identifier of the cluster that will be created from restoring
  the snapshot. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.
   Alphabetic characters must be lowercase.   First character must be a letter.   Cannot end
  with a hyphen or contain two consecutive hyphens.   Must be unique for all clusters within
  an Amazon Web Services account.
- `snapshot_identifier`: The name of the snapshot from which to create the new cluster.
  This parameter isn't case sensitive. Example: my-snapshot-id

# Keyword Parameters
- `additional_info`: Reserved.
- `allow_version_upgrade`: If true, major version upgrades can be applied during the
  maintenance window to the Amazon Redshift engine that is running on the cluster.  Default:
  true
- `aqua_configuration_status`: The value represents how the cluster is configured to use
  AQUA (Advanced Query Accelerator) after the cluster is restored. Possible values include
  the following.   enabled - Use AQUA if it is available for the current Amazon Web Services
  Region and Amazon Redshift node type.   disabled - Don't use AQUA.    auto - Amazon
  Redshift determines whether to use AQUA.
- `automated_snapshot_retention_period`: The number of days that automated snapshots are
  retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots
  are disabled, you can still create manual snapshots when you want with
  CreateClusterSnapshot.  You can't disable automated snapshots for RA3 node types. Set the
  automated retention period from 1-35 days. Default: The value selected for the cluster from
  which the snapshot was taken. Constraints: Must be a value from 0 to 35.
- `availability_zone`: The Amazon EC2 Availability Zone in which to restore the cluster.
  Default: A random, system-chosen Availability Zone. Example: us-east-2a
- `availability_zone_relocation`: The option to enable relocation for an Amazon Redshift
  cluster between Availability Zones after the cluster is restored.
- `cluster_parameter_group_name`: The name of the parameter group to be associated with
  this cluster. Default: The default Amazon Redshift cluster parameter group. For information
  about the default parameter group, go to Working with Amazon Redshift Parameter Groups.
  Constraints:   Must be 1 to 255 alphanumeric characters or hyphens.   First character must
  be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.
- `cluster_security_groups`: A list of security groups to be associated with this cluster.
  Default: The default cluster security group for Amazon Redshift. Cluster security groups
  only apply to clusters outside of VPCs.
- `cluster_subnet_group_name`: The name of the subnet group where you want to cluster
  restored. A snapshot of cluster in VPC can be restored only in VPC. Therefore, you must
  provide subnet group name where you want the cluster restored.
- `default_iam_role_arn`: The Amazon Resource Name (ARN) for the IAM role that was set as
  default for the cluster when the cluster was last modified while it was restored from a
  snapshot.
- `elastic_ip`: The elastic IP (EIP) address for the cluster.
- `enhanced_vpc_routing`: An option that specifies whether to create the cluster with
  enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the
  cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon
  Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled.
   Default: false
- `hsm_client_certificate_identifier`: Specifies the name of the HSM client certificate the
  Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
- `hsm_configuration_identifier`: Specifies the name of the HSM configuration that contains
  the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
- `iam_roles`: A list of Identity and Access Management (IAM) roles that can be used by the
  cluster to access other Amazon Web Services services. You must supply the IAM roles in
  their Amazon Resource Name (ARN) format. You can supply up to 10 IAM roles in a single
  request. A cluster can have up to 10 IAM roles associated at any time.
- `kms_key_id`: The Key Management Service (KMS) key ID of the encryption key that you want
  to use to encrypt data in the cluster that you restore from a shared snapshot.
- `maintenance_track_name`: The name of the maintenance track for the restored cluster.
  When you take a snapshot, the snapshot inherits the MaintenanceTrack value from the
  cluster. The snapshot might be on a different track than the cluster that was the source
  for the snapshot. For example, suppose that you take a snapshot of a cluster that is on the
  current track and then change the cluster to be on the trailing track. In this case, the
  snapshot and the source cluster are on different tracks.
- `manual_snapshot_retention_period`: The default number of days to retain a manual
  snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't
  change the retention period of existing snapshots. The value must be either -1 or an
  integer between 1 and 3,653.
- `node_type`: The node type that the restored cluster will be provisioned with. Default:
  The node type of the cluster from which the snapshot was taken. You can modify this if you
  are using any DS node type. In that case, you can choose to restore into another DS node
  type of the same size. For example, you can restore ds1.8xlarge into ds2.8xlarge, or
  ds1.xlarge into ds2.xlarge. If you have a DC instance type, you must restore into that same
  instance type and size. In other words, you can only restore a dc1.large instance type into
  another dc1.large instance type or dc2.large instance type. You can't restore dc1.8xlarge
  to dc2.8xlarge. First restore to a dc1.8xlarge cluster, then resize to a dc2.8large
  cluster. For more information about node types, see  About Clusters and Nodes in the Amazon
  Redshift Cluster Management Guide.
- `number_of_nodes`: The number of nodes specified when provisioning the restored cluster.
- `owner_account`: The Amazon Web Services account used to create or copy the snapshot.
  Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
- `port`: The port number on which the cluster accepts connections. Default: The same port
  as the original cluster. Constraints: Must be between 1115 and 65535.
- `preferred_maintenance_window`: The weekly time range (in UTC) during which automated
  cluster maintenance can occur.  Format: ddd:hh24:mi-ddd:hh24:mi   Default: The value
  selected for the cluster from which the snapshot was taken. For more information about the
  time blocks for each region, see Maintenance Windows in Amazon Redshift Cluster Management
  Guide.  Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Minimum 30-minute
  window.
- `publicly_accessible`: If true, the cluster can be accessed from a public network.
- `snapshot_cluster_identifier`: The name of the cluster the source snapshot was created
  from. This parameter is required if your IAM user has a policy containing a snapshot
  resource element that specifies anything other than * for the cluster name.
- `snapshot_schedule_identifier`: A unique identifier for the snapshot schedule.
- `vpc_security_group_ids`: A list of Virtual Private Cloud (VPC) security groups to be
  associated with the cluster. Default: The default VPC security group is associated with the
  cluster. VPC security groups only apply to clusters in VPCs.
"""
function restore_from_cluster_snapshot(ClusterIdentifier, SnapshotIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("RestoreFromClusterSnapshot", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterIdentifier"=>ClusterIdentifier, "SnapshotIdentifier"=>SnapshotIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    restore_table_from_cluster_snapshot(cluster_identifier, new_table_name, snapshot_identifier, source_database_name, source_table_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a new table from a table in an Amazon Redshift cluster snapshot. You must create
the new table within the Amazon Redshift cluster that the snapshot was taken from. You
cannot use RestoreTableFromClusterSnapshot to restore a table with the same name as an
existing table in an Amazon Redshift cluster. That is, you cannot overwrite an existing
table in a cluster with a restored table. If you want to replace your original table with a
new, restored table, then rename or drop your original table before you call
RestoreTableFromClusterSnapshot. When you have renamed your original table, then you can
pass the original name of the table as the NewTableName parameter value in the call to
RestoreTableFromClusterSnapshot. This way, you can replace the original table with the
table created from the snapshot.

# Arguments
- `cluster_identifier`: The identifier of the Amazon Redshift cluster to restore the table
  to.
- `new_table_name`: The name of the table to create as a result of the current request.
- `snapshot_identifier`: The identifier of the snapshot to restore the table from. This
  snapshot must have been created from the Amazon Redshift cluster specified by the
  ClusterIdentifier parameter.
- `source_database_name`: The name of the source database that contains the table to
  restore from.
- `source_table_name`: The name of the source table to restore from.

# Keyword Parameters
- `enable_case_sensitive_identifier`: Indicates whether name identifiers for database,
  schema, and table are case sensitive. If true, the names are case sensitive. If false
  (default), the names are not case sensitive.
- `source_schema_name`: The name of the source schema that contains the table to restore
  from. If you do not specify a SourceSchemaName value, the default is public.
- `target_database_name`: The name of the database to restore the table to.
- `target_schema_name`: The name of the schema to restore the table to.
"""
function restore_table_from_cluster_snapshot(ClusterIdentifier, NewTableName, SnapshotIdentifier, SourceDatabaseName, SourceTableName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("RestoreTableFromClusterSnapshot", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterIdentifier"=>ClusterIdentifier, "NewTableName"=>NewTableName, "SnapshotIdentifier"=>SnapshotIdentifier, "SourceDatabaseName"=>SourceDatabaseName, "SourceTableName"=>SourceTableName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    resume_cluster(cluster_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Resumes a paused cluster.

# Arguments
- `cluster_identifier`: The identifier of the cluster to be resumed.

"""
function resume_cluster(ClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("ResumeCluster", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterIdentifier"=>ClusterIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    revoke_cluster_security_group_ingress(cluster_security_group_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Revokes an ingress rule in an Amazon Redshift security group for a previously authorized IP
range or Amazon EC2 security group. To add an ingress rule, see
AuthorizeClusterSecurityGroupIngress. For information about managing security groups, go to
Amazon Redshift Cluster Security Groups in the Amazon Redshift Cluster Management Guide.

# Arguments
- `cluster_security_group_name`: The name of the security Group from which to revoke the
  ingress rule.

# Keyword Parameters
- `cidrip`: The IP range for which to revoke access. This range must be a valid Classless
  Inter-Domain Routing (CIDR) block of IP addresses. If CIDRIP is specified,
  EC2SecurityGroupName and EC2SecurityGroupOwnerId cannot be provided.
- `ec2_security_group_name`: The name of the EC2 Security Group whose access is to be
  revoked. If EC2SecurityGroupName is specified, EC2SecurityGroupOwnerId must also be
  provided and CIDRIP cannot be provided.
- `ec2_security_group_owner_id`: The Amazon Web Services account number of the owner of the
  security group specified in the EC2SecurityGroupName parameter. The Amazon Web Services
  access key ID is not an acceptable value. If EC2SecurityGroupOwnerId is specified,
  EC2SecurityGroupName must also be provided. and CIDRIP cannot be provided.  Example:
  111122223333
"""
function revoke_cluster_security_group_ingress(ClusterSecurityGroupName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("RevokeClusterSecurityGroupIngress", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterSecurityGroupName"=>ClusterSecurityGroupName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    revoke_endpoint_access(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Revokes access to a cluster.

# Keyword Parameters
- `account`: The Amazon Web Services account ID whose access is to be revoked.
- `cluster_identifier`: The cluster to revoke access from.
- `force`: Indicates whether to force the revoke action. If true, the Redshift-managed VPC
  endpoints associated with the endpoint authorization are also deleted.
- `vpc_ids`: The virtual private cloud (VPC) identifiers for which access is to be revoked.
"""
function revoke_endpoint_access(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("RevokeEndpointAccess", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    revoke_snapshot_access(account_with_restore_access, snapshot_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes the ability of the specified Amazon Web Services account to restore the specified
snapshot. If the account is currently restoring the snapshot, the restore will run to
completion.  For more information about working with snapshots, go to Amazon Redshift
Snapshots in the Amazon Redshift Cluster Management Guide.

# Arguments
- `account_with_restore_access`: The identifier of the Amazon Web Services account that can
  no longer restore the specified snapshot.
- `snapshot_identifier`: The identifier of the snapshot that the account can no longer
  access.

# Keyword Parameters
- `snapshot_cluster_identifier`: The identifier of the cluster the snapshot was created
  from. This parameter is required if your IAM user has a policy containing a snapshot
  resource element that specifies anything other than * for the cluster name.
"""
function revoke_snapshot_access(AccountWithRestoreAccess, SnapshotIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("RevokeSnapshotAccess", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("AccountWithRestoreAccess"=>AccountWithRestoreAccess, "SnapshotIdentifier"=>SnapshotIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    rotate_encryption_key(cluster_identifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Rotates the encryption keys for a cluster.

# Arguments
- `cluster_identifier`: The unique identifier of the cluster that you want to rotate the
  encryption keys for. Constraints: Must be the name of valid cluster that has encryption
  enabled.

"""
function rotate_encryption_key(ClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("RotateEncryptionKey", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClusterIdentifier"=>ClusterIdentifier), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_partner_status(account_id, cluster_identifier, database_name, partner_name, status; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the status of a partner integration.

# Arguments
- `account_id`: The Amazon Web Services account ID that owns the cluster.
- `cluster_identifier`: The cluster identifier of the cluster whose partner integration
  status is being updated.
- `database_name`: The name of the database whose partner integration status is being
  updated.
- `partner_name`: The name of the partner whose integration status is being updated.
- `status`: The value of the updated status.

# Keyword Parameters
- `status_message`: The status message provided by the partner.
"""
function update_partner_status(AccountId, ClusterIdentifier, DatabaseName, PartnerName, Status; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return redshift("UpdatePartnerStatus", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("AccountId"=>AccountId, "ClusterIdentifier"=>ClusterIdentifier, "DatabaseName"=>DatabaseName, "PartnerName"=>PartnerName, "Status"=>Status), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
