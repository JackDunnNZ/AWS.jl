# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: groundstation
using AWS.Compat
using AWS.UUIDs

MAPPING = Dict(
    "contact_post_pass_duration_seconds" => "contactPostPassDurationSeconds",
    "next_token" => "nextToken",
    "ground_station" => "groundStation",
    "name" => "name",
    "dataflow_edges" => "dataflowEdges",
    "mission_profile_arn" => "missionProfileArn",
    "max_results" => "maxResults",
    "tracking_config_arn" => "trackingConfigArn",
    "contact_pre_pass_duration_seconds" => "contactPrePassDurationSeconds",
    "minimum_viable_contact_duration_seconds" => "minimumViableContactDurationSeconds",
    "satellite_arn" => "satelliteArn",
    "satellite_id" => "satelliteId",
    "tags" => "tags",
)

"""
    cancel_contact(contact_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Cancels a contact with a specified contact ID.

# Arguments
- `contact_id`: UUID of a contact.

"""
function cancel_contact(
    contactId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return groundstation(
        "DELETE",
        "/contact/$(contactId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_config(config_data, name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a Config with the specified configData parameters. Only one type of configData can
be specified.

# Arguments
- `config_data`: Parameters of a Config.
- `name`: Name of a Config.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"tags"`: Tags assigned to a Config.
"""
function create_config(
    configData, name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return groundstation(
        "POST",
        "/config",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("configData" => configData, "name" => name), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_dataflow_endpoint_group(endpoint_details; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a DataflowEndpoint group containing the specified list of DataflowEndpoint objects.
The name field in each endpoint is used in your mission profile DataflowEndpointConfig to
specify which endpoints to use during a contact. When a contact uses multiple
DataflowEndpointConfig objects, each Config must match a DataflowEndpoint in the same group.

# Arguments
- `endpoint_details`: Endpoint details of each endpoint in the dataflow endpoint group.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"tags"`: Tags of a dataflow endpoint group.
"""
function create_dataflow_endpoint_group(
    endpointDetails; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return groundstation(
        "POST",
        "/dataflowEndpointGroup",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("endpointDetails" => endpointDetails), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_mission_profile(dataflow_edges, minimum_viable_contact_duration_seconds, name, tracking_config_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a mission profile.  dataflowEdges is a list of lists of strings. Each lower level
list of strings has two elements: a from ARN and a to ARN.

# Arguments
- `dataflow_edges`: A list of lists of ARNs. Each list of ARNs is an edge, with a from
  Config and a to Config.
- `minimum_viable_contact_duration_seconds`: Smallest amount of time in seconds that
  you’d like to see for an available contact. AWS Ground Station will not present you with
  contacts shorter than this duration.
- `name`: Name of a mission profile.
- `tracking_config_arn`: ARN of a tracking Config.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"contact_post_pass_duration_seconds"`: Amount of time after a contact ends that you’d
  like to receive a CloudWatch event indicating the pass has finished.
- `"contact_pre_pass_duration_seconds"`: Amount of time prior to contact start you’d like
  to receive a CloudWatch event indicating an upcoming pass.
- `"tags"`: Tags assigned to a mission profile.
"""
function create_mission_profile(
    dataflowEdges,
    minimumViableContactDurationSeconds,
    name,
    trackingConfigArn;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return groundstation(
        "POST",
        "/missionprofile",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "dataflowEdges" => dataflowEdges,
                    "minimumViableContactDurationSeconds" =>
                        minimumViableContactDurationSeconds,
                    "name" => name,
                    "trackingConfigArn" => trackingConfigArn,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_config(config_id, config_type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a Config.

# Arguments
- `config_id`: UUID of a Config.
- `config_type`: Type of a Config.

"""
function delete_config(
    configId, configType; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return groundstation(
        "DELETE",
        "/config/$(configType)/$(configId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_dataflow_endpoint_group(dataflow_endpoint_group_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a dataflow endpoint group.

# Arguments
- `dataflow_endpoint_group_id`: UUID of a dataflow endpoint group.

"""
function delete_dataflow_endpoint_group(
    dataflowEndpointGroupId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return groundstation(
        "DELETE",
        "/dataflowEndpointGroup/$(dataflowEndpointGroupId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_mission_profile(mission_profile_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a mission profile.

# Arguments
- `mission_profile_id`: UUID of a mission profile.

"""
function delete_mission_profile(
    missionProfileId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return groundstation(
        "DELETE",
        "/missionprofile/$(missionProfileId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_contact(contact_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Describes an existing contact.

# Arguments
- `contact_id`: UUID of a contact.

"""
function describe_contact(
    contactId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return groundstation(
        "GET",
        "/contact/$(contactId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_config(config_id, config_type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns Config information. Only one Config response can be returned.

# Arguments
- `config_id`: UUID of a Config.
- `config_type`: Type of a Config.

"""
function get_config(
    configId, configType; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return groundstation(
        "GET",
        "/config/$(configType)/$(configId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_dataflow_endpoint_group(dataflow_endpoint_group_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns the dataflow endpoint group.

# Arguments
- `dataflow_endpoint_group_id`: UUID of a dataflow endpoint group.

"""
function get_dataflow_endpoint_group(
    dataflowEndpointGroupId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return groundstation(
        "GET",
        "/dataflowEndpointGroup/$(dataflowEndpointGroupId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_minute_usage(month, year; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns the number of minutes used by account.

# Arguments
- `month`: The month being requested, with a value of 1-12.
- `year`: The year being requested, in the format of YYYY.

"""
function get_minute_usage(
    month, year; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return groundstation(
        "POST",
        "/minute-usage",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("month" => month, "year" => year), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_mission_profile(mission_profile_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a mission profile.

# Arguments
- `mission_profile_id`: UUID of a mission profile.

"""
function get_mission_profile(
    missionProfileId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return groundstation(
        "GET",
        "/missionprofile/$(missionProfileId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_satellite(satellite_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a satellite.

# Arguments
- `satellite_id`: UUID of a satellite.

"""
function get_satellite(
    satelliteId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return groundstation(
        "GET",
        "/satellite/$(satelliteId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_configs(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of Config objects.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`: Maximum number of Configs returned.
- `"next_token"`: Next token returned in the request of a previous ListConfigs call. Used
  to get the next page of results.
"""
function list_configs(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return groundstation(
        "GET", "/config", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_contacts(end_time, start_time, status_list; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of contacts. If statusList contains AVAILABLE, the request must include
groundStation, missionprofileArn, and satelliteArn.

# Arguments
- `end_time`: End time of a contact.
- `start_time`: Start time of a contact.
- `status_list`: Status of a contact reservation.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"ground_station"`: Name of a ground station.
- `"max_results"`: Maximum number of contacts returned.
- `"mission_profile_arn"`: ARN of a mission profile.
- `"next_token"`: Next token returned in the request of a previous ListContacts call. Used
  to get the next page of results.
- `"satellite_arn"`: ARN of a satellite.
"""
function list_contacts(
    endTime,
    startTime,
    statusList;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return groundstation(
        "POST",
        "/contacts",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "endTime" => endTime,
                    "startTime" => startTime,
                    "statusList" => statusList,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_dataflow_endpoint_groups(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of DataflowEndpoint groups.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`: Maximum number of dataflow endpoint groups returned.
- `"next_token"`: Next token returned in the request of a previous
  ListDataflowEndpointGroups call. Used to get the next page of results.
"""
function list_dataflow_endpoint_groups(;
    aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return groundstation(
        "GET",
        "/dataflowEndpointGroup",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_ground_stations(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of ground stations.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`: Maximum number of ground stations returned.
- `"next_token"`: Next token that can be supplied in the next call to get the next page of
  ground stations.
- `"satellite_id"`: Satellite ID to retrieve on-boarded ground stations.
"""
function list_ground_stations(;
    aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return groundstation(
        "GET",
        "/groundstation",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_mission_profiles(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of mission profiles.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`: Maximum number of mission profiles returned.
- `"next_token"`: Next token returned in the request of a previous ListMissionProfiles
  call. Used to get the next page of results.
"""
function list_mission_profiles(;
    aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return groundstation(
        "GET",
        "/missionprofile",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_satellites(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of satellites.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"max_results"`: Maximum number of satellites returned.
- `"next_token"`: Next token that can be supplied in the next call to get the next page of
  satellites.
"""
function list_satellites(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return groundstation(
        "GET", "/satellite", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_tags_for_resource(resource_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of tags for a specified resource.

# Arguments
- `resource_arn`: ARN of a resource.

"""
function list_tags_for_resource(
    resourceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return groundstation(
        "GET",
        "/tags/$(resourceArn)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    reserve_contact(end_time, ground_station, mission_profile_arn, satellite_arn, start_time; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Reserves a contact using specified parameters.

# Arguments
- `end_time`: End time of a contact.
- `ground_station`: Name of a ground station.
- `mission_profile_arn`: ARN of a mission profile.
- `satellite_arn`: ARN of a satellite
- `start_time`: Start time of a contact.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"tags"`: Tags assigned to a contact.
"""
function reserve_contact(
    endTime,
    groundStation,
    missionProfileArn,
    satelliteArn,
    startTime;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return groundstation(
        "POST",
        "/contact",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "endTime" => endTime,
                    "groundStation" => groundStation,
                    "missionProfileArn" => missionProfileArn,
                    "satelliteArn" => satelliteArn,
                    "startTime" => startTime,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    tag_resource(resource_arn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Assigns a tag to a resource.

# Arguments
- `resource_arn`: ARN of a resource tag.
- `tags`: Tags assigned to a resource.

"""
function tag_resource(
    resourceArn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return groundstation(
        "POST",
        "/tags/$(resourceArn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("tags" => tags), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    untag_resource(resource_arn, tag_keys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deassigns a resource tag.

# Arguments
- `resource_arn`: ARN of a resource.
- `tag_keys`: Keys of a resource tag.

"""
function untag_resource(
    resourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return groundstation(
        "DELETE",
        "/tags/$(resourceArn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("tagKeys" => tagKeys), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_config(config_data, config_id, config_type, name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the Config used when scheduling contacts. Updating a Config will not update the
execution parameters for existing future contacts scheduled with this Config.

# Arguments
- `config_data`: Parameters of a Config.
- `config_id`: UUID of a Config.
- `config_type`: Type of a Config.
- `name`: Name of a Config.

"""
function update_config(
    configData,
    configId,
    configType,
    name;
    aws_config::AbstractAWSConfig=global_aws_config(),
    kwargs...,
)
    params = amazonify(MAPPING, kwargs)
    return groundstation(
        "PUT",
        "/config/$(configType)/$(configId)",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("configData" => configData, "name" => name), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_mission_profile(mission_profile_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates a mission profile. Updating a mission profile will not update the execution
parameters for existing future contacts.

# Arguments
- `mission_profile_id`: UUID of a mission profile.

# Optional Parameters
Optional parameters can be passed as a keyword argument. Valid keys are:
- `"contact_post_pass_duration_seconds"`: Amount of time after a contact ends that you’d
  like to receive a CloudWatch event indicating the pass has finished.
- `"contact_pre_pass_duration_seconds"`: Amount of time after a contact ends that you’d
  like to receive a CloudWatch event indicating the pass has finished.
- `"dataflow_edges"`: A list of lists of ARNs. Each list of ARNs is an edge, with a from
  Config and a to Config.
- `"minimum_viable_contact_duration_seconds"`: Smallest amount of time in seconds that
  you’d like to see for an available contact. AWS Ground Station will not present you with
  contacts shorter than this duration.
- `"name"`: Name of a mission profile.
- `"tracking_config_arn"`: ARN of a tracking Config.
"""
function update_mission_profile(
    missionProfileId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...
)
    params = amazonify(MAPPING, kwargs)
    return groundstation(
        "PUT",
        "/missionprofile/$(missionProfileId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
