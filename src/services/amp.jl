# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: amp
using AWS.Compat
using AWS.UUIDs

# Julia syntax for service-level optional parameters to the AWS request syntax
const SERVICE_PARAMETER_MAP = OrderedCollections.LittleDict("alias" => "alias", "max_results" => "maxResults", "next_token" => "nextToken", "client_token" => "clientToken", "tags" => "tags", "name" => "name")

"""
    create_alert_manager_definition(data, workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Create an alert manager definition.

# Arguments
- `data`: The alert manager definition data.
- `workspace_id`: The ID of the workspace in which to create the alert manager definition.

# Keyword Parameters
- `client_token`: Optional, unique, case-sensitive, user-provided identifier to ensure the
  idempotency of the request.
"""
function create_alert_manager_definition(data, workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return amp("POST", "/workspaces/$(workspaceId)/alertmanager/definition", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("data"=>data, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_rule_groups_namespace(data, name, workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Create a rule group namespace.

# Arguments
- `data`: The namespace data that define the rule groups.
- `name`: The rule groups namespace name.
- `workspace_id`: The ID of the workspace in which to create the rule group namespace.

# Keyword Parameters
- `client_token`: Optional, unique, case-sensitive, user-provided identifier to ensure the
  idempotency of the request.
- `tags`: Optional, user-provided tags for this rule groups namespace.
"""
function create_rule_groups_namespace(data, name, workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return amp("POST", "/workspaces/$(workspaceId)/rulegroupsnamespaces", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("data"=>data, "name"=>name, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_workspace(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a new AMP workspace.

# Keyword Parameters
- `alias`: An optional user-assigned alias for this workspace. This alias is for user
  reference and does not need to be unique.
- `client_token`: Optional, unique, case-sensitive, user-provided identifier to ensure the
  idempotency of the request.
- `tags`: Optional, user-provided tags for this workspace.
"""
function create_workspace(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return amp("POST", "/workspaces", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_alert_manager_definition(workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes an alert manager definition.

# Arguments
- `workspace_id`: The ID of the workspace in which to delete the alert manager definition.

# Keyword Parameters
- `client_token`: Optional, unique, case-sensitive, user-provided identifier to ensure the
  idempotency of the request.
"""
function delete_alert_manager_definition(workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return amp("DELETE", "/workspaces/$(workspaceId)/alertmanager/definition", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_rule_groups_namespace(name, workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Delete a rule groups namespace.

# Arguments
- `name`: The rule groups namespace name.
- `workspace_id`: The ID of the workspace to delete rule group definition.

# Keyword Parameters
- `client_token`: Optional, unique, case-sensitive, user-provided identifier to ensure the
  idempotency of the request.
"""
function delete_rule_groups_namespace(name, workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return amp("DELETE", "/workspaces/$(workspaceId)/rulegroupsnamespaces/$(name)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_workspace(workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes an AMP workspace.

# Arguments
- `workspace_id`: The ID of the workspace to delete.

# Keyword Parameters
- `client_token`: Optional, unique, case-sensitive, user-provided identifier to ensure the
  idempotency of the request.
"""
function delete_workspace(workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return amp("DELETE", "/workspaces/$(workspaceId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_alert_manager_definition(workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Describes an alert manager definition.

# Arguments
- `workspace_id`: The ID of the workspace to describe.

"""
function describe_alert_manager_definition(workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return amp("GET", "/workspaces/$(workspaceId)/alertmanager/definition", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_rule_groups_namespace(name, workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Describe a rule groups namespace.

# Arguments
- `name`: The rule groups namespace.
- `workspace_id`: The ID of the workspace to describe.

"""
function describe_rule_groups_namespace(name, workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return amp("GET", "/workspaces/$(workspaceId)/rulegroupsnamespaces/$(name)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_workspace(workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Describes an existing AMP workspace.

# Arguments
- `workspace_id`: The ID of the workspace to describe.

"""
function describe_workspace(workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return amp("GET", "/workspaces/$(workspaceId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_rule_groups_namespaces(workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists rule groups namespaces.

# Arguments
- `workspace_id`: The ID of the workspace.

# Keyword Parameters
- `max_results`: Maximum results to return in response (default=100, maximum=1000).
- `name`: Optional filter for rule groups namespace name. Only the rule groups namespace
  that begin with this value will be returned.
- `next_token`: Pagination token to request the next page in a paginated list. This token
  is obtained from the output of the previous ListRuleGroupsNamespaces request.
"""
function list_rule_groups_namespaces(workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return amp("GET", "/workspaces/$(workspaceId)/rulegroupsnamespaces", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_tags_for_resource(resource_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the tags you have assigned to the resource.

# Arguments
- `resource_arn`: The ARN of the resource.

"""
function list_tags_for_resource(resourceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return amp("GET", "/tags/$(resourceArn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_workspaces(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists all AMP workspaces, including workspaces being created or deleted.

# Keyword Parameters
- `alias`: Optional filter for workspace alias. Only the workspaces with aliases that begin
  with this value will be returned.
- `max_results`: Maximum results to return in response (default=100, maximum=1000).
- `next_token`: Pagination token to request the next page in a paginated list. This token
  is obtained from the output of the previous ListWorkspaces request.
"""
function list_workspaces(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return amp("GET", "/workspaces", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    put_alert_manager_definition(data, workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Update an alert manager definition.

# Arguments
- `data`: The alert manager definition data.
- `workspace_id`: The ID of the workspace in which to update the alert manager definition.

# Keyword Parameters
- `client_token`: Optional, unique, case-sensitive, user-provided identifier to ensure the
  idempotency of the request.
"""
function put_alert_manager_definition(data, workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return amp("PUT", "/workspaces/$(workspaceId)/alertmanager/definition", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("data"=>data, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    put_rule_groups_namespace(data, name, workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Update a rule groups namespace.

# Arguments
- `data`: The namespace data that define the rule groups.
- `name`: The rule groups namespace name.
- `workspace_id`: The ID of the workspace in which to update the rule group namespace.

# Keyword Parameters
- `client_token`: Optional, unique, case-sensitive, user-provided identifier to ensure the
  idempotency of the request.
"""
function put_rule_groups_namespace(data, name, workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return amp("PUT", "/workspaces/$(workspaceId)/rulegroupsnamespaces/$(name)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("data"=>data, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    tag_resource(resource_arn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates tags for the specified resource.

# Arguments
- `resource_arn`: The ARN of the resource.
- `tags`:

"""
function tag_resource(resourceArn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return amp("POST", "/tags/$(resourceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tags"=>tags), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    untag_resource(resource_arn, tag_keys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes tags from the specified resource.

# Arguments
- `resource_arn`: The ARN of the resource.
- `tag_keys`: One or more tag keys

"""
function untag_resource(resourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return amp("DELETE", "/tags/$(resourceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tagKeys"=>tagKeys), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_workspace_alias(workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates an AMP workspace alias.

# Arguments
- `workspace_id`: The ID of the workspace being updated.

# Keyword Parameters
- `alias`: The new alias of the workspace.
- `client_token`: Optional, unique, case-sensitive, user-provided identifier to ensure the
  idempotency of the request.
"""
function update_workspace_alias(workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(MAPPING, kwargs)
    return amp("POST", "/workspaces/$(workspaceId)/alias", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
