# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: inspector2
using AWS.Compat
using AWS.UUIDs

# Julia syntax for service-level optional parameters to the AWS request syntax
const SERVICE_PARAMETER_MAP = AWS.LittleDict("account_ids" => "accountIds", "aggregation_request" => "aggregationRequest", "max_results" => "maxResults", "next_token" => "nextToken", "filter_criteria" => "filterCriteria", "sort_criteria" => "sortCriteria", "group_by" => "groupBy", "service" => "service", "resource_types" => "resourceTypes", "action" => "action", "description" => "description", "name" => "name", "only_associated" => "onlyAssociated", "tags" => "tags", "report_id" => "reportId", "client_token" => "clientToken", "arns" => "arns")

"""
    associate_member(account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Associates an Amazon Web Services account with an Amazon Inspector delegated administrator.

# Arguments
- `account_id`: The Amazon Web Services account ID of the member account to be associated.

"""
function associate_member(accountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/members/associate", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("accountId"=>accountId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    batch_get_account_status(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves the Amazon Inspector status of multiple Amazon Web Services accounts within your
environment.

# Keyword Parameters
- `account_ids`: The 12-digit Amazon Web Services account IDs of the accounts to retrieve
  Amazon Inspector status for.
"""
function batch_get_account_status(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/status/batch/get", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    batch_get_free_trial_info(account_ids; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets free trial status for multiple Amazon Web Services accounts.

# Arguments
- `account_ids`: The account IDs to get free trial status for.

"""
function batch_get_free_trial_info(accountIds; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/freetrialinfo/batchget", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("accountIds"=>accountIds), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    cancel_findings_report(report_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Cancels the given findings report.

# Arguments
- `report_id`: The ID of the report to be canceled.

"""
function cancel_findings_report(reportId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/reporting/cancel", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("reportId"=>reportId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_filter(action, filter_criteria, name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a filter resource using specified filter criteria.

# Arguments
- `action`: Defines the action that is to be applied to the findings that match the filter.
- `filter_criteria`: Defines the criteria to be used in the filter for querying findings.
- `name`: The name of the filter. Minimum length of 3. Maximum length of 64. Valid
  characters include alphanumeric characters, dot (.), underscore (_), and dash (-). Spaces
  are not allowed.

# Keyword Parameters
- `description`: A description of the filter.
- `tags`: A list of tags for the filter.
"""
function create_filter(action, filterCriteria, name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/filters/create", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("action"=>action, "filterCriteria"=>filterCriteria, "name"=>name), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_findings_report(report_format, s3_destination; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a finding report.

# Arguments
- `report_format`: The format to generate the report in.
- `s3_destination`: The Amazon S3 export destination for the report.

# Keyword Parameters
- `filter_criteria`: The filter criteria to apply to the results of the finding report.
"""
function create_findings_report(reportFormat, s3Destination; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/reporting/create", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("reportFormat"=>reportFormat, "s3Destination"=>s3Destination), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_filter(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a filter resource.

# Arguments
- `arn`: The Amazon Resource Number (ARN) of the filter to be deleted.

"""
function delete_filter(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/filters/delete", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_organization_configuration(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Describe Amazon Inspector configuration settings for an Amazon Web Services organization

"""
function describe_organization_configuration(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/organizationconfiguration/describe", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    disable(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Disables Amazon Inspector scans for one or more Amazon Web Services accounts. Disabling all
scan types in an account disables the Amazon Inspector service.

# Keyword Parameters
- `account_ids`: An array of account IDs you want to disable Amazon Inspector scans for.
- `resource_types`: The resource scan types you want to disable.
"""
function disable(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/disable", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    disable_delegated_admin_account(delegated_admin_account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Disables the Amazon Inspector delegated administrator for your organization.

# Arguments
- `delegated_admin_account_id`: The Amazon Web Services account ID of the current Amazon
  Inspector delegated administrator.

"""
function disable_delegated_admin_account(delegatedAdminAccountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/delegatedadminaccounts/disable", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("delegatedAdminAccountId"=>delegatedAdminAccountId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    disassociate_member(account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Disassociates a member account from an Amazon Inspector delegated administrator.

# Arguments
- `account_id`: The Amazon Web Services account ID of the member account to disassociate.

"""
function disassociate_member(accountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/members/disassociate", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("accountId"=>accountId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    enable(resource_types; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Enables Amazon Inspector scans for one or more Amazon Web Services accounts.

# Arguments
- `resource_types`: The resource scan types you want to enable.

# Keyword Parameters
- `account_ids`: A list of account IDs you want to enable Amazon Inspector scans for.
- `client_token`: The idempotency token for the request.
"""
function enable(resourceTypes; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/enable", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("resourceTypes"=>resourceTypes, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    enable_delegated_admin_account(delegated_admin_account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Enables the Amazon Inspector delegated administrator for your Organizations organization.

# Arguments
- `delegated_admin_account_id`: The Amazon Web Services account ID of the Amazon Inspector
  delegated administrator.

# Keyword Parameters
- `client_token`: The idempotency token for the request.
"""
function enable_delegated_admin_account(delegatedAdminAccountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/delegatedadminaccounts/enable", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("delegatedAdminAccountId"=>delegatedAdminAccountId, "client_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_delegated_admin_account(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves information about the Amazon Inspector delegated administrator for your
organization.

"""
function get_delegated_admin_account(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/delegatedadminaccounts/get", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_findings_report_status(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets the status of a findings report.

# Keyword Parameters
- `report_id`: The ID of the report to retrieve the status of.
"""
function get_findings_report_status(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/reporting/status/get", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_member(account_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets member information for your organization.

# Arguments
- `account_id`: The Amazon Web Services account ID of the member account to retrieve
  information on.

"""
function get_member(accountId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/members/get", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("accountId"=>accountId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_account_permissions(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the permissions an account has to configure Amazon Inspector.

# Keyword Parameters
- `max_results`: The maximum number of results to return in the response.
- `next_token`: A token to use for paginating results that are returned in the response.
  Set the value of this parameter to null for the first request to a list action. For
  subsequent calls, use the NextToken value returned from the previous request to continue
  listing results after the first page.
- `service`: The service scan type to check permissions for.
"""
function list_account_permissions(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/accountpermissions/list", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_coverage(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists coverage details for you environment.

# Keyword Parameters
- `filter_criteria`: An object that contains details on the filters to apply to the
  coverage data for your environment.
- `max_results`: The maximum number of results to return in the response.
- `next_token`: A token to use for paginating results that are returned in the response.
  Set the value of this parameter to null for the first request to a list action. For
  subsequent calls, use the NextToken value returned from the previous request to continue
  listing results after the first page.
"""
function list_coverage(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/coverage/list", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_coverage_statistics(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists Amazon Inspector coverage statistics for your environment.

# Keyword Parameters
- `filter_criteria`: An object that contains details on the filters to apply to the
  coverage data for your environment.
- `group_by`: The value to group the results by.
- `next_token`: A token to use for paginating results that are returned in the response.
  Set the value of this parameter to null for the first request to a list action. For
  subsequent calls, use the NextToken value returned from the previous request to continue
  listing results after the first page.
"""
function list_coverage_statistics(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/coverage/statistics/list", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_delegated_admin_accounts(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists information about the Amazon Inspector delegated administrator of your organization.

# Keyword Parameters
- `max_results`: The maximum number of results to return in the response.
- `next_token`: A token to use for paginating results that are returned in the response.
  Set the value of this parameter to null for the first request to a list action. For
  subsequent calls, use the NextToken value returned from the previous request to continue
  listing results after the first page.
"""
function list_delegated_admin_accounts(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/delegatedadminaccounts/list", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_filters(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the filters associated with your account.

# Keyword Parameters
- `action`: The action the filter applies to matched findings.
- `arns`: The Amazon resource number (ARN) of the filter.
- `max_results`: The maximum number of results to return in the response.
- `next_token`: A token to use for paginating results that are returned in the response.
  Set the value of this parameter to null for the first request to a list action. For
  subsequent calls, use the NextToken value returned from the previous request to continue
  listing results after the first page.
"""
function list_filters(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/filters/list", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_finding_aggregations(aggregation_type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists aggregated finding data for your environment based on specific criteria.

# Arguments
- `aggregation_type`: The type of the aggregation request.

# Keyword Parameters
- `account_ids`: The Amazon Web Services account IDs to retrieve finding aggregation data
  for.
- `aggregation_request`: Details of the aggregation request that is used to filter your
  aggregation results.
- `max_results`: The maximum number of results to return in the response.
- `next_token`: A token to use for paginating results that are returned in the response.
  Set the value of this parameter to null for the first request to a list action. For
  subsequent calls, use the NextToken value returned from the previous request to continue
  listing results after the first page.
"""
function list_finding_aggregations(aggregationType; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/findings/aggregation/list", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("aggregationType"=>aggregationType), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_findings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists findings for your environment.

# Keyword Parameters
- `filter_criteria`: Details on the filters to apply to your finding results.
- `max_results`: The maximum number of results to return in the response.
- `next_token`: A token to use for paginating results that are returned in the response.
  Set the value of this parameter to null for the first request to a list action. For
  subsequent calls, use the NextToken value returned from the previous request to continue
  listing results after the first page.
- `sort_criteria`: Details on the sort criteria to apply to your finding results.
"""
function list_findings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/findings/list", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_members(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

List members associated with the Amazon Inspector delegated administrator for your
organization.

# Keyword Parameters
- `max_results`: The maximum number of results to return in the response.
- `next_token`: A token to use for paginating results that are returned in the response.
  Set the value of this parameter to null for the first request to a list action. For
  subsequent calls, use the NextToken value returned from the previous request to continue
  listing results after the first page.
- `only_associated`: Specifies whether to list only currently associated members if True or
  to list all members within the organization if False.
"""
function list_members(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/members/list", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_tags_for_resource(resource_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists all tags attached to a given resource.

# Arguments
- `resource_arn`: The Amazon resource number (ARN) of the resource to list tags of.

"""
function list_tags_for_resource(resourceArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("GET", "/tags/$(resourceArn)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_usage_totals(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists the Amazon Inspector usage totals over the last 30 days.

# Keyword Parameters
- `account_ids`: The Amazon Web Services account IDs to retrieve usage totals for.
- `max_results`: The maximum number of results to return in the response.
- `next_token`: A token to use for paginating results that are returned in the response.
  Set the value of this parameter to null for the first request to a list action. For
  subsequent calls, use the NextToken value returned from the previous request to continue
  listing results after the first page.
"""
function list_usage_totals(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/usage/list", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    tag_resource(resource_arn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds tags to a resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource to apply a tag to.
- `tags`: The tags to be added to a resource.

"""
function tag_resource(resourceArn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/tags/$(resourceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tags"=>tags), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    untag_resource(resource_arn, tag_keys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes tags from a resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) for the resource to remove tags from.
- `tag_keys`: The tag keys to remove from the resource.

"""
function untag_resource(resourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("DELETE", "/tags/$(resourceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tagKeys"=>tagKeys), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_filter(filter_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Specifies the action that is to be applied to the findings that match the filter.

# Arguments
- `filter_arn`: The Amazon Resource Number (ARN) of the filter to update.

# Keyword Parameters
- `action`: Specifies the action that is to be applied to the findings that match the
  filter.
- `description`: A description of the filter.
- `filter_criteria`: Defines the criteria to be update in the filter.
- `name`: The name of the filter.
"""
function update_filter(filterArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/filters/update", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("filterArn"=>filterArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_organization_configuration(auto_enable; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the configurations for your Amazon Inspector organization.

# Arguments
- `auto_enable`: Defines which scan types are enabled automatically for new members of your
  Amazon Inspector organization.

"""
function update_organization_configuration(autoEnable; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return inspector2("POST", "/organizationconfiguration/update", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("autoEnable"=>autoEnable), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
