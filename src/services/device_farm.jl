# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: device_farm
using AWS.Compat
using AWS.UUIDs

# Julia syntax for service-level optional parameters to the AWS request syntax
const SERVICE_PARAMETER_MAP = AWS.LittleDict("default_job_timeout_minutes" => "defaultJobTimeoutMinutes", "name" => "name", "description" => "description", "max_devices" => "maxDevices", "next_token" => "nextToken", "type" => "type", "labels" => "labels", "profile_arn" => "profileArn", "clear_max_devices" => "clearMaxDevices", "rules" => "rules", "max_results" => "maxResults", "content_type" => "contentType", "vpc_config" => "vpcConfig", "exclude_app_packages_from_cleanup" => "excludeAppPackagesFromCleanup", "package_cleanup" => "packageCleanup", "reboot_after_use" => "rebootAfterUse", "arn" => "arn", "filters" => "filters", "downlink_bandwidth_bits" => "downlinkBandwidthBits", "downlink_delay_ms" => "downlinkDelayMs", "downlink_jitter_ms" => "downlinkJitterMs", "downlink_loss_percent" => "downlinkLossPercent", "uplink_bandwidth_bits" => "uplinkBandwidthBits", "uplink_delay_ms" => "uplinkDelayMs", "uplink_jitter_ms" => "uplinkJitterMs", "uplink_loss_percent" => "uplinkLossPercent", "max_result" => "maxResult", "vpce_configuration_description" => "vpceConfigurationDescription", "offering_promotion_id" => "offeringPromotionId", "app_arn" => "appArn", "configuration" => "configuration", "test" => "test", "test_type" => "testType", "edit_content" => "editContent", "device_pool_arn" => "devicePoolArn", "device_selection_configuration" => "deviceSelectionConfiguration", "execution_configuration" => "executionConfiguration", "creation_time_after" => "creationTimeAfter", "creation_time_before" => "creationTimeBefore", "end_time_after" => "endTimeAfter", "end_time_before" => "endTimeBefore", "status" => "status", "client_id" => "clientId", "instance_arn" => "instanceArn", "interaction_mode" => "interactionMode", "remote_debug_enabled" => "remoteDebugEnabled", "remote_record_app_arn" => "remoteRecordAppArn", "remote_record_enabled" => "remoteRecordEnabled", "skip_app_resign" => "skipAppResign", "ssh_public_key" => "sshPublicKey", "project_arn" => "projectArn", "session_arn" => "sessionArn", "session_id" => "sessionId", "service_dns_name" => "serviceDnsName", "vpce_configuration_name" => "vpceConfigurationName", "vpce_service_name" => "vpceServiceName")

"""
    create_device_pool(name, project_arn, rules; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a device pool.

# Arguments
- `name`: The device pool's name.
- `project_arn`: The ARN of the project for the device pool.
- `rules`: The device pool's rules.

# Keyword Parameters
- `description`: The device pool's description.
- `max_devices`: The number of devices that Device Farm can add to your device pool. Device
  Farm adds devices that are available and meet the criteria that you assign for the rules
  parameter. Depending on how many devices meet these constraints, your device pool might
  contain fewer devices than the value for this parameter. By specifying the maximum number
  of devices, you can control the costs that you incur by running tests.
"""
function create_device_pool(name, projectArn, rules; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("CreateDevicePool", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("name"=>name, "projectArn"=>projectArn, "rules"=>rules), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_instance_profile(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a profile that can be applied to one or more private fleet device instances.

# Arguments
- `name`: The name of your instance profile.

# Keyword Parameters
- `description`: The description of your instance profile.
- `exclude_app_packages_from_cleanup`: An array of strings that specifies the list of app
  packages that should not be cleaned up from the device after a test run. The list of
  packages is considered only if you set packageCleanup to true.
- `package_cleanup`: When set to true, Device Farm removes app packages after a test run.
  The default value is false for private devices.
- `reboot_after_use`: When set to true, Device Farm reboots the instance after a test run.
  The default value is true.
"""
function create_instance_profile(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("CreateInstanceProfile", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("name"=>name), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_network_profile(name, project_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a network profile.

# Arguments
- `name`: The name for the new network profile.
- `project_arn`: The Amazon Resource Name (ARN) of the project for which you want to create
  a network profile.

# Keyword Parameters
- `description`: The description of the network profile.
- `downlink_bandwidth_bits`: The data throughput rate in bits per second, as an integer
  from 0 to 104857600.
- `downlink_delay_ms`: Delay time for all packets to destination in milliseconds as an
  integer from 0 to 2000.
- `downlink_jitter_ms`: Time variation in the delay of received packets in milliseconds as
  an integer from 0 to 2000.
- `downlink_loss_percent`: Proportion of received packets that fail to arrive from 0 to 100
  percent.
- `type`: The type of network profile to create. Valid values are listed here.
- `uplink_bandwidth_bits`: The data throughput rate in bits per second, as an integer from
  0 to 104857600.
- `uplink_delay_ms`: Delay time for all packets to destination in milliseconds as an
  integer from 0 to 2000.
- `uplink_jitter_ms`: Time variation in the delay of received packets in milliseconds as an
  integer from 0 to 2000.
- `uplink_loss_percent`: Proportion of transmitted packets that fail to arrive from 0 to
  100 percent.
"""
function create_network_profile(name, projectArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("CreateNetworkProfile", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("name"=>name, "projectArn"=>projectArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_project(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a project.

# Arguments
- `name`: The project's name.

# Keyword Parameters
- `default_job_timeout_minutes`: Sets the execution timeout value (in minutes) for a
  project. All test runs in this project use the specified execution timeout value unless
  overridden when scheduling a run.
"""
function create_project(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("CreateProject", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("name"=>name), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_remote_access_session(device_arn, project_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Specifies and starts a remote access session.

# Arguments
- `device_arn`: The ARN of the device for which you want to create a remote access session.
- `project_arn`: The Amazon Resource Name (ARN) of the project for which you want to create
  a remote access session.

# Keyword Parameters
- `client_id`: Unique identifier for the client. If you want access to multiple devices on
  the same client, you should pass the same clientId value in each call to
  CreateRemoteAccessSession. This identifier is required only if remoteDebugEnabled is set to
  true. Remote debugging is no longer supported.
- `configuration`: The configuration information for the remote access session request.
- `instance_arn`: The Amazon Resource Name (ARN) of the device instance for which you want
  to create a remote access session.
- `interaction_mode`: The interaction mode of the remote access session. Valid values are:
   INTERACTIVE: You can interact with the iOS device by viewing, touching, and rotating the
  screen. You cannot run XCUITest framework-based tests in this mode.   NO_VIDEO: You are
  connected to the device, but cannot interact with it or view the screen. This mode has the
  fastest test execution speed. You can run XCUITest framework-based tests in this mode.
  VIDEO_ONLY: You can view the screen, but cannot touch or rotate it. You can run XCUITest
  framework-based tests and watch the screen in this mode.
- `name`: The name of the remote access session to create.
- `remote_debug_enabled`: Set to true if you want to access devices remotely for debugging
  in your remote access session. Remote debugging is no longer supported.
- `remote_record_app_arn`: The Amazon Resource Name (ARN) for the app to be recorded in the
  remote access session.
- `remote_record_enabled`: Set to true to enable remote recording for the remote access
  session.
- `skip_app_resign`: When set to true, for private devices, Device Farm does not sign your
  app again. For public devices, Device Farm always signs your apps again. For more
  information on how Device Farm modifies your uploads during tests, see Do you modify my
  app?
- `ssh_public_key`: Ignored. The public key of the ssh key pair you want to use for
  connecting to remote devices in your remote debugging session. This key is required only if
  remoteDebugEnabled is set to true. Remote debugging is no longer supported.
"""
function create_remote_access_session(deviceArn, projectArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("CreateRemoteAccessSession", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("deviceArn"=>deviceArn, "projectArn"=>projectArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_test_grid_project(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a Selenium testing project. Projects are used to track TestGridSession instances.

# Arguments
- `name`: Human-readable name of the Selenium testing project.

# Keyword Parameters
- `description`: Human-readable description of the project.
- `vpc_config`: The VPC security groups and subnets that are attached to a project.
"""
function create_test_grid_project(name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("CreateTestGridProject", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("name"=>name), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_test_grid_url(expires_in_seconds, project_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a signed, short-term URL that can be passed to a Selenium RemoteWebDriver
constructor.

# Arguments
- `expires_in_seconds`: Lifetime, in seconds, of the URL.
- `project_arn`: ARN (from CreateTestGridProject or ListTestGridProjects) to associate with
  the short-term URL.

"""
function create_test_grid_url(expiresInSeconds, projectArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("CreateTestGridUrl", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("expiresInSeconds"=>expiresInSeconds, "projectArn"=>projectArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_upload(name, project_arn, type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Uploads an app or test scripts.

# Arguments
- `name`: The upload's file name. The name should not contain any forward slashes (/). If
  you are uploading an iOS app, the file name must end with the .ipa extension. If you are
  uploading an Android app, the file name must end with the .apk extension. For all others,
  the file name must end with the .zip file extension.
- `project_arn`: The ARN of the project for the upload.
- `type`: The upload's upload type. Must be one of the following values:   ANDROID_APP
  IOS_APP   WEB_APP   EXTERNAL_DATA   APPIUM_JAVA_JUNIT_TEST_PACKAGE
  APPIUM_JAVA_TESTNG_TEST_PACKAGE   APPIUM_PYTHON_TEST_PACKAGE   APPIUM_NODE_TEST_PACKAGE
  APPIUM_RUBY_TEST_PACKAGE   APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE
  APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE   APPIUM_WEB_PYTHON_TEST_PACKAGE
  APPIUM_WEB_NODE_TEST_PACKAGE   APPIUM_WEB_RUBY_TEST_PACKAGE   CALABASH_TEST_PACKAGE
  INSTRUMENTATION_TEST_PACKAGE   UIAUTOMATION_TEST_PACKAGE   UIAUTOMATOR_TEST_PACKAGE
  XCTEST_TEST_PACKAGE   XCTEST_UI_TEST_PACKAGE   APPIUM_JAVA_JUNIT_TEST_SPEC
  APPIUM_JAVA_TESTNG_TEST_SPEC   APPIUM_PYTHON_TEST_SPEC   APPIUM_NODE_TEST_SPEC
  APPIUM_RUBY_TEST_SPEC   APPIUM_WEB_JAVA_JUNIT_TEST_SPEC   APPIUM_WEB_JAVA_TESTNG_TEST_SPEC
   APPIUM_WEB_PYTHON_TEST_SPEC   APPIUM_WEB_NODE_TEST_SPEC   APPIUM_WEB_RUBY_TEST_SPEC
  INSTRUMENTATION_TEST_SPEC   XCTEST_UI_TEST_SPEC    If you call CreateUpload with WEB_APP
  specified, AWS Device Farm throws an ArgumentException error.

# Keyword Parameters
- `content_type`: The upload's content type (for example, application/octet-stream).
"""
function create_upload(name, projectArn, type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("CreateUpload", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("name"=>name, "projectArn"=>projectArn, "type"=>type), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_vpceconfiguration(service_dns_name, vpce_configuration_name, vpce_service_name; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a configuration record in Device Farm for your Amazon Virtual Private Cloud (VPC)
endpoint.

# Arguments
- `service_dns_name`: The DNS name of the service running in your VPC that you want Device
  Farm to test.
- `vpce_configuration_name`: The friendly name you give to your VPC endpoint configuration,
  to manage your configurations more easily.
- `vpce_service_name`: The name of the VPC endpoint service running in your AWS account
  that you want Device Farm to test.

# Keyword Parameters
- `vpce_configuration_description`: An optional description that provides details about
  your VPC endpoint configuration.
"""
function create_vpceconfiguration(serviceDnsName, vpceConfigurationName, vpceServiceName; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("CreateVPCEConfiguration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("serviceDnsName"=>serviceDnsName, "vpceConfigurationName"=>vpceConfigurationName, "vpceServiceName"=>vpceServiceName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_device_pool(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a device pool given the pool ARN. Does not allow deletion of curated pools owned by
the system.

# Arguments
- `arn`: Represents the Amazon Resource Name (ARN) of the Device Farm device pool to delete.

"""
function delete_device_pool(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("DeleteDevicePool", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_instance_profile(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a profile that can be applied to one or more private device instances.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the instance profile you are requesting to
  delete.

"""
function delete_instance_profile(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("DeleteInstanceProfile", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_network_profile(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a network profile.

# Arguments
- `arn`: The ARN of the network profile to delete.

"""
function delete_network_profile(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("DeleteNetworkProfile", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_project(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes an AWS Device Farm project, given the project ARN.  Deleting this resource does not
stop an in-progress run.

# Arguments
- `arn`: Represents the Amazon Resource Name (ARN) of the Device Farm project to delete.

"""
function delete_project(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("DeleteProject", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_remote_access_session(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a completed remote access session and its results.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the session for which you want to delete remote
  access.

"""
function delete_remote_access_session(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("DeleteRemoteAccessSession", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_run(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the run, given the run ARN.  Deleting this resource does not stop an in-progress
run.

# Arguments
- `arn`: The Amazon Resource Name (ARN) for the run to delete.

"""
function delete_run(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("DeleteRun", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_test_grid_project(project_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

 Deletes a Selenium testing project and all content generated under it.   You cannot undo
this operation.   You cannot delete a project if it has active sessions.

# Arguments
- `project_arn`: The ARN of the project to delete, from CreateTestGridProject or
  ListTestGridProjects.

"""
function delete_test_grid_project(projectArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("DeleteTestGridProject", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("projectArn"=>projectArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_upload(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes an upload given the upload ARN.

# Arguments
- `arn`: Represents the Amazon Resource Name (ARN) of the Device Farm upload to delete.

"""
function delete_upload(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("DeleteUpload", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_vpceconfiguration(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a configuration for your Amazon Virtual Private Cloud (VPC) endpoint.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the VPC endpoint configuration you want to
  delete.

"""
function delete_vpceconfiguration(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("DeleteVPCEConfiguration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_account_settings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns the number of unmetered iOS or unmetered Android devices that have been purchased
by the account.

"""
function get_account_settings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("GetAccountSettings", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_device(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about a unique device type.

# Arguments
- `arn`: The device type's ARN.

"""
function get_device(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("GetDevice", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_device_instance(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about a device instance that belongs to a private device fleet.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the instance you're requesting information about.

"""
function get_device_instance(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("GetDeviceInstance", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_device_pool(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about a device pool.

# Arguments
- `arn`: The device pool's ARN.

"""
function get_device_pool(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("GetDevicePool", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_device_pool_compatibility(device_pool_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about compatibility with a device pool.

# Arguments
- `device_pool_arn`: The device pool's ARN.

# Keyword Parameters
- `app_arn`: The ARN of the app that is associated with the specified device pool.
- `configuration`: An object that contains information about the settings for a run.
- `test`: Information about the uploaded test to be run against the device pool.
- `test_type`: The test type for the specified device pool. Allowed values include the
  following:   BUILTIN_FUZZ.   BUILTIN_EXPLORER. For Android, an app explorer that traverses
  an Android app, interacting with it and capturing screenshots at the same time.
  APPIUM_JAVA_JUNIT.   APPIUM_JAVA_TESTNG.   APPIUM_PYTHON.   APPIUM_NODE.   APPIUM_RUBY.
  APPIUM_WEB_JAVA_JUNIT.   APPIUM_WEB_JAVA_TESTNG.   APPIUM_WEB_PYTHON.   APPIUM_WEB_NODE.
  APPIUM_WEB_RUBY.   CALABASH.   INSTRUMENTATION.   UIAUTOMATION.   UIAUTOMATOR.   XCTEST.
  XCTEST_UI.
"""
function get_device_pool_compatibility(devicePoolArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("GetDevicePoolCompatibility", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("devicePoolArn"=>devicePoolArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_instance_profile(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about the specified instance profile.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of an instance profile.

"""
function get_instance_profile(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("GetInstanceProfile", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_job(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about a job.

# Arguments
- `arn`: The job's ARN.

"""
function get_job(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("GetJob", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_network_profile(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about a network profile.

# Arguments
- `arn`: The ARN of the network profile to return information about.

"""
function get_network_profile(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("GetNetworkProfile", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_offering_status(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets the current status and future status of all offerings purchased by an AWS account. The
response indicates how many offerings are currently available and the offerings that will
be available in the next period. The API returns a NotEligible error if the user is not
permitted to invoke the operation. If you must be able to invoke this operation, contact
aws-devicefarm-support@amazon.com.

# Keyword Parameters
- `next_token`: An identifier that was returned from the previous call to this operation,
  which can be used to return the next set of items in the list.
"""
function get_offering_status(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("GetOfferingStatus", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_project(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about a project.

# Arguments
- `arn`: The project's ARN.

"""
function get_project(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("GetProject", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_remote_access_session(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a link to a currently running remote access session.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the remote access session about which you want
  to get session information.

"""
function get_remote_access_session(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("GetRemoteAccessSession", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_run(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about a run.

# Arguments
- `arn`: The run's ARN.

"""
function get_run(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("GetRun", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_suite(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about a suite.

# Arguments
- `arn`: The suite's ARN.

"""
function get_suite(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("GetSuite", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_test(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about a test.

# Arguments
- `arn`: The test's ARN.

"""
function get_test(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("GetTest", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_test_grid_project(project_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves information about a Selenium testing project.

# Arguments
- `project_arn`: The ARN of the Selenium testing project, from either CreateTestGridProject
  or ListTestGridProjects.

"""
function get_test_grid_project(projectArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("GetTestGridProject", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("projectArn"=>projectArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_test_grid_session(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

A session is an instance of a browser created through a RemoteWebDriver with the URL from
CreateTestGridUrlResulturl. You can use the following to look up sessions:   The session
ARN (GetTestGridSessionRequestsessionArn).   The project ARN and a session ID
(GetTestGridSessionRequestprojectArn and GetTestGridSessionRequestsessionId).

# Keyword Parameters
- `project_arn`: The ARN for the project that this session belongs to. See
  CreateTestGridProject and ListTestGridProjects.
- `session_arn`: An ARN that uniquely identifies a TestGridSession.
- `session_id`: An ID associated with this session.
"""
function get_test_grid_session(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("GetTestGridSession", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_upload(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about an upload.

# Arguments
- `arn`: The upload's ARN.

"""
function get_upload(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("GetUpload", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_vpceconfiguration(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about the configuration settings for your Amazon Virtual Private Cloud
(VPC) endpoint.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the VPC endpoint configuration you want to
  describe.

"""
function get_vpceconfiguration(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("GetVPCEConfiguration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    install_to_remote_access_session(app_arn, remote_access_session_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Installs an application to the device in a remote access session. For Android applications,
the file must be in .apk format. For iOS applications, the file must be in .ipa format.

# Arguments
- `app_arn`: The ARN of the app about which you are requesting information.
- `remote_access_session_arn`: The Amazon Resource Name (ARN) of the remote access session
  about which you are requesting information.

"""
function install_to_remote_access_session(appArn, remoteAccessSessionArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("InstallToRemoteAccessSession", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("appArn"=>appArn, "remoteAccessSessionArn"=>remoteAccessSessionArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_artifacts(arn, type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about artifacts.

# Arguments
- `arn`: The run, job, suite, or test ARN.
- `type`: The artifacts' type. Allowed values include:   FILE   LOG   SCREENSHOT

# Keyword Parameters
- `next_token`: An identifier that was returned from the previous call to this operation,
  which can be used to return the next set of items in the list.
"""
function list_artifacts(arn, type; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("ListArtifacts", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn, "type"=>type), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_device_instances(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about the private device instances associated with one or more AWS
accounts.

# Keyword Parameters
- `max_results`: An integer that specifies the maximum number of items you want to return
  in the API response.
- `next_token`: An identifier that was returned from the previous call to this operation,
  which can be used to return the next set of items in the list.
"""
function list_device_instances(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("ListDeviceInstances", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_device_pools(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about device pools.

# Arguments
- `arn`: The project ARN.

# Keyword Parameters
- `next_token`: An identifier that was returned from the previous call to this operation,
  which can be used to return the next set of items in the list.
- `type`: The device pools' type. Allowed values include:   CURATED: A device pool that is
  created and managed by AWS Device Farm.   PRIVATE: A device pool that is created and
  managed by the device pool developer.
"""
function list_device_pools(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("ListDevicePools", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_devices(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about unique device types.

# Keyword Parameters
- `arn`: The Amazon Resource Name (ARN) of the project.
- `filters`: Used to select a set of devices. A filter is made up of an attribute, an
  operator, and one or more values.   Attribute: The aspect of a device such as platform or
  model used as the selection criteria in a device filter. Allowed values include:   ARN: The
  Amazon Resource Name (ARN) of the device (for example,
  arn:aws:devicefarm:us-west-2::device:12345Example).   PLATFORM: The device platform. Valid
  values are ANDROID or IOS.   OS_VERSION: The operating system version (for example,
  10.3.2).   MODEL: The device model (for example, iPad 5th Gen).   AVAILABILITY: The current
  availability of the device. Valid values are AVAILABLE, HIGHLY_AVAILABLE, BUSY, or
  TEMPORARY_NOT_AVAILABLE.   FORM_FACTOR: The device form factor. Valid values are PHONE or
  TABLET.   MANUFACTURER: The device manufacturer (for example, Apple).
  REMOTE_ACCESS_ENABLED: Whether the device is enabled for remote access. Valid values are
  TRUE or FALSE.   REMOTE_DEBUG_ENABLED: Whether the device is enabled for remote debugging.
  Valid values are TRUE or FALSE. Because remote debugging is no longer supported, this
  attribute is ignored.   INSTANCE_ARN: The Amazon Resource Name (ARN) of the device
  instance.   INSTANCE_LABELS: The label of the device instance.   FLEET_TYPE: The fleet
  type. Valid values are PUBLIC or PRIVATE.     Operator: The filter operator.   The EQUALS
  operator is available for every attribute except INSTANCE_LABELS.   The CONTAINS operator
  is available for the INSTANCE_LABELS and MODEL attributes.   The IN and NOT_IN operators
  are available for the ARN, OS_VERSION, MODEL, MANUFACTURER, and INSTANCE_ARN attributes.
  The LESS_THAN, GREATER_THAN, LESS_THAN_OR_EQUALS, and GREATER_THAN_OR_EQUALS operators are
  also available for the OS_VERSION attribute.     Values: An array of one or more filter
  values.   The IN and NOT_IN operators take a values array that has one or more elements.
  The other operators require an array with a single element.   In a request, the
  AVAILABILITY attribute takes the following values: AVAILABLE, HIGHLY_AVAILABLE, BUSY, or
  TEMPORARY_NOT_AVAILABLE.
- `next_token`: An identifier that was returned from the previous call to this operation,
  which can be used to return the next set of items in the list.
"""
function list_devices(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("ListDevices", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_instance_profiles(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about all the instance profiles in an AWS account.

# Keyword Parameters
- `max_results`: An integer that specifies the maximum number of items you want to return
  in the API response.
- `next_token`: An identifier that was returned from the previous call to this operation,
  which can be used to return the next set of items in the list.
"""
function list_instance_profiles(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("ListInstanceProfiles", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_jobs(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about jobs for a given test run.

# Arguments
- `arn`: The run's Amazon Resource Name (ARN).

# Keyword Parameters
- `next_token`: An identifier that was returned from the previous call to this operation,
  which can be used to return the next set of items in the list.
"""
function list_jobs(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("ListJobs", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_network_profiles(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns the list of available network profiles.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the project for which you want to list network
  profiles.

# Keyword Parameters
- `next_token`: An identifier that was returned from the previous call to this operation,
  which can be used to return the next set of items in the list.
- `type`: The type of network profile to return information about. Valid values are listed
  here.
"""
function list_network_profiles(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("ListNetworkProfiles", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_offering_promotions(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of offering promotions. Each offering promotion record contains the ID and
description of the promotion. The API returns a NotEligible error if the caller is not
permitted to invoke the operation. Contact aws-devicefarm-support@amazon.com if you must be
able to invoke this operation.

# Keyword Parameters
- `next_token`: An identifier that was returned from the previous call to this operation,
  which can be used to return the next set of items in the list.
"""
function list_offering_promotions(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("ListOfferingPromotions", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_offering_transactions(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of all historical purchases, renewals, and system renewal transactions for
an AWS account. The list is paginated and ordered by a descending timestamp (most recent
transactions are first). The API returns a NotEligible error if the user is not permitted
to invoke the operation. If you must be able to invoke this operation, contact
aws-devicefarm-support@amazon.com.

# Keyword Parameters
- `next_token`: An identifier that was returned from the previous call to this operation,
  which can be used to return the next set of items in the list.
"""
function list_offering_transactions(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("ListOfferingTransactions", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_offerings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of products or offerings that the user can manage through the API. Each
offering record indicates the recurring price per unit and the frequency for that offering.
The API returns a NotEligible error if the user is not permitted to invoke the operation.
If you must be able to invoke this operation, contact aws-devicefarm-support@amazon.com.

# Keyword Parameters
- `next_token`: An identifier that was returned from the previous call to this operation,
  which can be used to return the next set of items in the list.
"""
function list_offerings(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("ListOfferings", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_projects(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about projects.

# Keyword Parameters
- `arn`: Optional. If no Amazon Resource Name (ARN) is specified, then AWS Device Farm
  returns a list of all projects for the AWS account. You can also specify a project ARN.
- `next_token`: An identifier that was returned from the previous call to this operation,
  which can be used to return the next set of items in the list.
"""
function list_projects(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("ListProjects", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_remote_access_sessions(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of all currently running remote access sessions.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the project about which you are requesting
  information.

# Keyword Parameters
- `next_token`: An identifier that was returned from the previous call to this operation,
  which can be used to return the next set of items in the list.
"""
function list_remote_access_sessions(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("ListRemoteAccessSessions", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_runs(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about runs, given an AWS Device Farm project ARN.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the project for which you want to list runs.

# Keyword Parameters
- `next_token`: An identifier that was returned from the previous call to this operation,
  which can be used to return the next set of items in the list.
"""
function list_runs(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("ListRuns", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_samples(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about samples, given an AWS Device Farm job ARN.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the job used to list samples.

# Keyword Parameters
- `next_token`: An identifier that was returned from the previous call to this operation,
  which can be used to return the next set of items in the list.
"""
function list_samples(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("ListSamples", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_suites(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about test suites for a given job.

# Arguments
- `arn`: The job's Amazon Resource Name (ARN).

# Keyword Parameters
- `next_token`: An identifier that was returned from the previous call to this operation,
  which can be used to return the next set of items in the list.
"""
function list_suites(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("ListSuites", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_tags_for_resource(resource_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

List the tags for an AWS Device Farm resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource or resources for which to
  list tags. You can associate tags with the following Device Farm resources: PROJECT, RUN,
  NETWORK_PROFILE, INSTANCE_PROFILE, DEVICE_INSTANCE, SESSION, DEVICE_POOL, DEVICE, and
  VPCE_CONFIGURATION.

"""
function list_tags_for_resource(ResourceARN; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("ListTagsForResource", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ResourceARN"=>ResourceARN), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_test_grid_projects(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets a list of all Selenium testing projects in your account.

# Keyword Parameters
- `max_result`: Return no more than this number of results.
- `next_token`: From a response, used to continue a paginated listing.
"""
function list_test_grid_projects(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("ListTestGridProjects", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_test_grid_session_actions(session_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of the actions taken in a TestGridSession.

# Arguments
- `session_arn`: The ARN of the session to retrieve.

# Keyword Parameters
- `max_result`: The maximum number of sessions to return per response.
- `next_token`: Pagination token.
"""
function list_test_grid_session_actions(sessionArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("ListTestGridSessionActions", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("sessionArn"=>sessionArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_test_grid_session_artifacts(session_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves a list of artifacts created during the session.

# Arguments
- `session_arn`: The ARN of a TestGridSession.

# Keyword Parameters
- `max_result`: The maximum number of results to be returned by a request.
- `next_token`: Pagination token.
- `type`: Limit results to a specified type of artifact.
"""
function list_test_grid_session_artifacts(sessionArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("ListTestGridSessionArtifacts", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("sessionArn"=>sessionArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_test_grid_sessions(project_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves a list of sessions for a TestGridProject.

# Arguments
- `project_arn`: ARN of a TestGridProject.

# Keyword Parameters
- `creation_time_after`: Return only sessions created after this time.
- `creation_time_before`: Return only sessions created before this time.
- `end_time_after`: Return only sessions that ended after this time.
- `end_time_before`: Return only sessions that ended before this time.
- `max_result`: Return only this many results at a time.
- `next_token`: Pagination token.
- `status`: Return only sessions in this state.
"""
function list_test_grid_sessions(projectArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("ListTestGridSessions", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("projectArn"=>projectArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_tests(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about tests in a given test suite.

# Arguments
- `arn`: The test suite's Amazon Resource Name (ARN).

# Keyword Parameters
- `next_token`: An identifier that was returned from the previous call to this operation,
  which can be used to return the next set of items in the list.
"""
function list_tests(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("ListTests", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_unique_problems(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about unique problems, such as exceptions or crashes. Unique problems are
defined as a single instance of an error across a run, job, or suite. For example, if a
call in your application consistently raises an exception (OutOfBoundsException in
MyActivity.java:386), ListUniqueProblems returns a single entry instead of many individual
entries for that exception.

# Arguments
- `arn`: The unique problems' ARNs.

# Keyword Parameters
- `next_token`: An identifier that was returned from the previous call to this operation,
  which can be used to return the next set of items in the list.
"""
function list_unique_problems(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("ListUniqueProblems", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_uploads(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets information about uploads, given an AWS Device Farm project ARN.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the project for which you want to list uploads.

# Keyword Parameters
- `next_token`: An identifier that was returned from the previous call to this operation,
  which can be used to return the next set of items in the list.
- `type`: The type of upload. Must be one of the following values:   ANDROID_APP   IOS_APP
   WEB_APP   EXTERNAL_DATA   APPIUM_JAVA_JUNIT_TEST_PACKAGE   APPIUM_JAVA_TESTNG_TEST_PACKAGE
    APPIUM_PYTHON_TEST_PACKAGE   APPIUM_NODE_TEST_PACKAGE   APPIUM_RUBY_TEST_PACKAGE
  APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE   APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE
  APPIUM_WEB_PYTHON_TEST_PACKAGE   APPIUM_WEB_NODE_TEST_PACKAGE
  APPIUM_WEB_RUBY_TEST_PACKAGE   CALABASH_TEST_PACKAGE   INSTRUMENTATION_TEST_PACKAGE
  UIAUTOMATION_TEST_PACKAGE   UIAUTOMATOR_TEST_PACKAGE   XCTEST_TEST_PACKAGE
  XCTEST_UI_TEST_PACKAGE   APPIUM_JAVA_JUNIT_TEST_SPEC   APPIUM_JAVA_TESTNG_TEST_SPEC
  APPIUM_PYTHON_TEST_SPEC   APPIUM_NODE_TEST_SPEC    APPIUM_RUBY_TEST_SPEC
  APPIUM_WEB_JAVA_JUNIT_TEST_SPEC   APPIUM_WEB_JAVA_TESTNG_TEST_SPEC
  APPIUM_WEB_PYTHON_TEST_SPEC   APPIUM_WEB_NODE_TEST_SPEC   APPIUM_WEB_RUBY_TEST_SPEC
  INSTRUMENTATION_TEST_SPEC   XCTEST_UI_TEST_SPEC
"""
function list_uploads(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("ListUploads", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_vpceconfigurations(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about all Amazon Virtual Private Cloud (VPC) endpoint configurations in
the AWS account.

# Keyword Parameters
- `max_results`: An integer that specifies the maximum number of items you want to return
  in the API response.
- `next_token`: An identifier that was returned from the previous call to this operation,
  which can be used to return the next set of items in the list.
"""
function list_vpceconfigurations(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("ListVPCEConfigurations", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    purchase_offering(offering_id, quantity; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Immediately purchases offerings for an AWS account. Offerings renew with the latest total
purchased quantity for an offering, unless the renewal was overridden. The API returns a
NotEligible error if the user is not permitted to invoke the operation. If you must be able
to invoke this operation, contact aws-devicefarm-support@amazon.com.

# Arguments
- `offering_id`: The ID of the offering.
- `quantity`: The number of device slots to purchase in an offering request.

# Keyword Parameters
- `offering_promotion_id`: The ID of the offering promotion to be applied to the purchase.
"""
function purchase_offering(offeringId, quantity; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("PurchaseOffering", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("offeringId"=>offeringId, "quantity"=>quantity), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    renew_offering(offering_id, quantity; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Explicitly sets the quantity of devices to renew for an offering, starting from the
effectiveDate of the next period. The API returns a NotEligible error if the user is not
permitted to invoke the operation. If you must be able to invoke this operation, contact
aws-devicefarm-support@amazon.com.

# Arguments
- `offering_id`: The ID of a request to renew an offering.
- `quantity`: The quantity requested in an offering renewal.

"""
function renew_offering(offeringId, quantity; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("RenewOffering", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("offeringId"=>offeringId, "quantity"=>quantity), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    schedule_run(project_arn, test; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Schedules a run.

# Arguments
- `project_arn`: The ARN of the project for the run to be scheduled.
- `test`: Information about the test for the run to be scheduled.

# Keyword Parameters
- `app_arn`: The ARN of an application package to run tests against, created with
  CreateUpload. See ListUploads.
- `configuration`: Information about the settings for the run to be scheduled.
- `device_pool_arn`: The ARN of the device pool for the run to be scheduled.
- `device_selection_configuration`: The filter criteria used to dynamically select a set of
  devices for a test run and the maximum number of devices to be included in the run. Either
  devicePoolArn  or  deviceSelectionConfiguration  is required in a request.
- `execution_configuration`: Specifies configuration information about a test run, such as
  the execution timeout (in minutes).
- `name`: The name for the run to be scheduled.
"""
function schedule_run(projectArn, test; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("ScheduleRun", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("projectArn"=>projectArn, "test"=>test), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    stop_job(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Initiates a stop request for the current job. AWS Device Farm immediately stops the job on
the device where tests have not started. You are not billed for this device. On the device
where tests have started, setup suite and teardown suite tests run to completion on the
device. You are billed for setup, teardown, and any tests that were in progress or already
completed.

# Arguments
- `arn`: Represents the Amazon Resource Name (ARN) of the Device Farm job to stop.

"""
function stop_job(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("StopJob", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    stop_remote_access_session(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Ends a specified remote access session.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the remote access session to stop.

"""
function stop_remote_access_session(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("StopRemoteAccessSession", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    stop_run(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Initiates a stop request for the current test run. AWS Device Farm immediately stops the
run on devices where tests have not started. You are not billed for these devices. On
devices where tests have started executing, setup suite and teardown suite tests run to
completion on those devices. You are billed for setup, teardown, and any tests that were in
progress or already completed.

# Arguments
- `arn`: Represents the Amazon Resource Name (ARN) of the Device Farm run to stop.

"""
function stop_run(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("StopRun", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    tag_resource(resource_arn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Associates the specified tags to a resource with the specified resourceArn. If existing
tags on a resource are not specified in the request parameters, they are not changed. When
a resource is deleted, the tags associated with that resource are also deleted.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource or resources to which to
  add tags. You can associate tags with the following Device Farm resources: PROJECT, RUN,
  NETWORK_PROFILE, INSTANCE_PROFILE, DEVICE_INSTANCE, SESSION, DEVICE_POOL, DEVICE, and
  VPCE_CONFIGURATION.
- `tags`: The tags to add to the resource. A tag is an array of key-value pairs. Tag keys
  can have a maximum character length of 128 characters. Tag values can have a maximum length
  of 256 characters.

"""
function tag_resource(ResourceARN, Tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("TagResource", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ResourceARN"=>ResourceARN, "Tags"=>Tags), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    untag_resource(resource_arn, tag_keys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes the specified tags from a resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource or resources from which to
  delete tags. You can associate tags with the following Device Farm resources: PROJECT, RUN,
  NETWORK_PROFILE, INSTANCE_PROFILE, DEVICE_INSTANCE, SESSION, DEVICE_POOL, DEVICE, and
  VPCE_CONFIGURATION.
- `tag_keys`: The keys of the tags to be removed.

"""
function untag_resource(ResourceARN, TagKeys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("UntagResource", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ResourceARN"=>ResourceARN, "TagKeys"=>TagKeys), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_device_instance(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates information about a private device instance.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the device instance.

# Keyword Parameters
- `labels`: An array of strings that you want to associate with the device instance.
- `profile_arn`: The ARN of the profile that you want to associate with the device instance.
"""
function update_device_instance(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("UpdateDeviceInstance", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_device_pool(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Modifies the name, description, and rules in a device pool given the attributes and the
pool ARN. Rule updates are all-or-nothing, meaning they can only be updated as a whole (or
not at all).

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the Device Farm device pool to update.

# Keyword Parameters
- `clear_max_devices`: Sets whether the maxDevices parameter applies to your device pool.
  If you set this parameter to true, the maxDevices parameter does not apply, and Device Farm
  does not limit the number of devices that it adds to your device pool. In this case, Device
  Farm adds all available devices that meet the criteria specified in the rules parameter. If
  you use this parameter in your request, you cannot use the maxDevices parameter in the same
  request.
- `description`: A description of the device pool to update.
- `max_devices`: The number of devices that Device Farm can add to your device pool. Device
  Farm adds devices that are available and that meet the criteria that you assign for the
  rules parameter. Depending on how many devices meet these constraints, your device pool
  might contain fewer devices than the value for this parameter. By specifying the maximum
  number of devices, you can control the costs that you incur by running tests. If you use
  this parameter in your request, you cannot use the clearMaxDevices parameter in the same
  request.
- `name`: A string that represents the name of the device pool to update.
- `rules`: Represents the rules to modify for the device pool. Updating rules is optional.
  If you update rules for your request, the update replaces the existing rules.
"""
function update_device_pool(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("UpdateDevicePool", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_instance_profile(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates information about an existing private device instance profile.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the instance profile.

# Keyword Parameters
- `description`: The updated description for your instance profile.
- `exclude_app_packages_from_cleanup`: An array of strings that specifies the list of app
  packages that should not be cleaned up from the device after a test run is over. The list
  of packages is only considered if you set packageCleanup to true.
- `name`: The updated name for your instance profile.
- `package_cleanup`: The updated choice for whether you want to specify package cleanup.
  The default value is false for private devices.
- `reboot_after_use`: The updated choice for whether you want to reboot the device after
  use. The default value is true.
"""
function update_instance_profile(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("UpdateInstanceProfile", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_network_profile(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates the network profile.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the project for which you want to update network
  profile settings.

# Keyword Parameters
- `description`: The description of the network profile about which you are returning
  information.
- `downlink_bandwidth_bits`: The data throughput rate in bits per second, as an integer
  from 0 to 104857600.
- `downlink_delay_ms`: Delay time for all packets to destination in milliseconds as an
  integer from 0 to 2000.
- `downlink_jitter_ms`: Time variation in the delay of received packets in milliseconds as
  an integer from 0 to 2000.
- `downlink_loss_percent`: Proportion of received packets that fail to arrive from 0 to 100
  percent.
- `name`: The name of the network profile about which you are returning information.
- `type`: The type of network profile to return information about. Valid values are listed
  here.
- `uplink_bandwidth_bits`: The data throughput rate in bits per second, as an integer from
  0 to 104857600.
- `uplink_delay_ms`: Delay time for all packets to destination in milliseconds as an
  integer from 0 to 2000.
- `uplink_jitter_ms`: Time variation in the delay of received packets in milliseconds as an
  integer from 0 to 2000.
- `uplink_loss_percent`: Proportion of transmitted packets that fail to arrive from 0 to
  100 percent.
"""
function update_network_profile(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("UpdateNetworkProfile", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_project(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Modifies the specified project name, given the project ARN and a new name.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the project whose name to update.

# Keyword Parameters
- `default_job_timeout_minutes`: The number of minutes a test run in the project executes
  before it times out.
- `name`: A string that represents the new name of the project that you are updating.
"""
function update_project(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("UpdateProject", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_test_grid_project(project_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Change details of a project.

# Arguments
- `project_arn`: ARN of the project to update.

# Keyword Parameters
- `description`: Human-readable description for the project.
- `name`: Human-readable name for the project.
- `vpc_config`: The VPC security groups and subnets that are attached to a project.
"""
function update_test_grid_project(projectArn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("UpdateTestGridProject", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("projectArn"=>projectArn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_upload(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates an uploaded test spec.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the uploaded test spec.

# Keyword Parameters
- `content_type`: The upload's content type (for example, application/x-yaml).
- `edit_content`: Set to true if the YAML file has changed and must be updated. Otherwise,
  set to false.
- `name`: The upload's test spec file name. The name must not contain any forward slashes
  (/). The test spec file name must end with the .yaml or .yml file extension.
"""
function update_upload(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("UpdateUpload", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_vpceconfiguration(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates information about an Amazon Virtual Private Cloud (VPC) endpoint configuration.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the VPC endpoint configuration you want to
  update.

# Keyword Parameters
- `service_dns_name`: The DNS (domain) name used to connect to your private service in your
  VPC. The DNS name must not already be in use on the internet.
- `vpce_configuration_description`: An optional description that provides details about
  your VPC endpoint configuration.
- `vpce_configuration_name`: The friendly name you give to your VPC endpoint configuration
  to manage your configurations more easily.
- `vpce_service_name`: The name of the VPC endpoint service running in your AWS account
  that you want Device Farm to test.
"""
function update_vpceconfiguration(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return device_farm("UpdateVPCEConfiguration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
