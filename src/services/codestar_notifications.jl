# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: codestar_notifications
using AWS.Compat
using AWS.UUIDs

# Julia syntax for service-level optional parameters to the AWS request syntax
const SERVICE_PARAMETER_MAP = AWS.LittleDict("filters" => "Filters", "max_results" => "MaxResults", "next_token" => "NextToken", "force_unsubscribe_all" => "ForceUnsubscribeAll", "client_request_token" => "ClientRequestToken", "status" => "Status", "tags" => "Tags", "detail_type" => "DetailType", "event_type_ids" => "EventTypeIds", "name" => "Name", "targets" => "Targets")

"""
    create_notification_rule(detail_type, event_type_ids, name, resource, targets; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a notification rule for a resource. The rule specifies the events you want
notifications about and the targets (such as SNS topics) where you want to receive them.

# Arguments
- `detail_type`: The level of detail to include in the notifications for this resource.
  BASIC will include only the contents of the event as it would appear in AWS CloudWatch.
  FULL will include any supplemental information provided by AWS CodeStar Notifications
  and/or the service for the resource for which the notification is created.
- `event_type_ids`: A list of event types associated with this notification rule. For a
  list of allowed events, see EventTypeSummary.
- `name`: The name for the notification rule. Notifictaion rule names must be unique in
  your AWS account.
- `resource`: The Amazon Resource Name (ARN) of the resource to associate with the
  notification rule. Supported resources include pipelines in AWS CodePipeline, repositories
  in AWS CodeCommit, and build projects in AWS CodeBuild.
- `targets`: A list of Amazon Resource Names (ARNs) of SNS topics to associate with the
  notification rule.

# Keyword Parameters
- `client_request_token`: A unique, client-generated idempotency token that, when provided
  in a request, ensures the request cannot be repeated with a changed parameter. If a request
  with the same parameters is received and a token is included, the request returns
  information about the initial request that used that token.  The AWS SDKs prepopulate
  client request tokens. If you are using an AWS SDK, an idempotency token is created for
  you.
- `status`: The status of the notification rule. The default value is ENABLED. If the
  status is set to DISABLED, notifications aren't sent for the notification rule.
- `tags`: A list of tags to apply to this notification rule. Key names cannot start with
  \"aws\".
"""
function create_notification_rule(DetailType, EventTypeIds, Name, Resource, Targets; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return codestar_notifications("POST", "/createNotificationRule", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("DetailType"=>DetailType, "EventTypeIds"=>EventTypeIds, "Name"=>Name, "Resource"=>Resource, "Targets"=>Targets, "client_request_token"=>string(uuid4())), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_notification_rule(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a notification rule for a resource.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the notification rule you want to delete.

"""
function delete_notification_rule(Arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return codestar_notifications("POST", "/deleteNotificationRule", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Arn"=>Arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_target(target_address; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a specified target for notifications.

# Arguments
- `target_address`: The Amazon Resource Name (ARN) of the SNS topic to delete.

# Keyword Parameters
- `force_unsubscribe_all`: A Boolean value that can be used to delete all associations with
  this SNS topic. The default value is FALSE. If set to TRUE, all associations between that
  target and every notification rule in your AWS account are deleted.
"""
function delete_target(TargetAddress; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return codestar_notifications("POST", "/deleteTarget", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("TargetAddress"=>TargetAddress), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    describe_notification_rule(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about a specified notification rule.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the notification rule.

"""
function describe_notification_rule(Arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return codestar_notifications("POST", "/describeNotificationRule", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Arn"=>Arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_event_types(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns information about the event types available for configuring notifications.

# Keyword Parameters
- `filters`: The filters to use to return information by service or resource type.
- `max_results`: A non-negative integer used to limit the number of returned results. The
  default number is 50. The maximum number of results that can be returned is 100.
- `next_token`: An enumeration token that, when provided in a request, returns the next
  batch of the results.
"""
function list_event_types(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return codestar_notifications("POST", "/listEventTypes", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_notification_rules(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of the notification rules for an AWS account.

# Keyword Parameters
- `filters`: The filters to use to return information by service or resource type. For
  valid values, see ListNotificationRulesFilter.  A filter with the same name can appear more
  than once when used with OR statements. Filters with different names should be applied with
  AND statements.
- `max_results`: A non-negative integer used to limit the number of returned results. The
  maximum number of results that can be returned is 100.
- `next_token`: An enumeration token that, when provided in a request, returns the next
  batch of the results.
"""
function list_notification_rules(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return codestar_notifications("POST", "/listNotificationRules", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_tags_for_resource(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of the tags associated with a notification rule.

# Arguments
- `arn`: The Amazon Resource Name (ARN) for the notification rule.

"""
function list_tags_for_resource(Arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return codestar_notifications("POST", "/listTagsForResource", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Arn"=>Arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_targets(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Returns a list of the notification rule targets for an AWS account.

# Keyword Parameters
- `filters`: The filters to use to return information by service or resource type. Valid
  filters include target type, target address, and target status.  A filter with the same
  name can appear more than once when used with OR statements. Filters with different names
  should be applied with AND statements.
- `max_results`: A non-negative integer used to limit the number of returned results. The
  maximum number of results that can be returned is 100.
- `next_token`: An enumeration token that, when provided in a request, returns the next
  batch of the results.
"""
function list_targets(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return codestar_notifications("POST", "/listTargets", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    subscribe(arn, target; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an association between a notification rule and an SNS topic so that the associated
target can receive notifications when the events described in the rule are triggered.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the notification rule for which you want to
  create the association.
- `target`:

# Keyword Parameters
- `client_request_token`: An enumeration token that, when provided in a request, returns
  the next batch of the results.
"""
function subscribe(Arn, Target; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return codestar_notifications("POST", "/subscribe", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Arn"=>Arn, "Target"=>Target), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    tag_resource(arn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Associates a set of provided tags with a notification rule.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the notification rule to tag.
- `tags`: The list of tags to associate with the resource. Tag key names cannot start with
  \"aws\".

"""
function tag_resource(Arn, Tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return codestar_notifications("POST", "/tagResource", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Arn"=>Arn, "Tags"=>Tags), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    unsubscribe(arn, target_address; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes an association between a notification rule and an Amazon SNS topic so that
subscribers to that topic stop receiving notifications when the events described in the
rule are triggered.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the notification rule.
- `target_address`: The ARN of the SNS topic to unsubscribe from the notification rule.

"""
function unsubscribe(Arn, TargetAddress; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return codestar_notifications("POST", "/unsubscribe", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Arn"=>Arn, "TargetAddress"=>TargetAddress), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    untag_resource(arn, tag_keys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes the association between one or more provided tags and a notification rule.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the notification rule from which to remove the
  tags.
- `tag_keys`: The key names of the tags to remove.

"""
function untag_resource(Arn, TagKeys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return codestar_notifications("POST", "/untagResource", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Arn"=>Arn, "TagKeys"=>TagKeys), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_notification_rule(arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates a notification rule for a resource. You can change the events that trigger the
notification rule, the status of the rule, and the targets that receive the notifications.
To add or remove tags for a notification rule, you must use TagResource and UntagResource.

# Arguments
- `arn`: The Amazon Resource Name (ARN) of the notification rule.

# Keyword Parameters
- `detail_type`: The level of detail to include in the notifications for this resource.
  BASIC will include only the contents of the event as it would appear in AWS CloudWatch.
  FULL will include any supplemental information provided by AWS CodeStar Notifications
  and/or the service for the resource for which the notification is created.
- `event_type_ids`: A list of event types associated with this notification rule.
- `name`: The name of the notification rule.
- `status`: The status of the notification rule. Valid statuses include enabled (sending
  notifications) or disabled (not sending notifications).
- `targets`: The address and type of the targets to receive notifications from this
  notification rule.
"""
function update_notification_rule(Arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return codestar_notifications("POST", "/updateNotificationRule", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Arn"=>Arn), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
