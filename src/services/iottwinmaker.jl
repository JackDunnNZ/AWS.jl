# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: iottwinmaker
using AWS.Compat
using AWS.UUIDs

# Julia syntax for service-level optional parameters to the AWS request syntax
const SERVICE_PARAMETER_MAP = AWS.LittleDict("description" => "description", "extends_from" => "extendsFrom", "functions" => "functions", "is_singleton" => "isSingleton", "property_definitions" => "propertyDefinitions", "tags" => "tags", "max_results" => "maxResults", "next_token" => "nextToken", "is_recursive" => "isRecursive", "filters" => "filters", "component_updates" => "componentUpdates", "entity_name" => "entityName", "parent_entity_update" => "parentEntityUpdate", "role" => "role", "capabilities" => "capabilities", "components" => "components", "entity_id" => "entityId", "parent_entity_id" => "parentEntityId", "content_location" => "contentLocation", "component_name" => "componentName", "component_type_id" => "componentTypeId", "interpolation" => "interpolation", "order_by_time" => "orderByTime", "property_filters" => "propertyFilters")

"""
    batch_put_property_values(entries, workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Sets values for multiple time series properties.

# Arguments
- `entries`: An object that maps strings to the property value entries to set. Each string
  in the mapping must be unique to this object.
- `workspace_id`: The ID of the workspace that contains the properties to set.

"""
function batch_put_property_values(entries, workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("POST", "/workspaces/$(workspaceId)/entity-properties", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("entries"=>entries), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_component_type(component_type_id, workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a component type.   TwinMaker is in public preview and is subject to change.

# Arguments
- `component_type_id`: The ID of the component type.
- `workspace_id`: The ID of the workspace that contains the component type.

# Keyword Parameters
- `description`: The description of the component type.
- `extends_from`: Specifies the parent component type to extend.
- `functions`: An object that maps strings to the functions in the component type. Each
  string in the mapping must be unique to this object.
- `is_singleton`: A Boolean value that specifies whether an entity can have more than one
  component of this type.
- `property_definitions`: An object that maps strings to the property definitions in the
  component type. Each string in the mapping must be unique to this object.
- `tags`: Metadata that you can use to manage the component type.
"""
function create_component_type(componentTypeId, workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("POST", "/workspaces/$(workspaceId)/component-types/$(componentTypeId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_entity(entity_name, workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates an entity.

# Arguments
- `entity_name`: The name of the entity.
- `workspace_id`: The ID of the workspace that contains the entity.

# Keyword Parameters
- `components`: An object that maps strings to the components in the entity. Each string in
  the mapping must be unique to this object.
- `description`: The description of the entity.
- `entity_id`: The ID of the entity.
- `parent_entity_id`: The ID of the entity's parent entity.
- `tags`: Metadata that you can use to manage the entity.
"""
function create_entity(entityName, workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("POST", "/workspaces/$(workspaceId)/entities", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("entityName"=>entityName), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_scene(content_location, scene_id, workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a scene.

# Arguments
- `content_location`: The relative path that specifies the location of the content
  definition file.
- `scene_id`: The ID of the scene.
- `workspace_id`: The ID of the workspace that contains the scene.

# Keyword Parameters
- `capabilities`: A list of capabilities that the scene uses to render itself.
- `description`: The description for this scene.
- `tags`: Metadata that you can use to manage the scene.
"""
function create_scene(contentLocation, sceneId, workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("POST", "/workspaces/$(workspaceId)/scenes", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("contentLocation"=>contentLocation, "sceneId"=>sceneId), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    create_workspace(role, s3_location, workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Creates a workplace.

# Arguments
- `role`: The ARN of the execution role associated with the workspace.
- `s3_location`: The ARN of the S3 bucket where resources associated with the workspace are
  stored.
- `workspace_id`: The ID of the workspace.

# Keyword Parameters
- `description`: The description of the workspace.
- `tags`: Metadata that you can use to manage the workspace
"""
function create_workspace(role, s3Location, workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("POST", "/workspaces/$(workspaceId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("role"=>role, "s3Location"=>s3Location), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_component_type(component_type_id, workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a component type.

# Arguments
- `component_type_id`: The ID of the component type to delete.
- `workspace_id`: The ID of the workspace that contains the component type.

"""
function delete_component_type(componentTypeId, workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("DELETE", "/workspaces/$(workspaceId)/component-types/$(componentTypeId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_entity(entity_id, workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes an entity.

# Arguments
- `entity_id`: The ID of the entity to delete.
- `workspace_id`: The ID of the workspace that contains the entity to delete.

# Keyword Parameters
- `is_recursive`: A Boolean value that specifies whether the operation deletes child
  entities.
"""
function delete_entity(entityId, workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("DELETE", "/workspaces/$(workspaceId)/entities/$(entityId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_scene(scene_id, workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a scene.

# Arguments
- `scene_id`: The ID of the scene to delete.
- `workspace_id`: The ID of the workspace.

"""
function delete_scene(sceneId, workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("DELETE", "/workspaces/$(workspaceId)/scenes/$(sceneId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    delete_workspace(workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Deletes a workspace.

# Arguments
- `workspace_id`: The ID of the workspace to delete.

"""
function delete_workspace(workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("DELETE", "/workspaces/$(workspaceId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_component_type(component_type_id, workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves information about a component type.

# Arguments
- `component_type_id`: The ID of the component type.
- `workspace_id`: The ID of the workspace that contains the component type.

"""
function get_component_type(componentTypeId, workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("GET", "/workspaces/$(workspaceId)/component-types/$(componentTypeId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_entity(entity_id, workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves information about an entity.

# Arguments
- `entity_id`: The ID of the entity.
- `workspace_id`: The ID of the workspace.

"""
function get_entity(entityId, workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("GET", "/workspaces/$(workspaceId)/entities/$(entityId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_property_value(selected_properties, workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Gets the property values for a component, component type, entity, or workspace. You must
specify a value for either componentName, componentTypeId, entityId, or workspaceId.

# Arguments
- `selected_properties`: The properties whose values the operation returns.
- `workspace_id`: The ID of the workspace whose values the operation returns.

# Keyword Parameters
- `component_name`: The name of the component whose property values the operation returns.
- `component_type_id`: The ID of the component type whose property values the operation
  returns.
- `entity_id`: The ID of the entity whose property values the operation returns.
"""
function get_property_value(selectedProperties, workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("POST", "/workspaces/$(workspaceId)/entity-properties/value", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("selectedProperties"=>selectedProperties), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_property_value_history(end_date_time, selected_properties, start_date_time, workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves information about the history of a time series property value for a component,
component type, entity, or workspace. You must specify a value for workspaceId. For
entity-specific queries, specify values for componentName and entityId. For cross-entity
quries, specify a value for componentTypeId.

# Arguments
- `end_date_time`: The date and time of the latest property value to return.
- `selected_properties`: A list of properties whose value histories the request retrieves.
- `start_date_time`: The date and time of the earliest property value to return.
- `workspace_id`: The ID of the workspace.

# Keyword Parameters
- `component_name`: The name of the component.
- `component_type_id`: The ID of the component type.
- `entity_id`: The ID of the entity.
- `interpolation`: An object that specifies the interpolation type and the interval over
  which to interpolate data.
- `max_results`: The maximum number of results to return.
- `next_token`: The string that specifies the next page of results.
- `order_by_time`: The time direction to use in the result order.
- `property_filters`: A list of objects that filter the property value history request.
"""
function get_property_value_history(endDateTime, selectedProperties, startDateTime, workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("POST", "/workspaces/$(workspaceId)/entity-properties/history", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("endDateTime"=>endDateTime, "selectedProperties"=>selectedProperties, "startDateTime"=>startDateTime), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_scene(scene_id, workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves information about a scene.

# Arguments
- `scene_id`: The ID of the scene.
- `workspace_id`: The ID of the workspace that contains the scene.

"""
function get_scene(sceneId, workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("GET", "/workspaces/$(workspaceId)/scenes/$(sceneId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    get_workspace(workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves information about a workspace.

# Arguments
- `workspace_id`: The ID of the workspace.

"""
function get_workspace(workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("GET", "/workspaces/$(workspaceId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_component_types(workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists all component types in a workspace.

# Arguments
- `workspace_id`: The ID of the workspace.

# Keyword Parameters
- `filters`: A list of objects that filter the request.
- `max_results`: The maximum number of results to display.
- `next_token`: The string that specifies the next page of results.
"""
function list_component_types(workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("POST", "/workspaces/$(workspaceId)/component-types-list", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_entities(workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists all entities in a workspace.

# Arguments
- `workspace_id`: The ID of the workspace.

# Keyword Parameters
- `filters`: A list of objects that filter the request.
- `max_results`: The maximum number of results to display.
- `next_token`: The string that specifies the next page of results.
"""
function list_entities(workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("POST", "/workspaces/$(workspaceId)/entities-list", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_scenes(workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists all scenes in a workspace.

# Arguments
- `workspace_id`: The ID of the workspace that contains the scenes.

# Keyword Parameters
- `max_results`: Specifies the maximum number of results to display.
- `next_token`: The string that specifies the next page of results.
"""
function list_scenes(workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("POST", "/workspaces/$(workspaceId)/scenes-list", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_tags_for_resource(resource_arn; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Lists all tags associated with a resource.

# Arguments
- `resource_arn`: The ARN of the resource.

# Keyword Parameters
- `max_results`: The maximum number of results to display.
- `next_token`: The string that specifies the next page of results.
"""
function list_tags_for_resource(resourceARN; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("POST", "/tags-list", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("resourceARN"=>resourceARN), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_workspaces(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Retrieves information about workspaces in the current account.

# Keyword Parameters
- `max_results`: The maximum number of results to display.
- `next_token`: The string that specifies the next page of results.
"""
function list_workspaces(; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("POST", "/workspaces-list", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    tag_resource(resource_arn, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Adds tags to a resource.

# Arguments
- `resource_arn`: The ARN of the resource.
- `tags`: Metadata to add to this resource.

"""
function tag_resource(resourceARN, tags; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("POST", "/tags", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("resourceARN"=>resourceARN, "tags"=>tags), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    untag_resource(resource_arn, tag_keys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Removes tags from a resource.

# Arguments
- `resource_arn`: The ARN of the resource.
- `tag_keys`: A list of tag key names to remove from the resource. You don't specify the
  value. Both the key and its associated value are removed.

"""
function untag_resource(resourceARN, tagKeys; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("DELETE", "/tags", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("resourceARN"=>resourceARN, "tagKeys"=>tagKeys), params)); aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_component_type(component_type_id, workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates information in a component type.

# Arguments
- `component_type_id`: The ID of the component type.
- `workspace_id`: The ID of the workspace that contains the component type.

# Keyword Parameters
- `description`: The description of the component type.
- `extends_from`: Specifies the component type that this component type extends.
- `functions`: An object that maps strings to the functions in the component type. Each
  string in the mapping must be unique to this object.
- `is_singleton`: A Boolean value that specifies whether an entity can have more than one
  component of this type.
- `property_definitions`: An object that maps strings to the property definitions in the
  component type. Each string in the mapping must be unique to this object.
"""
function update_component_type(componentTypeId, workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("PUT", "/workspaces/$(workspaceId)/component-types/$(componentTypeId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_entity(entity_id, workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates an entity.

# Arguments
- `entity_id`: The ID of the entity.
- `workspace_id`: The ID of the workspace that contains the entity.

# Keyword Parameters
- `component_updates`: An object that maps strings to the component updates in the request.
  Each string in the mapping must be unique to this object.
- `description`: The description of the entity.
- `entity_name`: The name of the entity.
- `parent_entity_update`: An object that describes the update request for a parent entity.
"""
function update_entity(entityId, workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("PUT", "/workspaces/$(workspaceId)/entities/$(entityId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_scene(scene_id, workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates a scene.

# Arguments
- `scene_id`: The ID of the scene.
- `workspace_id`: The ID of the workspace that contains the scene.

# Keyword Parameters
- `capabilities`: A list of capabilities that the scene uses to render.
- `content_location`: The relative path that specifies the location of the content
  definition file.
- `description`: The description of this scene.
"""
function update_scene(sceneId, workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("PUT", "/workspaces/$(workspaceId)/scenes/$(sceneId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    update_workspace(workspace_id; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)

Updates a workspace.

# Arguments
- `workspace_id`: The ID of the workspace.

# Keyword Parameters
- `description`: The description of the workspace.
- `role`: The ARN of the execution role associated with the workspace.
"""
function update_workspace(workspaceId; aws_config::AbstractAWSConfig=global_aws_config(), kwargs...)
    params = amazonify(SERVICE_PARAMETER_MAP, kwargs)
    return iottwinmaker("PUT", "/workspaces/$(workspaceId)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
